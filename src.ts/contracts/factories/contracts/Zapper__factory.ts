/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Zapper, ZapperInterface } from "../../contracts/Zapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWrappedNative",
        name: "wrappedNative_",
        type: "address",
      },
      {
        internalType: "contract IPermit2",
        name: "permit2_",
        type: "address",
      },
      {
        internalType: "contract ZapperExecutor",
        name: "executor_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
        ],
        internalType: "struct ZapERC20Params",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zapERC20",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "out",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
        ],
        internalType: "struct ZapERC20Params",
        name: "params",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "zapERC20WithPermit2",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "out",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
        ],
        internalType: "struct ZapERC20Params",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zapETH",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "out",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "";

type ZapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ZapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Zapper__factory extends ContractFactory {
  constructor(...args: ZapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    wrappedNative_: PromiseOrValue<string>,
    permit2_: PromiseOrValue<string>,
    executor_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Zapper> {
    return super.deploy(
      wrappedNative_,
      permit2_,
      executor_,
      overrides || {}
    ) as Promise<Zapper>;
  }
  override getDeployTransaction(
    wrappedNative_: PromiseOrValue<string>,
    permit2_: PromiseOrValue<string>,
    executor_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      wrappedNative_,
      permit2_,
      executor_,
      overrides || {}
    );
  }
  override attach(address: string): Zapper {
    return super.attach(address) as Zapper;
  }
  override connect(signer: Signer): Zapper__factory {
    return super.connect(signer) as Zapper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ZapperInterface {
    return new utils.Interface(_abi) as ZapperInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Zapper {
    return new Contract(address, _abi, signerOrProvider) as Zapper;
  }
}
