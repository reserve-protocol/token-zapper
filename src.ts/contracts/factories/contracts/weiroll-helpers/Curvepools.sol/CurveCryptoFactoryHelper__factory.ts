/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  CurveCryptoFactoryHelper,
  CurveCryptoFactoryHelperInterface,
} from "../../../../contracts/weiroll-helpers/Curvepools.sol/CurveCryptoFactoryHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount0",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount1",
        type: "uint256",
      },
      {
        internalType: "contract ICurveCryptoFactory",
        name: "pool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "minOut",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "useEth",
        type: "bool",
      },
    ],
    name: "addliquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610474806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063b02e94e214610030575b600080fd5b61004a60048036038101906100459190610237565b610060565b60405161005791906102c1565b60405180910390f35b600061006a610132565b868160006002811061007f5761007e6102dc565b5b602002018181525050858160016002811061009d5761009c6102dc565b5b6020020181815250508473ffffffffffffffffffffffffffffffffffffffff1663ee22be238286866040518463ffffffff1660e01b81526004016100e3939291906103c5565b6020604051808303816000875af1158015610102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101269190610411565b91505095945050505050565b6040518060400160405280600290602082028036833780820191505090505090565b600080fd5b6000819050919050565b61016c81610159565b811461017757600080fd5b50565b60008135905061018981610163565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101ba8261018f565b9050919050565b60006101cc826101af565b9050919050565b6101dc816101c1565b81146101e757600080fd5b50565b6000813590506101f9816101d3565b92915050565b60008115159050919050565b610214816101ff565b811461021f57600080fd5b50565b6000813590506102318161020b565b92915050565b600080600080600060a0868803121561025357610252610154565b5b60006102618882890161017a565b95505060206102728882890161017a565b9450506040610283888289016101ea565b93505060606102948882890161017a565b92505060806102a588828901610222565b9150509295509295909350565b6102bb81610159565b82525050565b60006020820190506102d660008301846102b2565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b61033481610159565b82525050565b6000610346838361032b565b60208301905092915050565b6000602082019050919050565b6103688161030b565b6103728184610316565b925061037d82610321565b8060005b838110156103ae578151610395878261033a565b96506103a083610352565b925050600181019050610381565b505050505050565b6103bf816101ff565b82525050565b60006080820190506103da600083018661035f565b6103e760408301856102b2565b6103f460608301846103b6565b949350505050565b60008151905061040b81610163565b92915050565b60006020828403121561042757610426610154565b5b6000610435848285016103fc565b9150509291505056fea2646970667358221220535ff77b55abe18fae54514abce6790206d898570b875cc6e71782610d2ee9e164736f6c63430008110033";

type CurveCryptoFactoryHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveCryptoFactoryHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveCryptoFactoryHelper__factory extends ContractFactory {
  constructor(...args: CurveCryptoFactoryHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CurveCryptoFactoryHelper> {
    return super.deploy(overrides || {}) as Promise<CurveCryptoFactoryHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveCryptoFactoryHelper {
    return super.attach(address) as CurveCryptoFactoryHelper;
  }
  override connect(signer: Signer): CurveCryptoFactoryHelper__factory {
    return super.connect(signer) as CurveCryptoFactoryHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveCryptoFactoryHelperInterface {
    return new utils.Interface(_abi) as CurveCryptoFactoryHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveCryptoFactoryHelper {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CurveCryptoFactoryHelper;
  }
}
