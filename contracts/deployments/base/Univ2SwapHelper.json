{
  "address": "0x14492D05b19C73C145D89e20ea9c1b4d53460bA9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "pair",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swapOnPoolWithFeeTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOutput",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b0bdbb319f3e24f1092c91409b584e1e5d98db6b19fa1957058727ab6b94063",
  "receipt": {
    "to": null,
    "from": "0xF2d98377d80DADf725bFb97E91357F1d81384De2",
    "contractAddress": "0x14492D05b19C73C145D89e20ea9c1b4d53460bA9",
    "transactionIndex": 173,
    "gasUsed": "1285836",
    "logsBloom": "0x
    "blockHash": "0x31f9b9f557c3b294b9b04848eab119c42cfb209499eae849b9cdec50d67ff2d6",
    "transactionHash": "0x0b0bdbb319f3e24f1092c91409b584e1e5d98db6b19fa1957058727ab6b94063",
    "logs": [],
    "blockNumber": 25726448,
    "cumulativeGasUsed": "34980787",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "4b54b0e9cbf54bc673fc82e910ee3db4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swapOnPoolWithFeeTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutput\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/weiroll-helpers/Univ2SwapHelper.sol\":\"Univ2SwapHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x5b9c5eecd0f688eb09374166e4eadf0b506d0d08d26f8b050583a44114efd2be\",\"license\":\"BlueOak-1.0.0\"},\"contracts/weiroll-helpers/Univ2SwapHelper.sol\":{\"content\":\"\\n// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../IUniswapV2Pair.sol\\\";\\nfunction getAmountOut(\\n  uint amountIn,\\n  uint reserveIn,\\n  uint reserveOut\\n) pure returns (uint amountOut){\\n  require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n  require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n  uint amountInWithFee = amountIn * 997;\\n  uint numerator = amountInWithFee * reserveOut;\\n  uint denominator = reserveIn * 1000 + amountInWithFee;\\n  amountOut = numerator / denominator;\\n}\\nfunction sortTokens(address tokenA, address tokenB) pure returns (address token0, address token1) {\\n  require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n  (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n  require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n}\\ncontract Univ2SwapHelper {\\n  function swap(\\n    address pool,\\n    bool zeroForOne,\\n    address tokenIn,\\n    uint256 amountIn\\n) external returns (uint256 amountOut) {\\n    \\n    (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(pool).getReserves();\\n    SafeERC20.safeTransfer(IERC20(tokenIn), pool, amountIn);\\n    if (zeroForOne) {\\n      amountOut = getAmountOut(amountIn, reserve0, reserve1);\\n      IUniswapV2Pair(pool).swap(0, amountOut, address(this), new bytes(0));\\n    } else {\\n      amountOut = getAmountOut(amountIn, reserve1, reserve0);\\n      IUniswapV2Pair(pool).swap(amountOut, 0, address(this), new bytes(0));\\n    }\\n  }\\n\\n  function swapOnPoolWithFeeTokens(\\n    IUniswapV2Pair pair,\\n    address tokenIn,\\n    address tokenOut,\\n    uint256 amountIn\\n  ) external returns (uint256 amountOutput) {\\n    SafeERC20.safeTransfer(IERC20(tokenIn), address(pair), amountIn);\\n    (address token0,) = sortTokens(tokenIn, tokenOut);\\n    uint amountInput;\\n    { // scope to avoid stack too deep errors\\n    (uint reserve0, uint reserve1,) = pair.getReserves();\\n    (uint reserveInput, uint reserveOutput) = tokenIn == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    amountInput = IERC20(tokenIn).balanceOf(address(pair)) - reserveInput;\\n    amountOutput = getAmountOut(amountInput, reserveInput, reserveOutput);\\n    }\\n    (uint amount0Out, uint amount1Out) = tokenIn == token0 ? (uint(0), amountOutput) : (amountOutput, uint(0));\\n    \\n    pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n  }\\n}\\n\",\"keccak256\":\"0x8c1c259d181e0738d25b9a556f201d9ce4ebc054e384bd95fe94fcf1c28147da\",\"license\":\"BlueOak-1.0.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611664806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634c2018891461003b57806390712b071461006b575b600080fd5b61005560048036038101906100509190610bb5565b61009b565b6040516100629190610c2b565b60405180910390f35b61008560048036038101906100809190610c7e565b61033c565b6040516100929190610c2b565b60405180910390f35b60006100a88486846105ae565b60006100b48585610634565b50905060008060008873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012b9190610d67565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000808573ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161461018d578284610190565b83835b91509150818a73ffffffffffffffffffffffffffffffffffffffff166370a082318d6040518263ffffffff1660e01b81526004016101ce9190610dc9565b602060405180830381865afa1580156101eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020f9190610df9565b6102199190610e55565b9450610226858383610760565b9650505050506000808373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461026a5784600061026e565b6000855b915091508873ffffffffffffffffffffffffffffffffffffffff1663022c0d9f838330600067ffffffffffffffff8111156102ac576102ab610e89565b5b6040519080825280601f01601f1916602001820160405280156102de5781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016102fe9493929190610f48565b600060405180830381600087803b15801561031857600080fd5b505af115801561032c573d6000803e3d6000fd5b5050505050505050949350505050565b60008060008673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190610d67565b50915091506103c08588866105ae565b85156104b7576103f184836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16610760565b92508673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f60008530600067ffffffffffffffff81111561042e5761042d610e89565b5b6040519080825280601f01601f1916602001820160405280156104605781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016104809493929190610fd9565b600060405180830381600087803b15801561049a57600080fd5b505af11580156104ae573d6000803e3d6000fd5b505050506105a4565b6104e284826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16610760565b92508673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84600030600067ffffffffffffffff81111561051f5761051e610e89565b5b6040519080825280601f01601f1916602001820160405280156105515781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016105719493929190611025565b600060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b505050505b5050949350505050565b61062f8363a9059cbb60e01b84846040516024016105cd929190611071565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061084a565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c9061111d565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106106df5782846106e2565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075090611189565b60405180910390fd5b9250929050565b60008084116107a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079b9061121b565b60405180910390fd5b6000831180156107b45750600082115b6107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea906112ad565b60405180910390fd5b60006103e58561080391906112cd565b90506000838261081391906112cd565b90506000826103e88761082691906112cd565b610830919061130f565b9050808261083e9190611372565b93505050509392505050565b60006108ac826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166109119092919063ffffffff16565b905060008151111561090c57808060200190518101906108cc91906113b8565b61090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090290611457565b60405180910390fd5b5b505050565b60606109208484600085610929565b90509392505050565b60608247101561096e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610965906114e9565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516109979190611545565b60006040518083038185875af1925050503d80600081146109d4576040519150601f19603f3d011682016040523d82523d6000602084013e6109d9565b606091505b50915091506109ea878383876109f6565b92505050949350505050565b60608315610a58576000835103610a5057610a1085610a6b565b610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a46906115a8565b60405180910390fd5b5b829050610a63565b610a628383610a8e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610aa15781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad5919061160c565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0e82610ae3565b9050919050565b6000610b2082610b03565b9050919050565b610b3081610b15565b8114610b3b57600080fd5b50565b600081359050610b4d81610b27565b92915050565b610b5c81610b03565b8114610b6757600080fd5b50565b600081359050610b7981610b53565b92915050565b6000819050919050565b610b9281610b7f565b8114610b9d57600080fd5b50565b600081359050610baf81610b89565b92915050565b60008060008060808587031215610bcf57610bce610ade565b5b6000610bdd87828801610b3e565b9450506020610bee87828801610b6a565b9350506040610bff87828801610b6a565b9250506060610c1087828801610ba0565b91505092959194509250565b610c2581610b7f565b82525050565b6000602082019050610c406000830184610c1c565b92915050565b60008115159050919050565b610c5b81610c46565b8114610c6657600080fd5b50565b600081359050610c7881610c52565b92915050565b60008060008060808587031215610c9857610c97610ade565b5b6000610ca687828801610b6a565b9450506020610cb787828801610c69565b9350506040610cc887828801610b6a565b9250506060610cd987828801610ba0565b91505092959194509250565b60006dffffffffffffffffffffffffffff82169050919050565b610d0881610ce5565b8114610d1357600080fd5b50565b600081519050610d2581610cff565b92915050565b600063ffffffff82169050919050565b610d4481610d2b565b8114610d4f57600080fd5b50565b600081519050610d6181610d3b565b92915050565b600080600060608486031215610d8057610d7f610ade565b5b6000610d8e86828701610d16565b9350506020610d9f86828701610d16565b9250506040610db086828701610d52565b9150509250925092565b610dc381610b03565b82525050565b6000602082019050610dde6000830184610dba565b92915050565b600081519050610df381610b89565b92915050565b600060208284031215610e0f57610e0e610ade565b5b6000610e1d84828501610de4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e6082610b7f565b9150610e6b83610b7f565b9250828203905081811115610e8357610e82610e26565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600082825260208201905092915050565b60005b83811015610ef2578082015181840152602081019050610ed7565b60008484015250505050565b6000601f19601f8301169050919050565b6000610f1a82610eb8565b610f248185610ec3565b9350610f34818560208601610ed4565b610f3d81610efe565b840191505092915050565b6000608082019050610f5d6000830187610c1c565b610f6a6020830186610c1c565b610f776040830185610dba565b8181036060830152610f898184610f0f565b905095945050505050565b6000819050919050565b6000819050919050565b6000610fc3610fbe610fb984610f94565b610f9e565b610b7f565b9050919050565b610fd381610fa8565b82525050565b6000608082019050610fee6000830187610fca565b610ffb6020830186610c1c565b6110086040830185610dba565b818103606083015261101a8184610f0f565b905095945050505050565b600060808201905061103a6000830187610c1c565b6110476020830186610fca565b6110546040830185610dba565b81810360608301526110668184610f0f565b905095945050505050565b60006040820190506110866000830185610dba565b6110936020830184610c1c565b9392505050565b600082825260208201905092915050565b7f556e697377617056324c6962726172793a204944454e544943414c5f4144445260008201527f4553534553000000000000000000000000000000000000000000000000000000602082015250565b600061110760258361109a565b9150611112826110ab565b604082019050919050565b60006020820190508181036000830152611136816110fa565b9050919050565b7f556e697377617056324c6962726172793a205a45524f5f414444524553530000600082015250565b6000611173601e8361109a565b915061117e8261113d565b602082019050919050565b600060208201905081810360008301526111a281611166565b9050919050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4960008201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000602082015250565b6000611205602b8361109a565b9150611210826111a9565b604082019050919050565b60006020820190508181036000830152611234816111f8565b9050919050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60008201527f4951554944495459000000000000000000000000000000000000000000000000602082015250565b600061129760288361109a565b91506112a28261123b565b604082019050919050565b600060208201905081810360008301526112c68161128a565b9050919050565b60006112d882610b7f565b91506112e383610b7f565b92508282026112f181610b7f565b9150828204841483151761130857611307610e26565b5b5092915050565b600061131a82610b7f565b915061132583610b7f565b925082820190508082111561133d5761133c610e26565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061137d82610b7f565b915061138883610b7f565b92508261139857611397611343565b5b828204905092915050565b6000815190506113b281610c52565b92915050565b6000602082840312156113ce576113cd610ade565b5b60006113dc848285016113a3565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611441602a8361109a565b915061144c826113e5565b604082019050919050565b6000602082019050818103600083015261147081611434565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006114d360268361109a565b91506114de82611477565b604082019050919050565b60006020820190508181036000830152611502816114c6565b9050919050565b600081905092915050565b600061151f82610eb8565b6115298185611509565b9350611539818560208601610ed4565b80840191505092915050565b60006115518284611514565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611592601d8361109a565b915061159d8261155c565b602082019050919050565b600060208201905081810360008301526115c181611585565b9050919050565b600081519050919050565b60006115de826115c8565b6115e8818561109a565b93506115f8818560208601610ed4565b61160181610efe565b840191505092915050565b6000602082019050818103600083015261162681846115d3565b90509291505056fea26469706673582212200b2443863433368ec3bd2d051b45e13d2f5832ff0cdabc71d4167ad6a8c76e4364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80634c2018891461003b57806390712b071461006b575b600080fd5b61005560048036038101906100509190610bb5565b61009b565b6040516100629190610c2b565b60405180910390f35b61008560048036038101906100809190610c7e565b61033c565b6040516100929190610c2b565b60405180910390f35b60006100a88486846105ae565b60006100b48585610634565b50905060008060008873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012b9190610d67565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691506000808573ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161461018d578284610190565b83835b91509150818a73ffffffffffffffffffffffffffffffffffffffff166370a082318d6040518263ffffffff1660e01b81526004016101ce9190610dc9565b602060405180830381865afa1580156101eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020f9190610df9565b6102199190610e55565b9450610226858383610760565b9650505050506000808373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461026a5784600061026e565b6000855b915091508873ffffffffffffffffffffffffffffffffffffffff1663022c0d9f838330600067ffffffffffffffff8111156102ac576102ab610e89565b5b6040519080825280601f01601f1916602001820160405280156102de5781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016102fe9493929190610f48565b600060405180830381600087803b15801561031857600080fd5b505af115801561032c573d6000803e3d6000fd5b5050505050505050949350505050565b60008060008673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190610d67565b50915091506103c08588866105ae565b85156104b7576103f184836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff16610760565b92508673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f60008530600067ffffffffffffffff81111561042e5761042d610e89565b5b6040519080825280601f01601f1916602001820160405280156104605781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016104809493929190610fd9565b600060405180830381600087803b15801561049a57600080fd5b505af11580156104ae573d6000803e3d6000fd5b505050506105a4565b6104e284826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff16610760565b92508673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84600030600067ffffffffffffffff81111561051f5761051e610e89565b5b6040519080825280601f01601f1916602001820160405280156105515781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016105719493929190611025565b600060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b505050505b5050949350505050565b61062f8363a9059cbb60e01b84846040516024016105cd929190611071565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061084a565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036106a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069c9061111d565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106106df5782846106e2565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610759576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075090611189565b60405180910390fd5b9250929050565b60008084116107a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079b9061121b565b60405180910390fd5b6000831180156107b45750600082115b6107f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ea906112ad565b60405180910390fd5b60006103e58561080391906112cd565b90506000838261081391906112cd565b90506000826103e88761082691906112cd565b610830919061130f565b9050808261083e9190611372565b93505050509392505050565b60006108ac826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166109119092919063ffffffff16565b905060008151111561090c57808060200190518101906108cc91906113b8565b61090b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090290611457565b60405180910390fd5b5b505050565b60606109208484600085610929565b90509392505050565b60608247101561096e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610965906114e9565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516109979190611545565b60006040518083038185875af1925050503d80600081146109d4576040519150601f19603f3d011682016040523d82523d6000602084013e6109d9565b606091505b50915091506109ea878383876109f6565b92505050949350505050565b60608315610a58576000835103610a5057610a1085610a6b565b610a4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a46906115a8565b60405180910390fd5b5b829050610a63565b610a628383610a8e565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610aa15781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad5919061160c565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b0e82610ae3565b9050919050565b6000610b2082610b03565b9050919050565b610b3081610b15565b8114610b3b57600080fd5b50565b600081359050610b4d81610b27565b92915050565b610b5c81610b03565b8114610b6757600080fd5b50565b600081359050610b7981610b53565b92915050565b6000819050919050565b610b9281610b7f565b8114610b9d57600080fd5b50565b600081359050610baf81610b89565b92915050565b60008060008060808587031215610bcf57610bce610ade565b5b6000610bdd87828801610b3e565b9450506020610bee87828801610b6a565b9350506040610bff87828801610b6a565b9250506060610c1087828801610ba0565b91505092959194509250565b610c2581610b7f565b82525050565b6000602082019050610c406000830184610c1c565b92915050565b60008115159050919050565b610c5b81610c46565b8114610c6657600080fd5b50565b600081359050610c7881610c52565b92915050565b60008060008060808587031215610c9857610c97610ade565b5b6000610ca687828801610b6a565b9450506020610cb787828801610c69565b9350506040610cc887828801610b6a565b9250506060610cd987828801610ba0565b91505092959194509250565b60006dffffffffffffffffffffffffffff82169050919050565b610d0881610ce5565b8114610d1357600080fd5b50565b600081519050610d2581610cff565b92915050565b600063ffffffff82169050919050565b610d4481610d2b565b8114610d4f57600080fd5b50565b600081519050610d6181610d3b565b92915050565b600080600060608486031215610d8057610d7f610ade565b5b6000610d8e86828701610d16565b9350506020610d9f86828701610d16565b9250506040610db086828701610d52565b9150509250925092565b610dc381610b03565b82525050565b6000602082019050610dde6000830184610dba565b92915050565b600081519050610df381610b89565b92915050565b600060208284031215610e0f57610e0e610ade565b5b6000610e1d84828501610de4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e6082610b7f565b9150610e6b83610b7f565b9250828203905081811115610e8357610e82610e26565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600082825260208201905092915050565b60005b83811015610ef2578082015181840152602081019050610ed7565b60008484015250505050565b6000601f19601f8301169050919050565b6000610f1a82610eb8565b610f248185610ec3565b9350610f34818560208601610ed4565b610f3d81610efe565b840191505092915050565b6000608082019050610f5d6000830187610c1c565b610f6a6020830186610c1c565b610f776040830185610dba565b8181036060830152610f898184610f0f565b905095945050505050565b6000819050919050565b6000819050919050565b6000610fc3610fbe610fb984610f94565b610f9e565b610b7f565b9050919050565b610fd381610fa8565b82525050565b6000608082019050610fee6000830187610fca565b610ffb6020830186610c1c565b6110086040830185610dba565b818103606083015261101a8184610f0f565b905095945050505050565b600060808201905061103a6000830187610c1c565b6110476020830186610fca565b6110546040830185610dba565b81810360608301526110668184610f0f565b905095945050505050565b60006040820190506110866000830185610dba565b6110936020830184610c1c565b9392505050565b600082825260208201905092915050565b7f556e697377617056324c6962726172793a204944454e544943414c5f4144445260008201527f4553534553000000000000000000000000000000000000000000000000000000602082015250565b600061110760258361109a565b9150611112826110ab565b604082019050919050565b60006020820190508181036000830152611136816110fa565b9050919050565b7f556e697377617056324c6962726172793a205a45524f5f414444524553530000600082015250565b6000611173601e8361109a565b915061117e8261113d565b602082019050919050565b600060208201905081810360008301526111a281611166565b9050919050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4960008201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000602082015250565b6000611205602b8361109a565b9150611210826111a9565b604082019050919050565b60006020820190508181036000830152611234816111f8565b9050919050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60008201527f4951554944495459000000000000000000000000000000000000000000000000602082015250565b600061129760288361109a565b91506112a28261123b565b604082019050919050565b600060208201905081810360008301526112c68161128a565b9050919050565b60006112d882610b7f565b91506112e383610b7f565b92508282026112f181610b7f565b9150828204841483151761130857611307610e26565b5b5092915050565b600061131a82610b7f565b915061132583610b7f565b925082820190508082111561133d5761133c610e26565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061137d82610b7f565b915061138883610b7f565b92508261139857611397611343565b5b828204905092915050565b6000815190506113b281610c52565b92915050565b6000602082840312156113ce576113cd610ade565b5b60006113dc848285016113a3565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611441602a8361109a565b915061144c826113e5565b604082019050919050565b6000602082019050818103600083015261147081611434565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006114d360268361109a565b91506114de82611477565b604082019050919050565b60006020820190508181036000830152611502816114c6565b9050919050565b600081905092915050565b600061151f82610eb8565b6115298185611509565b9350611539818560208601610ed4565b80840191505092915050565b60006115518284611514565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000611592601d8361109a565b915061159d8261155c565b602082019050919050565b600060208201905081810360008301526115c181611585565b9050919050565b600081519050919050565b60006115de826115c8565b6115e8818561109a565b93506115f8818560208601610ed4565b61160181610efe565b840191505092915050565b6000602082019050818103600083015261162681846115d3565b90509291505056fea26469706673582212200b2443863433368ec3bd2d051b45e13d2f5832ff0cdabc71d4167ad6a8c76e4364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}