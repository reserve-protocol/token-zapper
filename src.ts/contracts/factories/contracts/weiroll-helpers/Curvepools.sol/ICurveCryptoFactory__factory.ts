/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICurveCryptoFactory,
  ICurveCryptoFactoryInterface,
} from "../../../../contracts/weiroll-helpers/Curvepools.sol/ICurveCryptoFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[2]",
        name: "amounts",
        type: "uint256[2]",
      },
      {
        internalType: "uint256",
        name: "minOut",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "useEth",
        type: "bool",
      },
    ],
    name: "add_liquidity",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ICurveCryptoFactory__factory {
  static readonly abi = _abi;
  static createInterface(): ICurveCryptoFactoryInterface {
    return new utils.Interface(_abi) as ICurveCryptoFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICurveCryptoFactory {
    return new Contract(address, _abi, signerOrProvider) as ICurveCryptoFactory;
  }
}
