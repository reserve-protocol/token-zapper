/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IMaverickV2Pool {
  export type AddLiquidityParamsStruct = {
    kind: PromiseOrValue<BigNumberish>;
    ticks: PromiseOrValue<BigNumberish>[];
    amounts: PromiseOrValue<BigNumberish>[];
  };

  export type AddLiquidityParamsStructOutput = [
    number,
    number[],
    BigNumber[]
  ] & { kind: number; ticks: number[]; amounts: BigNumber[] };

  export type RemoveLiquidityParamsStruct = {
    binIds: PromiseOrValue<BigNumberish>[];
    amounts: PromiseOrValue<BigNumberish>[];
  };

  export type RemoveLiquidityParamsStructOutput = [number[], BigNumber[]] & {
    binIds: number[];
    amounts: BigNumber[];
  };

  export type SwapParamsStruct = {
    amount: PromiseOrValue<BigNumberish>;
    tokenAIn: PromiseOrValue<boolean>;
    exactOutput: PromiseOrValue<boolean>;
    tickLimit: PromiseOrValue<BigNumberish>;
  };

  export type SwapParamsStructOutput = [BigNumber, boolean, boolean, number] & {
    amount: BigNumber;
    tokenAIn: boolean;
    exactOutput: boolean;
    tickLimit: number;
  };

  export type BinStateStruct = {
    mergeBinBalance: PromiseOrValue<BigNumberish>;
    tickBalance: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    kind: PromiseOrValue<BigNumberish>;
    tick: PromiseOrValue<BigNumberish>;
    mergeId: PromiseOrValue<BigNumberish>;
  };

  export type BinStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ] & {
    mergeBinBalance: BigNumber;
    tickBalance: BigNumber;
    totalSupply: BigNumber;
    kind: number;
    tick: number;
    mergeId: number;
  };

  export type StateStruct = {
    reserveA: PromiseOrValue<BigNumberish>;
    reserveB: PromiseOrValue<BigNumberish>;
    lastTwaD8: PromiseOrValue<BigNumberish>;
    lastLogPriceD8: PromiseOrValue<BigNumberish>;
    lastTimestamp: PromiseOrValue<BigNumberish>;
    activeTick: PromiseOrValue<BigNumberish>;
    isLocked: PromiseOrValue<boolean>;
    binCounter: PromiseOrValue<BigNumberish>;
    protocolFeeRatioD3: PromiseOrValue<BigNumberish>;
  };

  export type StateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    boolean,
    number,
    number
  ] & {
    reserveA: BigNumber;
    reserveB: BigNumber;
    lastTwaD8: BigNumber;
    lastLogPriceD8: BigNumber;
    lastTimestamp: number;
    activeTick: number;
    isLocked: boolean;
    binCounter: number;
    protocolFeeRatioD3: number;
  };

  export type TickStateStruct = {
    reserveA: PromiseOrValue<BigNumberish>;
    reserveB: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    binIdsByTick: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
  };

  export type TickStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    [number, number, number, number]
  ] & {
    reserveA: BigNumber;
    reserveB: BigNumber;
    totalSupply: BigNumber;
    binIdsByTick: [number, number, number, number];
  };
}

export interface IMaverickV2PoolInterface extends utils.Interface {
  functions: {
    "accessor()": FunctionFragment;
    "addLiquidity(address,uint256,(uint8,int32[],uint128[]),bytes)": FunctionFragment;
    "balanceOf(address,uint256,uint32)": FunctionFragment;
    "binIdByTickKind(int32,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fee(bool)": FunctionFragment;
    "flashLoan(address,uint256,uint256,bytes)": FunctionFragment;
    "getBin(uint32)": FunctionFragment;
    "getCurrentTwa()": FunctionFragment;
    "getState()": FunctionFragment;
    "getTick(int32)": FunctionFragment;
    "kinds()": FunctionFragment;
    "lendingFeeRateD18()": FunctionFragment;
    "lookback()": FunctionFragment;
    "migrateBinUpStack(uint32,uint32)": FunctionFragment;
    "permissionedLiquidity()": FunctionFragment;
    "permissionedPool()": FunctionFragment;
    "permissionedSwap()": FunctionFragment;
    "protocolFeeA()": FunctionFragment;
    "protocolFeeB()": FunctionFragment;
    "removeLiquidity(address,uint256,(uint32[],uint128[]))": FunctionFragment;
    "setFee(uint256,uint256)": FunctionFragment;
    "swap(address,(uint256,bool,bool,int32),bytes)": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "tokenA()": FunctionFragment;
    "tokenAScale()": FunctionFragment;
    "tokenB()": FunctionFragment;
    "tokenBScale()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accessor"
      | "addLiquidity"
      | "balanceOf"
      | "binIdByTickKind"
      | "factory"
      | "fee"
      | "flashLoan"
      | "getBin"
      | "getCurrentTwa"
      | "getState"
      | "getTick"
      | "kinds"
      | "lendingFeeRateD18"
      | "lookback"
      | "migrateBinUpStack"
      | "permissionedLiquidity"
      | "permissionedPool"
      | "permissionedSwap"
      | "protocolFeeA"
      | "protocolFeeB"
      | "removeLiquidity"
      | "setFee"
      | "swap"
      | "tickSpacing"
      | "tokenA"
      | "tokenAScale"
      | "tokenB"
      | "tokenBScale"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "accessor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IMaverickV2Pool.AddLiquidityParamsStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "binIdByTickKind",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fee",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBin",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTwa",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTick",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "kinds", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lendingFeeRateD18",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lookback", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "migrateBinUpStack",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "permissionedLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissionedPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permissionedSwap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      IMaverickV2Pool.RemoveLiquidityParamsStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      IMaverickV2Pool.SwapParamsStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAScale",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenB", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBScale",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "accessor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "binIdByTickKind",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTwa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getTick", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "kinds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingFeeRateD18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lookback", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "migrateBinUpStack",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionedLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permissionedSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAScale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBScale",
    data: BytesLike
  ): Result;

  events: {
    "PoolAddLiquidity(address,address,uint256,tuple,uint256,uint256,uint32[])": EventFragment;
    "PoolMigrateBinsUpStack(address,uint32,uint32)": EventFragment;
    "PoolRemoveLiquidity(address,address,uint256,tuple,uint256,uint256)": EventFragment;
    "PoolSetVariableFee(uint256,uint256)": EventFragment;
    "PoolSwap(address,address,tuple,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolAddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolMigrateBinsUpStack"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolRemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolSetVariableFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolSwap"): EventFragment;
}

export interface PoolAddLiquidityEventObject {
  sender: string;
  recipient: string;
  subaccount: BigNumber;
  params: IMaverickV2Pool.AddLiquidityParamsStructOutput;
  tokenAAmount: BigNumber;
  tokenBAmount: BigNumber;
  binIds: number[];
}
export type PoolAddLiquidityEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    IMaverickV2Pool.AddLiquidityParamsStructOutput,
    BigNumber,
    BigNumber,
    number[]
  ],
  PoolAddLiquidityEventObject
>;

export type PoolAddLiquidityEventFilter =
  TypedEventFilter<PoolAddLiquidityEvent>;

export interface PoolMigrateBinsUpStackEventObject {
  sender: string;
  binId: number;
  maxRecursion: number;
}
export type PoolMigrateBinsUpStackEvent = TypedEvent<
  [string, number, number],
  PoolMigrateBinsUpStackEventObject
>;

export type PoolMigrateBinsUpStackEventFilter =
  TypedEventFilter<PoolMigrateBinsUpStackEvent>;

export interface PoolRemoveLiquidityEventObject {
  sender: string;
  recipient: string;
  subaccount: BigNumber;
  params: IMaverickV2Pool.RemoveLiquidityParamsStructOutput;
  tokenAOut: BigNumber;
  tokenBOut: BigNumber;
}
export type PoolRemoveLiquidityEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    IMaverickV2Pool.RemoveLiquidityParamsStructOutput,
    BigNumber,
    BigNumber
  ],
  PoolRemoveLiquidityEventObject
>;

export type PoolRemoveLiquidityEventFilter =
  TypedEventFilter<PoolRemoveLiquidityEvent>;

export interface PoolSetVariableFeeEventObject {
  newFeeAIn: BigNumber;
  newFeeBIn: BigNumber;
}
export type PoolSetVariableFeeEvent = TypedEvent<
  [BigNumber, BigNumber],
  PoolSetVariableFeeEventObject
>;

export type PoolSetVariableFeeEventFilter =
  TypedEventFilter<PoolSetVariableFeeEvent>;

export interface PoolSwapEventObject {
  sender: string;
  recipient: string;
  params: IMaverickV2Pool.SwapParamsStructOutput;
  amountIn: BigNumber;
  amountOut: BigNumber;
}
export type PoolSwapEvent = TypedEvent<
  [
    string,
    string,
    IMaverickV2Pool.SwapParamsStructOutput,
    BigNumber,
    BigNumber
  ],
  PoolSwapEventObject
>;

export type PoolSwapEventFilter = TypedEventFilter<PoolSwapEvent>;

export interface IMaverickV2Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMaverickV2PoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accessor(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      recipient: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      params: IMaverickV2Pool.AddLiquidityParamsStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      user: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      binId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { lpToken: BigNumber }>;

    binIdByTickKind(
      tick: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fee(
      tokenAIn: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    flashLoan(
      recipient: PromiseOrValue<string>,
      amountA: PromiseOrValue<BigNumberish>,
      amountB: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBin(
      binId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMaverickV2Pool.BinStateStructOutput] & {
        bin: IMaverickV2Pool.BinStateStructOutput;
      }
    >;

    getCurrentTwa(overrides?: CallOverrides): Promise<[BigNumber]>;

    getState(
      overrides?: CallOverrides
    ): Promise<[IMaverickV2Pool.StateStructOutput]>;

    getTick(
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMaverickV2Pool.TickStateStructOutput] & {
        tickState: IMaverickV2Pool.TickStateStructOutput;
      }
    >;

    kinds(overrides?: CallOverrides): Promise<[number] & { _kinds: number }>;

    lendingFeeRateD18(overrides?: CallOverrides): Promise<[BigNumber]>;

    lookback(overrides?: CallOverrides): Promise<[BigNumber]>;

    migrateBinUpStack(
      binId: PromiseOrValue<BigNumberish>,
      maxRecursion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    permissionedLiquidity(
      overrides?: CallOverrides
    ): Promise<[boolean] & { _permissionedLiquidity: boolean }>;

    permissionedPool(
      overrides?: CallOverrides
    ): Promise<[boolean] & { _permissionedPool: boolean }>;

    permissionedSwap(
      overrides?: CallOverrides
    ): Promise<[boolean] & { _permissionedSwap: boolean }>;

    protocolFeeA(overrides?: CallOverrides): Promise<[BigNumber]>;

    protocolFeeB(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeLiquidity(
      recipient: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      params: IMaverickV2Pool.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      newFeeAIn: PromiseOrValue<BigNumberish>,
      newFeeBIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      recipient: PromiseOrValue<string>,
      params: IMaverickV2Pool.SwapParamsStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenA(overrides?: CallOverrides): Promise<[string]>;

    tokenAScale(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenB(overrides?: CallOverrides): Promise<[string]>;

    tokenBScale(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  accessor(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    recipient: PromiseOrValue<string>,
    subaccount: PromiseOrValue<BigNumberish>,
    params: IMaverickV2Pool.AddLiquidityParamsStruct,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    user: PromiseOrValue<string>,
    subaccount: PromiseOrValue<BigNumberish>,
    binId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  binIdByTickKind(
    tick: PromiseOrValue<BigNumberish>,
    kind: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  factory(overrides?: CallOverrides): Promise<string>;

  fee(
    tokenAIn: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  flashLoan(
    recipient: PromiseOrValue<string>,
    amountA: PromiseOrValue<BigNumberish>,
    amountB: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBin(
    binId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMaverickV2Pool.BinStateStructOutput>;

  getCurrentTwa(overrides?: CallOverrides): Promise<BigNumber>;

  getState(
    overrides?: CallOverrides
  ): Promise<IMaverickV2Pool.StateStructOutput>;

  getTick(
    tick: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMaverickV2Pool.TickStateStructOutput>;

  kinds(overrides?: CallOverrides): Promise<number>;

  lendingFeeRateD18(overrides?: CallOverrides): Promise<BigNumber>;

  lookback(overrides?: CallOverrides): Promise<BigNumber>;

  migrateBinUpStack(
    binId: PromiseOrValue<BigNumberish>,
    maxRecursion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  permissionedLiquidity(overrides?: CallOverrides): Promise<boolean>;

  permissionedPool(overrides?: CallOverrides): Promise<boolean>;

  permissionedSwap(overrides?: CallOverrides): Promise<boolean>;

  protocolFeeA(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeB(overrides?: CallOverrides): Promise<BigNumber>;

  removeLiquidity(
    recipient: PromiseOrValue<string>,
    subaccount: PromiseOrValue<BigNumberish>,
    params: IMaverickV2Pool.RemoveLiquidityParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    newFeeAIn: PromiseOrValue<BigNumberish>,
    newFeeBIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    recipient: PromiseOrValue<string>,
    params: IMaverickV2Pool.SwapParamsStruct,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

  tokenA(overrides?: CallOverrides): Promise<string>;

  tokenAScale(overrides?: CallOverrides): Promise<BigNumber>;

  tokenB(overrides?: CallOverrides): Promise<string>;

  tokenBScale(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    accessor(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      recipient: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      params: IMaverickV2Pool.AddLiquidityParamsStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, number[]] & {
        tokenAAmount: BigNumber;
        tokenBAmount: BigNumber;
        binIds: number[];
      }
    >;

    balanceOf(
      user: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      binId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    binIdByTickKind(
      tick: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    factory(overrides?: CallOverrides): Promise<string>;

    fee(
      tokenAIn: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      recipient: PromiseOrValue<string>,
      amountA: PromiseOrValue<BigNumberish>,
      amountB: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        lendingFeeA: BigNumber;
        lendingFeeB: BigNumber;
      }
    >;

    getBin(
      binId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMaverickV2Pool.BinStateStructOutput>;

    getCurrentTwa(overrides?: CallOverrides): Promise<BigNumber>;

    getState(
      overrides?: CallOverrides
    ): Promise<IMaverickV2Pool.StateStructOutput>;

    getTick(
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMaverickV2Pool.TickStateStructOutput>;

    kinds(overrides?: CallOverrides): Promise<number>;

    lendingFeeRateD18(overrides?: CallOverrides): Promise<BigNumber>;

    lookback(overrides?: CallOverrides): Promise<BigNumber>;

    migrateBinUpStack(
      binId: PromiseOrValue<BigNumberish>,
      maxRecursion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    permissionedLiquidity(overrides?: CallOverrides): Promise<boolean>;

    permissionedPool(overrides?: CallOverrides): Promise<boolean>;

    permissionedSwap(overrides?: CallOverrides): Promise<boolean>;

    protocolFeeA(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeB(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      recipient: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      params: IMaverickV2Pool.RemoveLiquidityParamsStruct,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenAOut: BigNumber; tokenBOut: BigNumber }
    >;

    setFee(
      newFeeAIn: PromiseOrValue<BigNumberish>,
      newFeeBIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      recipient: PromiseOrValue<string>,
      params: IMaverickV2Pool.SwapParamsStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountIn: BigNumber; amountOut: BigNumber }
    >;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<string>;

    tokenAScale(overrides?: CallOverrides): Promise<BigNumber>;

    tokenB(overrides?: CallOverrides): Promise<string>;

    tokenBScale(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PoolAddLiquidity(address,address,uint256,tuple,uint256,uint256,uint32[])"(
      sender?: null,
      recipient?: null,
      subaccount?: null,
      params?: null,
      tokenAAmount?: null,
      tokenBAmount?: null,
      binIds?: null
    ): PoolAddLiquidityEventFilter;
    PoolAddLiquidity(
      sender?: null,
      recipient?: null,
      subaccount?: null,
      params?: null,
      tokenAAmount?: null,
      tokenBAmount?: null,
      binIds?: null
    ): PoolAddLiquidityEventFilter;

    "PoolMigrateBinsUpStack(address,uint32,uint32)"(
      sender?: null,
      binId?: null,
      maxRecursion?: null
    ): PoolMigrateBinsUpStackEventFilter;
    PoolMigrateBinsUpStack(
      sender?: null,
      binId?: null,
      maxRecursion?: null
    ): PoolMigrateBinsUpStackEventFilter;

    "PoolRemoveLiquidity(address,address,uint256,tuple,uint256,uint256)"(
      sender?: null,
      recipient?: null,
      subaccount?: null,
      params?: null,
      tokenAOut?: null,
      tokenBOut?: null
    ): PoolRemoveLiquidityEventFilter;
    PoolRemoveLiquidity(
      sender?: null,
      recipient?: null,
      subaccount?: null,
      params?: null,
      tokenAOut?: null,
      tokenBOut?: null
    ): PoolRemoveLiquidityEventFilter;

    "PoolSetVariableFee(uint256,uint256)"(
      newFeeAIn?: null,
      newFeeBIn?: null
    ): PoolSetVariableFeeEventFilter;
    PoolSetVariableFee(
      newFeeAIn?: null,
      newFeeBIn?: null
    ): PoolSetVariableFeeEventFilter;

    "PoolSwap(address,address,tuple,uint256,uint256)"(
      sender?: null,
      recipient?: null,
      params?: null,
      amountIn?: null,
      amountOut?: null
    ): PoolSwapEventFilter;
    PoolSwap(
      sender?: null,
      recipient?: null,
      params?: null,
      amountIn?: null,
      amountOut?: null
    ): PoolSwapEventFilter;
  };

  estimateGas: {
    accessor(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      recipient: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      params: IMaverickV2Pool.AddLiquidityParamsStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      user: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      binId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    binIdByTickKind(
      tick: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fee(
      tokenAIn: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    flashLoan(
      recipient: PromiseOrValue<string>,
      amountA: PromiseOrValue<BigNumberish>,
      amountB: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBin(
      binId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentTwa(overrides?: CallOverrides): Promise<BigNumber>;

    getState(overrides?: CallOverrides): Promise<BigNumber>;

    getTick(
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    kinds(overrides?: CallOverrides): Promise<BigNumber>;

    lendingFeeRateD18(overrides?: CallOverrides): Promise<BigNumber>;

    lookback(overrides?: CallOverrides): Promise<BigNumber>;

    migrateBinUpStack(
      binId: PromiseOrValue<BigNumberish>,
      maxRecursion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    permissionedLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    permissionedPool(overrides?: CallOverrides): Promise<BigNumber>;

    permissionedSwap(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeA(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeB(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      recipient: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      params: IMaverickV2Pool.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      newFeeAIn: PromiseOrValue<BigNumberish>,
      newFeeBIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      recipient: PromiseOrValue<string>,
      params: IMaverickV2Pool.SwapParamsStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    tokenA(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAScale(overrides?: CallOverrides): Promise<BigNumber>;

    tokenB(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBScale(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    accessor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      recipient: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      params: IMaverickV2Pool.AddLiquidityParamsStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      user: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      binId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    binIdByTickKind(
      tick: PromiseOrValue<BigNumberish>,
      kind: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee(
      tokenAIn: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    flashLoan(
      recipient: PromiseOrValue<string>,
      amountA: PromiseOrValue<BigNumberish>,
      amountB: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBin(
      binId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentTwa(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTick(
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kinds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingFeeRateD18(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lookback(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrateBinUpStack(
      binId: PromiseOrValue<BigNumberish>,
      maxRecursion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    permissionedLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permissionedPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permissionedSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      recipient: PromiseOrValue<string>,
      subaccount: PromiseOrValue<BigNumberish>,
      params: IMaverickV2Pool.RemoveLiquidityParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      newFeeAIn: PromiseOrValue<BigNumberish>,
      newFeeBIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      recipient: PromiseOrValue<string>,
      params: IMaverickV2Pool.SwapParamsStruct,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBScale(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
