import { Address } from '../base/Address';
import { DestinationOptions, Action, InteractionConvention } from './Action';
import { ContractCall } from '../base/ContractCall';
import { Approval } from '../base/Approval';
import { parseHexStringIntoBuffer } from '../base/utils';
// OneInch actions should only be dynamically generated by the Searcher and not be added to the exchange-graph
export class OneInchAction extends Action {
    universe;
    actionQuote;
    gasEstimate() {
        return BigInt(this.actionQuote.tx.gas);
    }
    async encode() {
        const swap = this.actionQuote;
        if (swap == null) {
            throw new Error('Failed to generate swap');
        }
        return new ContractCall(parseHexStringIntoBuffer(swap.tx.data), Address.fromHexString(swap.tx.to), BigInt(swap.tx.value), this.gasEstimate(), `1Inch Swap (${swap.protocols
            .flat(5)
            .map((i) => i.name)
            .join(',')})`);
    }
    toString() {
        return `OneInch(path=[${this.actionQuote.protocols
            .flat(5)
            .map((i) => i.name)
            .join(',')}])`;
    }
    async quote(_) {
        return [
            this.output[0].quantityFromBigInt(BigInt(this.actionQuote.toTokenAmount)),
        ];
    }
    constructor(universe, input, output, actionQuote) {
        super(Address.fromHexString(actionQuote.tx.to), [input], [output], InteractionConvention.ApprovalRequired, DestinationOptions.Recipient, [new Approval(input, Address.fromHexString(actionQuote.tx.to))]);
        this.universe = universe;
        this.actionQuote = actionQuote;
    }
    static createAction(universe, input, output, quote) {
        return new OneInchAction(universe, input, output, quote);
    }
}
//# sourceMappingURL=OneInch.js.map