import { Address } from '../base/Address';
import { Action, DestinationOptions, InteractionConvention } from './Action';
import { Approval } from '../base/Approval';
// OneInch actions should only be dynamically generated by the Searcher and not be added to the exchange-graph
export class OneInchAction extends Action('1inch') {
    universe;
    actionQuote;
    async plan(planner, _, destination) {
        throw new Error('Method not implemented.');
    }
    gasEstimate() {
        return BigInt(this.actionQuote.tx.gas);
    }
    toString() {
        return `OneInch(path=[...])`;
    }
    outputQty;
    async quote(_) {
        return [this.outputQty];
    }
    constructor(universe, inputToken, outputToken, actionQuote, slippagePercent) {
        super(Address.fromHexString(actionQuote.tx.to), [inputToken], [outputToken], InteractionConvention.ApprovalRequired, DestinationOptions.Recipient, [new Approval(inputToken, Address.fromHexString(actionQuote.tx.to))]);
        this.universe = universe;
        this.actionQuote = actionQuote;
        this.outputQty = outputToken
            .fromBigInt(BigInt(this.actionQuote.toAmount))
            .mul(outputToken.fromDecimal((100 - slippagePercent) / 100));
    }
    static createAction(universe, input, output, quote, slippagePercent) {
        return new OneInchAction(universe, input, output, quote, slippagePercent);
    }
}
//# sourceMappingURL=OneInch.js.map