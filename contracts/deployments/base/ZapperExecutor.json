{
  "address": "0x21e890d3DA79c78f1b149367Cf01D06789F95d39",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "command_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ExecutionFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "assertEqual",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "assertLarger",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ExecuteOutput",
          "name": "out",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "commands",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "state",
          "type": "bytes[]"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "deployer",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "symbol",
                  "type": "string"
                },
                {
                  "internalType": "address[]",
                  "name": "assets",
                  "type": "address[]"
                },
                {
                  "internalType": "uint256[]",
                  "name": "amounts",
                  "type": "uint256[]"
                },
                {
                  "internalType": "uint256",
                  "name": "initialShares",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFolio.FolioBasicDetails",
              "name": "basicDetails",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "auctionDelay",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "auctionLength",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "address",
                      "name": "recipient",
                      "type": "address"
                    },
                    {
                      "internalType": "uint96",
                      "name": "portion",
                      "type": "uint96"
                    }
                  ],
                  "internalType": "struct IFolio.FeeRecipient[]",
                  "name": "feeRecipients",
                  "type": "tuple[]"
                },
                {
                  "internalType": "uint256",
                  "name": "tvlFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "mintFee",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "mandate",
                  "type": "string"
                }
              ],
              "internalType": "struct IFolio.FolioAdditionalDetails",
              "name": "additionalDetails",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "address[]",
                  "name": "existingTradeProposers",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "tradeLaunchers",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "vibesOfficers",
                  "type": "address[]"
                }
              ],
              "internalType": "struct GovRoles",
              "name": "govRoles",
              "type": "tuple"
            },
            {
              "internalType": "bool",
              "name": "isGoverned",
              "type": "bool"
            },
            {
              "internalType": "contract IVotes",
              "name": "stToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint48",
                  "name": "votingDelay",
                  "type": "uint48"
                },
                {
                  "internalType": "uint32",
                  "name": "votingPeriod",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "proposalThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quorumPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timelockDelay",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "guardians",
                  "type": "address[]"
                }
              ],
              "internalType": "struct IGovernanceDeployer.GovParams",
              "name": "ownerGovParams",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint48",
                  "name": "votingDelay",
                  "type": "uint48"
                },
                {
                  "internalType": "uint32",
                  "name": "votingPeriod",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "proposalThreshold",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "quorumPercent",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timelockDelay",
                  "type": "uint256"
                },
                {
                  "internalType": "address[]",
                  "name": "guardians",
                  "type": "address[]"
                }
              ],
              "internalType": "struct IGovernanceDeployer.GovParams",
              "name": "tradingGovParams",
              "type": "tuple"
            }
          ],
          "internalType": "struct DeployFolioConfig",
          "name": "config",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        }
      ],
      "name": "executeDeploy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            }
          ],
          "internalType": "struct ExecuteDeployOutput",
          "name": "out",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scale",
          "type": "uint256"
        }
      ],
      "name": "fpMul",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "rawCall",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "out",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "b",
          "type": "uint256"
        }
      ],
      "name": "sub",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdeb732a5a84efb0584176f64f0ff451551b1beb5693c7d98fb19166ae28f791f",
  "receipt": {
    "to": null,
    "from": "0xF2d98377d80DADf725bFb97E91357F1d81384De2",
    "contractAddress": "0x21e890d3DA79c78f1b149367Cf01D06789F95d39",
    "transactionIndex": 106,
    "gasUsed": "3907768",
    "logsBloom": "0x
    "blockHash": "0xf8212258b602d0bb96f8b3d431d64f05ca43a6cbeb2556dcdb329c3e35218310",
    "transactionHash": "0xdeb732a5a84efb0584176f64f0ff451551b1beb5693c7d98fb19166ae28f791f",
    "logs": [],
    "blockNumber": 27461192,
    "cumulativeGasUsed": "27993196",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "ee41df1e0ce288e571f51b2136f5706a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"command_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ExecutionFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"assertEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"assertLarger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"execute\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ExecuteOutput\",\"name\":\"out\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"initialShares\",\"type\":\"uint256\"}],\"internalType\":\"struct IFolio.FolioBasicDetails\",\"name\":\"basicDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"auctionLength\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"portion\",\"type\":\"uint96\"}],\"internalType\":\"struct IFolio.FeeRecipient[]\",\"name\":\"feeRecipients\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"tvlFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"mandate\",\"type\":\"string\"}],\"internalType\":\"struct IFolio.FolioAdditionalDetails\",\"name\":\"additionalDetails\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"existingTradeProposers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tradeLaunchers\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"vibesOfficers\",\"type\":\"address[]\"}],\"internalType\":\"struct GovRoles\",\"name\":\"govRoles\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"isGoverned\",\"type\":\"bool\"},{\"internalType\":\"contract IVotes\",\"name\":\"stToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"votingDelay\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"votingPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockDelay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"internalType\":\"struct IGovernanceDeployer.GovParams\",\"name\":\"ownerGovParams\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint48\",\"name\":\"votingDelay\",\"type\":\"uint48\"},{\"internalType\":\"uint32\",\"name\":\"votingPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proposalThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quorumPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timelockDelay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"}],\"internalType\":\"struct IGovernanceDeployer.GovParams\",\"name\":\"tradingGovParams\",\"type\":\"tuple\"}],\"internalType\":\"struct DeployFolioConfig\",\"name\":\"config\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"}],\"name\":\"executeDeploy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"internalType\":\"struct ExecuteDeployOutput\",\"name\":\"out\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scale\",\"type\":\"uint256\"}],\"name\":\"fpMul\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"rawCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"out\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"b\",\"type\":\"uint256\"}],\"name\":\"sub\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"execute(bytes32[],bytes[],address[])\":{\"details\":\"Main endpoint to call\",\"params\":{\"commands\":\"- Weiroll code to execute\",\"state\":\"- Intiaial Weiroll state to use\",\"tokens\":\"- All tokens used by the Zap in order to calculate dust\"}},\"rawCall(address,uint256,bytes)\":{\"details\":\"Workaround for weiroll not supporting a way to make untyped calls.\",\"params\":{\"data\":\"- Data to send\",\"to\":\"- Address to call\",\"value\":\"- Amount of ETH to send\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ZapperExecutor.sol\":\"ZapperExecutor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n *\\n * _Available since v4.5._\\n */\\ninterface IVotes {\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of votes.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at the end of a past block (`blockNumber`).\\n     */\\n    function getPastVotes(address account, uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at the end of a past block (`blockNumber`).\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 blockNumber) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf5324a55ee9c0b4a840ea57c055ac9d046f88986ceef567e1cf68113e46a79c0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/IFolio.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IVotes } from \\\"@openzeppelin/contracts/governance/utils/IVotes.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\ninterface IFolio is IERC20 {\\n    // === Events ===\\n\\n    event AuctionApproved(uint256 indexed auctionId, address indexed from, address indexed to, Auction auction);\\n    event AuctionOpened(uint256 indexed auctionId, Auction auction);\\n    event AuctionBid(uint256 indexed auctionId, uint256 sellAmount, uint256 buyAmount);\\n    event AuctionClosed(uint256 indexed auctionId);\\n\\n    event FolioFeePaid(address indexed recipient, uint256 amount);\\n    event ProtocolFeePaid(address indexed recipient, uint256 amount);\\n\\n    event BasketTokenAdded(address indexed token);\\n    event BasketTokenRemoved(address indexed token);\\n    event TVLFeeSet(uint256 newFee, uint256 feeAnnually);\\n    event MintFeeSet(uint256 newFee);\\n    event FeeRecipientSet(address indexed recipient, uint96 portion);\\n    event AuctionDelaySet(uint256 newAuctionDelay);\\n    event AuctionLengthSet(uint256 newAuctionLength);\\n    event MandateSet(string newMandate);\\n    event FolioKilled();\\n\\n    // === Errors ===\\n\\n    error Folio__FolioKilled();\\n    error Folio__Unauthorized();\\n\\n    error Folio__EmptyAssets();\\n    error Folio__BasketModificationFailed();\\n\\n    error Folio__FeeRecipientInvalidAddress();\\n    error Folio__FeeRecipientInvalidFeeShare();\\n    error Folio__BadFeeTotal();\\n    error Folio__TVLFeeTooHigh();\\n    error Folio__TVLFeeTooLow();\\n    error Folio__MintFeeTooHigh();\\n    error Folio__ZeroInitialShares();\\n\\n    error Folio__InvalidAsset();\\n    error Folio__InvalidAssetAmount(address asset);\\n\\n    error Folio__InvalidAuctionLength();\\n    error Folio__InvalidSellLimit();\\n    error Folio__InvalidBuyLimit();\\n    error Folio__AuctionCannotBeOpened();\\n    error Folio__AuctionCannotBeOpenedPermissionlesslyYet();\\n    error Folio__AuctionNotOngoing();\\n    error Folio__AuctionCollision();\\n    error Folio__InvalidPrices();\\n    error Folio__AuctionTimeout();\\n    error Folio__SlippageExceeded();\\n    error Folio__InsufficientBalance();\\n    error Folio__InsufficientBid();\\n    error Folio__ExcessiveBid();\\n    error Folio__InvalidAuctionTokens();\\n    error Folio__InvalidAuctionDelay();\\n    error Folio__InvalidAuctionTTL();\\n    error Folio__TooManyFeeRecipients();\\n    error Folio__InvalidArrayLengths();\\n\\n    // === Structures ===\\n\\n    struct FolioBasicDetails {\\n        string name;\\n        string symbol;\\n        address[] assets;\\n        uint256[] amounts; // {tok}\\n        uint256 initialShares; // {share}\\n    }\\n\\n    struct FolioAdditionalDetails {\\n        uint256 auctionDelay; // {s}\\n        uint256 auctionLength; // {s}\\n        FeeRecipient[] feeRecipients;\\n        uint256 tvlFee; // D18{1/s}\\n        uint256 mintFee; // D18{1}\\n        string mandate;\\n    }\\n\\n    struct FeeRecipient {\\n        address recipient;\\n        uint96 portion; // D18{1}\\n    }\\n\\n    struct BasketRange {\\n        uint256 spot; // D27{buyTok/share}\\n        uint256 low; // D27{buyTok/share} inclusive\\n        uint256 high; // D27{buyTok/share} inclusive\\n    }\\n\\n    struct Prices {\\n        uint256 start; // D27{buyTok/sellTok}\\n        uint256 end; // D27{buyTok/sellTok}\\n    }\\n\\n    /// Auction states:\\n    ///   - APPROVED: start == 0 && end == 0\\n    ///   - OPEN: block.timestamp >= start && block.timestamp <= end\\n    ///   - CLOSED: block.timestamp > end\\n    struct Auction {\\n        uint256 id;\\n        IERC20 sell;\\n        IERC20 buy;\\n        BasketRange sellLimit; // D27{sellTok/share} min ratio of sell token in the basket, inclusive\\n        BasketRange buyLimit; // D27{buyTok/share} max ratio of buy token in the basket, exclusive\\n        Prices prices; // D27{buyTok/sellTok}\\n        uint256 availableAt; // {s} inclusive\\n        uint256 launchTimeout; // {s} inclusive\\n        uint256 start; // {s} inclusive\\n        uint256 end; // {s} inclusive\\n        // === Gas optimization ===\\n        uint256 k; // D18{1} price = startPrice * e ^ -kt\\n    }\\n\\n    function distributeFees() external;\\n\\n    function folio() external view returns (address[] memory _assets, uint256[] memory _amounts);\\n    function toAssets(uint256 shares, Math.Rounding rounding) external view returns (address[] memory _assets, uint256[] memory _amounts);\\n    function AUCTION_APPROVER() external view returns (bytes32);\\n    function AUCTION_LAUNCHER() external view returns (bytes32);\\n    function BRAND_MANAGER() external view returns (bytes32);\\n\\n    function mint(uint256 shares, address receiver) external returns (address[] memory _assets, uint256[] memory _amounts);\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address[] calldata assets,\\n        uint256[] calldata minAmountsOut\\n    ) external returns (uint256[] memory _amounts);\\n}\\n\\n\\ninterface IGovernanceDeployer {\\n    struct GovParams {\\n        // Basic Parameters\\n        uint48 votingDelay; // {s}\\n        uint32 votingPeriod; // {s}\\n        uint256 proposalThreshold; // D18{1}\\n        uint256 quorumPercent; // in percent, e.g 4 for 4%\\n        uint256 timelockDelay; // {s}\\n        // Roles\\n        address[] guardians; // Canceller Role\\n    }\\n\\n    function deployGovernanceWithTimelock(\\n        IGovernanceDeployer.GovParams calldata govParams,\\n        IVotes stToken\\n    ) external returns (address governor, address timelock);\\n}\\n\\nstruct GovRoles {\\n  address[] existingTradeProposers;\\n  address[] tradeLaunchers;\\n  address[] vibesOfficers;\\n}\\n\\n\\ninterface IFolioDeployer {\\n  error FolioDeployer__LengthMismatch();\\n\\n  event FolioDeployed(address indexed folioOwner, address indexed folio, address folioAdmin);\\n  event GovernedFolioDeployed(\\n      address indexed stToken,\\n      address indexed folio,\\n      address ownerGovernor,\\n      address ownerTimelock,\\n      address tradingGovernor,\\n      address tradingTimelock\\n  );\\n\\n\\n  function folioImplementation() external view returns (address);\\n\\n\\n  function deployFolio(\\n    IFolio.FolioBasicDetails calldata basicDetails,\\n    IFolio.FolioAdditionalDetails calldata additionalDetails,\\n    address owner,\\n    address[] memory auctionApprovers,\\n    address[] memory auctionLaunchers,\\n    address[] memory brandManagers,\\n    bytes32 deploymentNonce\\n  ) external returns (address folio, address proxyAdmin);\\n\\n  function deployGovernedFolio(\\n    IVotes stToken,\\n    IFolio.FolioBasicDetails calldata basicDetails,\\n    IFolio.FolioAdditionalDetails calldata additionalDetails,\\n    IGovernanceDeployer.GovParams calldata ownerGovParams,\\n    IGovernanceDeployer.GovParams calldata tradingGovParams,\\n    GovRoles calldata govRoles,\\n    bytes32 deploymentNonce\\n  )\\n    external\\n    returns (\\n        address folio,\\n        address proxyAdmin,\\n        address ownerGovernor,\\n        address ownerTimelock,\\n        address tradingGovernor,\\n        address tradingTimelock\\n    );\\n\\n\\n}\\n\",\"keccak256\":\"0x0f04b0ee4523d0ef5c86af9683d0de44bd3ef59cc8d48b100cd752ece0c2fa7a\",\"license\":\"MIT\"},\"contracts/PreventTampering.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nabstract contract PreventTampering {\\n    modifier revertOnCodeHashChange() {\\n        bytes32 hashBefore;\\n        assembly {\\n            hashBefore := extcodehash(address())\\n        }\\n        _;\\n        bytes32 hashPostExecution;\\n        assembly {\\n            hashPostExecution := extcodehash(address())\\n        }\\n        require(hashPostExecution == hashBefore, \\\"PreventTampering: Code has changed\\\");\\n    }\\n}\\n\\n\\ncontract SelfDestruct {\\n    function destroy() external {\\n        selfdestruct(payable(msg.sender));\\n    }\\n    function doNothing() external {}\\n}\\n\\ncontract TestPreventTampering is PreventTampering {\\n    function shouldNotRevert() external {\\n        SelfDestruct selfDestruct = new SelfDestruct();\\n        address(selfDestruct).delegatecall(abi.encodeWithSelector(selfDestruct.destroy.selector));\\n    }\\n    function shouldRevert() revertOnCodeHashChange() external {\\n        SelfDestruct selfDestruct = new SelfDestruct();\\n        address(selfDestruct).delegatecall(abi.encodeWithSelector(selfDestruct.destroy.selector));\\n    }\\n    function markedRevertOnCodeHashChangeDontRevert() revertOnCodeHashChange() external {\\n        SelfDestruct selfDestruct = new SelfDestruct();\\n        address(selfDestruct).delegatecall(abi.encodeWithSelector(selfDestruct.doNothing.selector));\\n    }\\n}\",\"keccak256\":\"0x3f2fd9ccbff5fa8c5700e4c422e0e348c10ff3c4426335dc106226c57236af03\",\"license\":\"BlueOak-1.0.0\"},\"contracts/ZapperExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { VM } from \\\"./weiroll/VM.sol\\\";\\nimport { PreventTampering } from \\\"./PreventTampering.sol\\\";\\n\\nimport { IFolio, IVotes, GovRoles, IFolioDeployer, IGovernanceDeployer } from \\\"./IFolio.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nstruct DeployFolioConfig {\\n  address deployer;\\n  IFolio.FolioBasicDetails basicDetails;\\n  IFolio.FolioAdditionalDetails additionalDetails;\\n  GovRoles govRoles;\\n\\n  bool isGoverned;\\n  IVotes stToken;\\n  address owner;\\n  IGovernanceDeployer.GovParams ownerGovParams;\\n  IGovernanceDeployer.GovParams tradingGovParams;\\n}\\n\\nstruct ExecuteOutput {\\n  uint256[] dust;\\n}\\nstruct ExecuteDeployOutput {\\n  uint256[] dust;\\n  uint256 amountOut;\\n}\\ncontract ZapperExecutor is VM, PreventTampering {\\n  receive() external payable {}\\n\\n  function add(\\n      uint256 a,\\n      uint256 b\\n  ) external pure returns (uint256) {\\n      return a + b;\\n  }\\n  function sub(\\n      uint256 a,\\n      uint256 b\\n  ) external pure returns (uint256) {\\n      return a - b;\\n  }\\n  function fpMul(\\n      uint256 a,\\n      uint256 b,\\n      uint256 scale\\n  ) external pure returns (uint256) {\\n      return (a * b) / scale;\\n  }\\n  function assertLarger(\\n      uint256 a,\\n      uint256 b\\n  ) external pure returns (bool) {\\n      require(a > b, \\\"!ASSERT_GT\\\");\\n      return true;\\n  }\\n  function assertEqual(\\n      uint256 a,\\n      uint256 b\\n  ) external pure returns (bool) {\\n      require(a == b, \\\"!ASSERT_EQ\\\");\\n      return true;\\n  }\\n\\n\\n  /** @dev Main endpoint to call\\n   * @param commands - Weiroll code to execute\\n   * @param state - Intiaial Weiroll state to use\\n   * @param tokens - All tokens used by the Zap in order to calculate dust\\n   */\\n  function execute(\\n      bytes32[] calldata commands,\\n      bytes[] memory state,\\n      IERC20[] memory tokens\\n  )\\n      revertOnCodeHashChange\\n      public\\n      payable\\n      returns (ExecuteOutput memory out)\\n  {\\n      _execute(commands, state);\\n      out.dust = new uint256[](tokens.length);\\n      for(uint256 i; i < tokens.length; i++) {\\n          out.dust[i] = tokens[i].balanceOf(address(this));\\n      }\\n  }\\n\\n  function executeDeploy(\\n      bytes32[] calldata commands,\\n      bytes[] memory state,\\n      IERC20[] memory tokens,\\n      DeployFolioConfig memory config,\\n      address recipient,\\n      bytes32 nonce\\n  ) revertOnCodeHashChange public payable returns (ExecuteDeployOutput memory out) {\\n    _execute(commands, state);\\n    // DSTEP 2: Deploy folio\\n    uint256 initialShares = type(uint256).max;\\n    for (uint256 i = 0; i < config.basicDetails.assets.length; i++) {\\n        uint256 balance = IERC20(config.basicDetails.assets[i]).balanceOf(address(this));\\n        if (balance == 0) {\\n            revert('ZERO BALANCE');\\n        }\\n        uint256 quantityPrShare = config.basicDetails.amounts[i];\\n        if (quantityPrShare == 0) {\\n            revert('ZERO QUANTITY');\\n        }\\n        uint256 shares = balance * 1e18 / quantityPrShare;\\n        \\n        if (shares < initialShares) {\\n            initialShares = shares;\\n        }\\n        SafeERC20.safeApprove(IERC20(config.basicDetails.assets[i]), address(config.deployer), 0);\\n        SafeERC20.safeApprove(IERC20(config.basicDetails.assets[i]), address(config.deployer), type(uint256).max);\\n    }\\n    if (initialShares == type(uint256).max) {\\n        revert('NO SHARES');\\n    }\\n    for (uint256 i = 0; i < config.basicDetails.assets.length; i++) {\\n        config.basicDetails.amounts[i] = initialShares * config.basicDetails.amounts[i] / 1e18;\\n    }\\n\\n    config.basicDetails.initialShares = initialShares;\\n\\n    if (config.isGoverned) {\\n        (address folio, , , , ,) = IFolioDeployer(config.deployer).deployGovernedFolio(\\n            config.stToken,\\n            config.basicDetails,\\n            config.additionalDetails,\\n            config.ownerGovParams,\\n            config.tradingGovParams,\\n            config.govRoles,\\n            nonce\\n        );\\n        out.amountOut = IERC20(folio).balanceOf(address(this));\\n        SafeERC20.safeTransfer(IERC20(folio), recipient, out.amountOut);\\n    } else {\\n        (address folio, ) = IFolioDeployer(config.deployer).deployFolio(\\n            config.basicDetails,\\n            config.additionalDetails,\\n            config.owner,\\n            config.govRoles.existingTradeProposers,\\n            config.govRoles.tradeLaunchers,\\n            config.govRoles.vibesOfficers,\\n            nonce\\n        );\\n        out.amountOut = IERC20(folio).balanceOf(address(this));\\n        SafeERC20.safeTransfer(IERC20(folio), recipient, out.amountOut);\\n    }\\n    out.dust = new uint256[](tokens.length);\\n      for(uint256 i; i < tokens.length; i++) {\\n          out.dust[i] = tokens[i].balanceOf(address(this));\\n          SafeERC20.safeTransfer(tokens[i], recipient, out.dust[i]);\\n      }\\n  }\\n\\n  /** @dev Workaround for weiroll not supporting a way to make untyped calls.\\n    * @param to - Address to call\\n    * @param value - Amount of ETH to send\\n    * @param data - Data to send\\n   */\\n  function rawCall(\\n      address to,\\n      uint256 value,\\n      bytes calldata data\\n  ) external returns (bool success, bytes memory out) {\\n      require(msg.sender == address(this), \\\"ZapperExecutor: Only callable by Zapper\\\");\\n      (success, out) = to.call{value: value}(data);\\n  }\\n}\\n\",\"keccak256\":\"0xbaea2060eaa78c798ae3408d265cd304a97d5f2616403b493776ed436410c133\",\"license\":\"BlueOak-1.0.0\"},\"contracts/weiroll/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary CommandBuilder {\\n\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 idx;\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < 32;) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    count += stateData.length;\\n                } else {\\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n                    require(\\n                        arglen % 32 == 0,\\n                        \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n                    );\\n                    count += arglen + 32;\\n                }\\n            } else {\\n                require(\\n                    state[idx & IDX_VALUE_MASK].length == 32,\\n                    \\\"Static state variables must be 32 bytes\\\"\\n                );\\n                count += 32;\\n            }\\n            unchecked{free += 32;}\\n            unchecked{++i;}\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        for (uint256 i; i < 32;) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    free += stateData.length - 32;\\n                } else {\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n\\n                    // Variable length data; put a pointer in the slot and write the data at the end\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        arglen\\n                    );\\n                    free += arglen;\\n                }\\n            } else {\\n                // Fixed length data; write it directly\\n                bytes memory statevar = state[idx & IDX_VALUE_MASK];\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(statevar, 32)))\\n                }\\n            }\\n            unchecked{count += 32;}\\n            unchecked{++i;}\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argptr;\\n                assembly {\\n                    argptr := mload(add(output, 32))\\n                }\\n                require(\\n                    argptr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            require(output.length >= 32, \\\"Return at least 32 bytes\\\");\\n            // Single word\\n            // require(\\n            //     output.length == 32,\\n            //     \\\"Only one return value permitted (static)\\\"\\n            // );\\n\\n            // There are rare instances of contracts whoes ABI indicate a single word return returning more than 1 word\\n            // returndata buffers containing a single word of data.\\n            if (output.length > 32) {\\n                // Truncate returndata to proper size\\n                bytes memory newOutput = new bytes(32);\\n                memcpy(output, 0, newOutput, 0, output.length);\\n                output = newOutput;\\n            }\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint256(uint8(index));\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcidx,\\n        bytes memory dest,\\n        uint256 destidx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcidx),\\n                    len,\\n                    add(add(dest, 32), destidx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a4c8144e65ff02cebab947a9d2e8f93a29a47ddd2d8e0be3efae9eb6501baec\",\"license\":\"MIT\"},\"contracts/weiroll/VM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x80;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x40;\\n\\n    uint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    address immutable self;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    constructor() {\\n        self = address(this);\\n    }\\n\\n    // function callExtension(\\n    //     bytes memory data\\n    // ) virtual internal returns (bool success, bytes memory outdata);\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n      internal returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outdata;\\n\\n        uint256 commandsLength = commands.length;\\n        for (uint256 i; i < commandsLength;) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                indices = commands[i++];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outdata) = address(uint160(uint256(command))).delegatecall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                    (success, outdata) = address(uint160(uint256(command))).call( // target\\n                        // inputs\\n                        state.buildInputs(\\n                            //selector\\n                            bytes4(command),\\n                            indices\\n                        )\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outdata) = address(uint160(uint256(command))).staticcall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 calleth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                require(v.length == 32, \\\"_execute: value call has no value indicated.\\\");\\n                assembly {\\n                    calleth := mload(add(v, 0x20))\\n                }\\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\\n                    value: calleth\\n                }(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        bytes32(uint256(indices << 8) | CommandBuilder.IDX_END_OF_ARGS)\\n                    )\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                if (outdata.length > 0) {\\n                    assembly {\\n                        outdata := add(outdata, 68)\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: i,\\n                    target: address(uint160(uint256(command))),\\n                    message: string(outdata)\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outdata);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outdata);\\n            }\\n            unchecked{++i;}\\n        }\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0xd7d97f7093a7495046de45bef3d72fbe8df6b10d328121dfc178b2d12b1bccbb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250506080516145e861005d600039600050506145e86000f3fe60806040526004361061007f5760003560e01c8063ad207fd71161004e578063ad207fd714610173578063b67d77c5146101b0578063d47b0de4146101ed578063f95641621461022a57610086565b806308c4b4981461008b578063298e2c9e146100bb578063771602f7146100f857806398a38d7d1461013557610086565b3661008657005b600080fd5b6100a560048036038101906100a09190612039565b61025a565b6040516100b291906121d7565b60405180910390f35b3480156100c757600080fd5b506100e260048036038101906100dd9190612225565b6103ef565b6040516100ef9190612280565b60405180910390f35b34801561010457600080fd5b5061011f600480360381019061011a9190612225565b61043d565b60405161012c91906122aa565b60405180910390f35b34801561014157600080fd5b5061015c60048036038101906101579190612347565b610453565b60405161016a92919061243a565b60405180910390f35b34801561017f57600080fd5b5061019a60048036038101906101959190612225565b610541565b6040516101a79190612280565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d29190612225565b61058f565b6040516101e491906122aa565b60405180910390f35b3480156101f957600080fd5b50610214600480360381019061020f919061246a565b6105a5565b60405161022191906122aa565b60405180910390f35b610244600480360381019061023f9190612e13565b6105c7565b6040516102519190612f53565b60405180910390f35b610262611c3e565b6000303f9050610273868686610d8a565b50825167ffffffffffffffff81111561028f5761028e611cf5565b5b6040519080825280602002602001820160405280156102bd5781602001602082028036833780820191505090505b50826000018190525060005b835181101561039c578381815181106102e5576102e4612f75565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103259190612fb3565b602060405180830381865afa158015610342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103669190612fe3565b8360000151828151811061037d5761037c612f75565b5b60200260200101818152505080806103949061303f565b9150506102c9565b506000303f90508181146103e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dc9061310a565b60405180910390fd5b5050949350505050565b6000818311610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042a90613176565b60405180910390fd5b6001905092915050565b6000818361044b9190613196565b905092915050565b600060603073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc9061323c565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff168585856040516104ed92919061328c565b60006040518083038185875af1925050503d806000811461052a576040519150601f19603f3d011682016040523d82523d6000602084013e61052f565b606091505b50809250819350505094509492505050565b6000818314610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057c906132f1565b60405180910390fd5b6001905092915050565b6000818361059d9190613311565b905092915050565b60008183856105b49190613345565b6105be91906133b6565b90509392505050565b6105cf611c51565b6000303f90506105e0898989610d8a565b5060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060005b8660200151604001515181101561082f576000876020015160400151828151811061063757610636612f75565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106779190612fb3565b602060405180830381865afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190612fe3565b9050600081036106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490613433565b60405180910390fd5b6000886020015160600151838151811061071a57610719612f75565b5b6020026020010151905060008103610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e9061349f565b60405180910390fd5b600081670de0b6b3a76400008461077e9190613345565b61078891906133b6565b905084811015610796578094505b6107c88a602001516040015185815181106107b4576107b3612f75565b5b60200260200101518b600001516000611203565b6108198a602001516040015185815181106107e6576107e5612f75565b5b60200260200101518b600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611203565b50505080806108279061303f565b915050610609565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610892576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108899061350b565b60405180910390fd5b60005b8660200151604001515181101561092157670de0b6b3a764000087602001516060015182815181106108ca576108c9612f75565b5b6020026020010151836108dd9190613345565b6108e791906133b6565b876020015160600151828151811061090257610901612f75565b5b60200260200101818152505080806109199061303f565b915050610895565b508086602001516080018181525050856080015115610a80576000866000015173ffffffffffffffffffffffffffffffffffffffff1663784d48c78860a0015189602001518a604001518b60e001518c61010001518d606001518c6040518863ffffffff1660e01b815260040161099e97969594939291906139b9565b60c0604051808303816000875af11580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190613a60565b505050505090508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a219190612fb3565b602060405180830381865afa158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a629190612fe3565b846020018181525050610a7a81878660200151611352565b50610bc8565b6000866000015173ffffffffffffffffffffffffffffffffffffffff1663fd7d2e4f886020015189604001518a60c001518b60600151600001518c60600151602001518d60600151604001518c6040518863ffffffff1660e01b8152600401610aef9796959493929190613b5c565b60408051808303816000875af1158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b319190613bee565b5090508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b6d9190612fb3565b602060405180830381865afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190612fe3565b846020018181525050610bc681878660200151611352565b505b865167ffffffffffffffff811115610be357610be2611cf5565b5b604051908082528060200260200182016040528015610c115781602001602082028036833780820191505090505b50836000018190525060005b8751811015610d3357878181518110610c3957610c38612f75565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c799190612fb3565b602060405180830381865afa158015610c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cba9190612fe3565b84600001518281518110610cd157610cd0612f75565b5b602002602001018181525050610d20888281518110610cf357610cf2612f75565b5b60200260200101518786600001518481518110610d1357610d12612f75565b5b6020026020010151611352565b8080610d2b9061303f565b915050610c1d565b50506000303f9050818114610d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d749061310a565b60405180910390fd5b5050979650505050505050565b60606000806000806060600089899050905060005b818110156111f2578a8a82818110610dba57610db9612f75565b5b905060200201359650602087901b60f81c60ff16955060006080871614610e08578a8a8280610de89061303f565b9350818110610dfa57610df9612f75565b5b905060200201359450610e32565b79ffffffffffffffffffffffffffffffffffffffffffffffffffff602888901b60001c1760001b94505b60006003871603610ec7578660001c73ffffffffffffffffffffffffffffffffffffffff16610e6c88878c6113d89092919063ffffffff16565b604051610e799190613c5f565b600060405180830381855af49150503d8060008114610eb4576040519150601f19603f3d011682016040523d82523d6000602084013e610eb9565b606091505b508094508195505050611148565b60016003871603610f5e578660001c73ffffffffffffffffffffffffffffffffffffffff16610f0188878c6113d89092919063ffffffff16565b604051610f0e9190613c5f565b6000604051808303816000865af19150503d8060008114610f4b576040519150601f19603f3d011682016040523d82523d6000602084013e610f50565b606091505b508094508195505050611147565b60026003871603610ff3578660001c73ffffffffffffffffffffffffffffffffffffffff16610f9888878c6113d89092919063ffffffff16565b604051610fa59190613c5f565b600060405180830381855afa9150503d8060008114610fe0576040519150601f19603f3d011682016040523d82523d6000602084013e610fe5565b606091505b508094508195505050611146565b60038087160361110a576000808a8760f81c60ff168151811061101957611018612f75565b5b602002602001015190506020815114611067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105e90613ce8565b60405180910390fd5b602081015191508860001c73ffffffffffffffffffffffffffffffffffffffff16826110ab8b60ff60088c901b60001c1760001b8f6113d89092919063ffffffff16565b6040516110b89190613c5f565b60006040518083038185875af1925050503d80600081146110f5576040519150601f19603f3d011682016040523d82523d6000602084013e6110fa565b606091505b5080965081975050505050611145565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113c90613d54565b60405180910390fd5b5b5b5b836111a25760008351111561115e576044830192505b808760001c846040517fef3dcb2f00000000000000000000000000000000000000000000000000000000815260040161119993929190613dad565b60405180910390fd5b600060408716146111cb576111c6605888901b848b61173c9092919063ffffffff16565b6111e7565b6111e4605888901b848b6117f19092919063ffffffff16565b98505b806001019050610d9f565b508796505050505050509392505050565b600081148061128d575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161124a929190613deb565b602060405180830381865afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190612fe3565b145b6112cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c390613e86565b60405180910390fd5b61134d8363095ea7b360e01b84846040516024016112eb929190613ea6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611990565b505050565b6113d38363a9059cbb60e01b8484604051602401611371929190613ea6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611990565b505050565b606060008060606000805b602081101561157c578681602081106113ff576113fe612f75565b5b1a60f81b60f81c60ff16915060ff82031561157c57600060808316146114fa5760fe820361146757600083510361145357886040516020016114419190613fdb565b60405160208183030381529060405292505b8251856114609190613196565b94506114f5565b600089607f84168151811061147f5761147e612f75565b5b602002602001015151905060006020826114999190613ffd565b146114d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d0906140a0565b60405180910390fd5b6020816114e69190613196565b866114f19190613196565b9550505b61156b565b602089607f84168151811061151257611511612f75565b5b6020026020010151511461155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155290614132565b60405180910390fd5b6020856115689190613196565b94505b6020840193508060010190506113e3565b5060048461158a9190613196565b67ffffffffffffffff8111156115a3576115a2611cf5565b5b6040519080825280601f01601f1916602001820160405280156115d55781602001600182028036833780820191505090505b5094508660208601526000935060005b60208110156117305786816020811061160157611600612f75565b5b1a60f81b60f81c60ff16915060ff82031561173057600060808316146116ef5760fe8203611678578385602488010152611658836020886004886116459190613196565b602088516116539190613311565b611a57565b602083516116669190613311565b846116719190613196565b93506116ea565b600089607f8416815181106116905761168f612f75565b5b602002602001015151905084866024890101526116da8a607f8516815181106116bc576116bb612f75565b5b60200260200101516000896004896116d49190613196565b85611a57565b80856116e69190613196565b9450505b61171f565b600089607f84168151811061170757611706612f75565b5b60200260200101519050602081015186602489010152505b6020850194508060010190506115e5565b50505050509392505050565b60008260f81c60ff16905060ff810361175557506117ec565b6000602083516117659190613196565b67ffffffffffffffff81111561177e5761177d611cf5565b5b6040519080825280601f01601f1916602001820160405280156117b05781602001600182028036833780820191505090505b508583815181106117c4576117c3612f75565b5b6020026020010181905290506117e08360008360208751611a57565b82518060208301525050505b505050565b606060008360f81c60ff16905060ff810361180f5784915050611989565b600060808216146118ab5760fe810361183d57828060200190518101906118369190614277565b94506118a6565b60006020840151905060208114611889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188090614332565b60405180910390fd5b60208451036020850152602084016020607f841602602088010152505b611984565b6020835110156118f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e79061439e565b60405180910390fd5b602083511115611961576000602067ffffffffffffffff81111561191757611916611cf5565b5b6040519080825280601f01601f1916602001820160405280156119495781602001600182028036833780820191505090505b50905061195c8460008360008851611a57565b809350505b8285607f83168151811061197857611977612f75565b5b60200260200101819052505b849150505b9392505050565b60006119f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a719092919063ffffffff16565b9050600081511115611a525780806020019051810190611a1291906143d3565b611a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4890614472565b60405180910390fd5b5b505050565b808260208501018286602089010160045afa505050505050565b6060611a808484600085611a89565b90509392505050565b606082471015611ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac590614504565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611af79190613c5f565b60006040518083038185875af1925050503d8060008114611b34576040519150601f19603f3d011682016040523d82523d6000602084013e611b39565b606091505b5091509150611b4a87838387611b56565b92505050949350505050565b60608315611bb8576000835103611bb057611b7085611bcb565b611baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba690614570565b60405180910390fd5b5b829050611bc3565b611bc28383611bee565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611c015781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c359190614590565b60405180910390fd5b6040518060200160405280606081525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611ca457611ca3611c7f565b5b8235905067ffffffffffffffff811115611cc157611cc0611c84565b5b602083019150836020820283011115611cdd57611cdc611c89565b5b9250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d2d82611ce4565b810181811067ffffffffffffffff82111715611d4c57611d4b611cf5565b5b80604052505050565b6000611d5f611c6b565b9050611d6b8282611d24565b919050565b600067ffffffffffffffff821115611d8b57611d8a611cf5565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115611dbc57611dbb611cf5565b5b611dc582611ce4565b9050602081019050919050565b82818337600083830152505050565b6000611df4611def84611da1565b611d55565b905082815260208101848484011115611e1057611e0f611d9c565b5b611e1b848285611dd2565b509392505050565b600082601f830112611e3857611e37611c7f565b5b8135611e48848260208601611de1565b91505092915050565b6000611e64611e5f84611d70565b611d55565b90508083825260208201905060208402830185811115611e8757611e86611c89565b5b835b81811015611ece57803567ffffffffffffffff811115611eac57611eab611c7f565b5b808601611eb98982611e23565b85526020850194505050602081019050611e89565b5050509392505050565b600082601f830112611eed57611eec611c7f565b5b8135611efd848260208601611e51565b91505092915050565b600067ffffffffffffffff821115611f2157611f20611cf5565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f5d82611f32565b9050919050565b6000611f6f82611f52565b9050919050565b611f7f81611f64565b8114611f8a57600080fd5b50565b600081359050611f9c81611f76565b92915050565b6000611fb5611fb084611f06565b611d55565b90508083825260208201905060208402830185811115611fd857611fd7611c89565b5b835b818110156120015780611fed8882611f8d565b845260208401935050602081019050611fda565b5050509392505050565b600082601f8301126120205761201f611c7f565b5b8135612030848260208601611fa2565b91505092915050565b6000806000806060858703121561205357612052611c75565b5b600085013567ffffffffffffffff81111561207157612070611c7a565b5b61207d87828801611c8e565b9450945050602085013567ffffffffffffffff8111156120a05761209f611c7a565b5b6120ac87828801611ed8565b925050604085013567ffffffffffffffff8111156120cd576120cc611c7a565b5b6120d98782880161200b565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61212481612111565b82525050565b6000612136838361211b565b60208301905092915050565b6000602082019050919050565b600061215a826120e5565b61216481856120f0565b935061216f83612101565b8060005b838110156121a0578151612187888261212a565b975061219283612142565b925050600181019050612173565b5085935050505092915050565b600060208301600083015184820360008601526121ca828261214f565b9150508091505092915050565b600060208201905081810360008301526121f181846121ad565b905092915050565b61220281612111565b811461220d57600080fd5b50565b60008135905061221f816121f9565b92915050565b6000806040838503121561223c5761223b611c75565b5b600061224a85828601612210565b925050602061225b85828601612210565b9150509250929050565b60008115159050919050565b61227a81612265565b82525050565b60006020820190506122956000830184612271565b92915050565b6122a481612111565b82525050565b60006020820190506122bf600083018461229b565b92915050565b6122ce81611f52565b81146122d957600080fd5b50565b6000813590506122eb816122c5565b92915050565b60008083601f84011261230757612306611c7f565b5b8235905067ffffffffffffffff81111561232457612323611c84565b5b6020830191508360018202830111156123405761233f611c89565b5b9250929050565b6000806000806060858703121561236157612360611c75565b5b600061236f878288016122dc565b945050602061238087828801612210565b935050604085013567ffffffffffffffff8111156123a1576123a0611c7a565b5b6123ad878288016122f1565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b838110156123f55780820151818401526020810190506123da565b60008484015250505050565b600061240c826123bb565b61241681856123c6565b93506124268185602086016123d7565b61242f81611ce4565b840191505092915050565b600060408201905061244f6000830185612271565b81810360208301526124618184612401565b90509392505050565b60008060006060848603121561248357612482611c75565b5b600061249186828701612210565b93505060206124a286828701612210565b92505060406124b386828701612210565b9150509250925092565b600080fd5b600080fd5b600067ffffffffffffffff8211156124e2576124e1611cf5565b5b6124eb82611ce4565b9050602081019050919050565b600061250b612506846124c7565b611d55565b90508281526020810184848401111561252757612526611d9c565b5b612532848285611dd2565b509392505050565b600082601f83011261254f5761254e611c7f565b5b813561255f8482602086016124f8565b91505092915050565b600067ffffffffffffffff82111561258357612582611cf5565b5b602082029050602081019050919050565b60006125a76125a284612568565b611d55565b905080838252602082019050602084028301858111156125ca576125c9611c89565b5b835b818110156125f357806125df88826122dc565b8452602084019350506020810190506125cc565b5050509392505050565b600082601f83011261261257612611611c7f565b5b8135612622848260208601612594565b91505092915050565b600067ffffffffffffffff82111561264657612645611cf5565b5b602082029050602081019050919050565b600061266a6126658461262b565b611d55565b9050808382526020820190506020840283018581111561268d5761268c611c89565b5b835b818110156126b657806126a28882612210565b84526020840193505060208101905061268f565b5050509392505050565b600082601f8301126126d5576126d4611c7f565b5b81356126e5848260208601612657565b91505092915050565b600060a08284031215612704576127036124bd565b5b61270e60a0611d55565b9050600082013567ffffffffffffffff81111561272e5761272d6124c2565b5b61273a8482850161253a565b600083015250602082013567ffffffffffffffff81111561275e5761275d6124c2565b5b61276a8482850161253a565b602083015250604082013567ffffffffffffffff81111561278e5761278d6124c2565b5b61279a848285016125fd565b604083015250606082013567ffffffffffffffff8111156127be576127bd6124c2565b5b6127ca848285016126c0565b60608301525060806127de84828501612210565b60808301525092915050565b600067ffffffffffffffff82111561280557612804611cf5565b5b602082029050602081019050919050565b60006bffffffffffffffffffffffff82169050919050565b61283781612816565b811461284257600080fd5b50565b6000813590506128548161282e565b92915050565b6000604082840312156128705761286f6124bd565b5b61287a6040611d55565b9050600061288a848285016122dc565b600083015250602061289e84828501612845565b60208301525092915050565b60006128bd6128b8846127ea565b611d55565b905080838252602082019050604084028301858111156128e0576128df611c89565b5b835b8181101561290957806128f5888261285a565b8452602084019350506040810190506128e2565b5050509392505050565b600082601f83011261292857612927611c7f565b5b81356129388482602086016128aa565b91505092915050565b600060c08284031215612957576129566124bd565b5b61296160c0611d55565b9050600061297184828501612210565b600083015250602061298584828501612210565b602083015250604082013567ffffffffffffffff8111156129a9576129a86124c2565b5b6129b584828501612913565b60408301525060606129c984828501612210565b60608301525060806129dd84828501612210565b60808301525060a082013567ffffffffffffffff811115612a0157612a006124c2565b5b612a0d8482850161253a565b60a08301525092915050565b600060608284031215612a2f57612a2e6124bd565b5b612a396060611d55565b9050600082013567ffffffffffffffff811115612a5957612a586124c2565b5b612a65848285016125fd565b600083015250602082013567ffffffffffffffff811115612a8957612a886124c2565b5b612a95848285016125fd565b602083015250604082013567ffffffffffffffff811115612ab957612ab86124c2565b5b612ac5848285016125fd565b60408301525092915050565b612ada81612265565b8114612ae557600080fd5b50565b600081359050612af781612ad1565b92915050565b6000612b0882611f52565b9050919050565b612b1881612afd565b8114612b2357600080fd5b50565b600081359050612b3581612b0f565b92915050565b600065ffffffffffff82169050919050565b612b5681612b3b565b8114612b6157600080fd5b50565b600081359050612b7381612b4d565b92915050565b600063ffffffff82169050919050565b612b9281612b79565b8114612b9d57600080fd5b50565b600081359050612baf81612b89565b92915050565b600060c08284031215612bcb57612bca6124bd565b5b612bd560c0611d55565b90506000612be584828501612b64565b6000830152506020612bf984828501612ba0565b6020830152506040612c0d84828501612210565b6040830152506060612c2184828501612210565b6060830152506080612c3584828501612210565b60808301525060a082013567ffffffffffffffff811115612c5957612c586124c2565b5b612c65848285016125fd565b60a08301525092915050565b60006101208284031215612c8857612c876124bd565b5b612c93610120611d55565b90506000612ca3848285016122dc565b600083015250602082013567ffffffffffffffff811115612cc757612cc66124c2565b5b612cd3848285016126ee565b602083015250604082013567ffffffffffffffff811115612cf757612cf66124c2565b5b612d0384828501612941565b604083015250606082013567ffffffffffffffff811115612d2757612d266124c2565b5b612d3384828501612a19565b6060830152506080612d4784828501612ae8565b60808301525060a0612d5b84828501612b26565b60a08301525060c0612d6f848285016122dc565b60c08301525060e082013567ffffffffffffffff811115612d9357612d926124c2565b5b612d9f84828501612bb5565b60e08301525061010082013567ffffffffffffffff811115612dc457612dc36124c2565b5b612dd084828501612bb5565b6101008301525092915050565b6000819050919050565b612df081612ddd565b8114612dfb57600080fd5b50565b600081359050612e0d81612de7565b92915050565b600080600080600080600060c0888a031215612e3257612e31611c75565b5b600088013567ffffffffffffffff811115612e5057612e4f611c7a565b5b612e5c8a828b01611c8e565b9750975050602088013567ffffffffffffffff811115612e7f57612e7e611c7a565b5b612e8b8a828b01611ed8565b955050604088013567ffffffffffffffff811115612eac57612eab611c7a565b5b612eb88a828b0161200b565b945050606088013567ffffffffffffffff811115612ed957612ed8611c7a565b5b612ee58a828b01612c71565b9350506080612ef68a828b016122dc565b92505060a0612f078a828b01612dfe565b91505092959891949750929550565b60006040830160008301518482036000860152612f33828261214f565b9150506020830151612f48602086018261211b565b508091505092915050565b60006020820190508181036000830152612f6d8184612f16565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b612fad81611f52565b82525050565b6000602082019050612fc86000830184612fa4565b92915050565b600081519050612fdd816121f9565b92915050565b600060208284031215612ff957612ff8611c75565b5b600061300784828501612fce565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061304a82612111565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361307c5761307b613010565b5b600182019050919050565b600082825260208201905092915050565b7f50726576656e7454616d706572696e673a20436f646520686173206368616e6760008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b60006130f4602283613087565b91506130ff82613098565b604082019050919050565b60006020820190508181036000830152613123816130e7565b9050919050565b7f214153534552545f475400000000000000000000000000000000000000000000600082015250565b6000613160600a83613087565b915061316b8261312a565b602082019050919050565b6000602082019050818103600083015261318f81613153565b9050919050565b60006131a182612111565b91506131ac83612111565b92508282019050808211156131c4576131c3613010565b5b92915050565b7f5a61707065724578656375746f723a204f6e6c792063616c6c61626c6520627960008201527f205a617070657200000000000000000000000000000000000000000000000000602082015250565b6000613226602783613087565b9150613231826131ca565b604082019050919050565b6000602082019050818103600083015261325581613219565b9050919050565b600081905092915050565b6000613273838561325c565b9350613280838584611dd2565b82840190509392505050565b6000613299828486613267565b91508190509392505050565b7f214153534552545f455100000000000000000000000000000000000000000000600082015250565b60006132db600a83613087565b91506132e6826132a5565b602082019050919050565b6000602082019050818103600083015261330a816132ce565b9050919050565b600061331c82612111565b915061332783612111565b925082820390508181111561333f5761333e613010565b5b92915050565b600061335082612111565b915061335b83612111565b925082820261336981612111565b915082820484148315176133805761337f613010565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133c182612111565b91506133cc83612111565b9250826133dc576133db613387565b5b828204905092915050565b7f5a45524f2042414c414e43450000000000000000000000000000000000000000600082015250565b600061341d600c83613087565b9150613428826133e7565b602082019050919050565b6000602082019050818103600083015261344c81613410565b9050919050565b7f5a45524f205155414e5449545900000000000000000000000000000000000000600082015250565b6000613489600d83613087565b915061349482613453565b602082019050919050565b600060208201905081810360008301526134b88161347c565b9050919050565b7f4e4f205348415245530000000000000000000000000000000000000000000000600082015250565b60006134f5600983613087565b9150613500826134bf565b602082019050919050565b60006020820190508181036000830152613524816134e8565b9050919050565b6000819050919050565b600061355061354b61354684611f32565b61352b565b611f32565b9050919050565b600061356282613535565b9050919050565b600061357482613557565b9050919050565b61358481613569565b82525050565b600081519050919050565b600082825260208201905092915050565b60006135b18261358a565b6135bb8185613595565b93506135cb8185602086016123d7565b6135d481611ce4565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61361481611f52565b82525050565b6000613626838361360b565b60208301905092915050565b6000602082019050919050565b600061364a826135df565b61365481856135ea565b935061365f836135fb565b8060005b83811015613690578151613677888261361a565b975061368283613632565b925050600181019050613663565b5085935050505092915050565b600060a08301600083015184820360008601526136ba82826135a6565b915050602083015184820360208601526136d482826135a6565b915050604083015184820360408601526136ee828261363f565b91505060608301518482036060860152613708828261214f565b915050608083015161371d608086018261211b565b508091505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61375d81612816565b82525050565b604082016000820151613779600085018261360b565b50602082015161378c6020850182613754565b50505050565b600061379e8383613763565b60408301905092915050565b6000602082019050919050565b60006137c282613728565b6137cc8185613733565b93506137d783613744565b8060005b838110156138085781516137ef8882613792565b97506137fa836137aa565b9250506001810190506137db565b5085935050505092915050565b600060c08301600083015161382d600086018261211b565b506020830151613840602086018261211b565b506040830151848203604086015261385882826137b7565b915050606083015161386d606086018261211b565b506080830151613880608086018261211b565b5060a083015184820360a086015261389882826135a6565b9150508091505092915050565b6138ae81612b3b565b82525050565b6138bd81612b79565b82525050565b600060c0830160008301516138db60008601826138a5565b5060208301516138ee60208601826138b4565b506040830151613901604086018261211b565b506060830151613914606086018261211b565b506080830151613927608086018261211b565b5060a083015184820360a086015261393f828261363f565b9150508091505092915050565b60006060830160008301518482036000860152613969828261363f565b91505060208301518482036020860152613983828261363f565b9150506040830151848203604086015261399d828261363f565b9150508091505092915050565b6139b381612ddd565b82525050565b600060e0820190506139ce600083018a61357b565b81810360208301526139e0818961369d565b905081810360408301526139f48188613815565b90508181036060830152613a0881876138c3565b90508181036080830152613a1c81866138c3565b905081810360a0830152613a30818561394c565b9050613a3f60c08301846139aa565b98975050505050505050565b600081519050613a5a816122c5565b92915050565b60008060008060008060c08789031215613a7d57613a7c611c75565b5b6000613a8b89828a01613a4b565b9650506020613a9c89828a01613a4b565b9550506040613aad89828a01613a4b565b9450506060613abe89828a01613a4b565b9350506080613acf89828a01613a4b565b92505060a0613ae089828a01613a4b565b9150509295509295509295565b600082825260208201905092915050565b6000613b09826135df565b613b138185613aed565b9350613b1e836135fb565b8060005b83811015613b4f578151613b36888261361a565b9750613b4183613632565b925050600181019050613b22565b5085935050505092915050565b600060e0820190508181036000830152613b76818a61369d565b90508181036020830152613b8a8189613815565b9050613b996040830188612fa4565b8181036060830152613bab8187613afe565b90508181036080830152613bbf8186613afe565b905081810360a0830152613bd38185613afe565b9050613be260c08301846139aa565b98975050505050505050565b60008060408385031215613c0557613c04611c75565b5b6000613c1385828601613a4b565b9250506020613c2485828601613a4b565b9150509250929050565b6000613c39826123bb565b613c43818561325c565b9350613c538185602086016123d7565b80840191505092915050565b6000613c6b8284613c2e565b915081905092915050565b7f5f657865637574653a2076616c75652063616c6c20686173206e6f2076616c7560008201527f6520696e646963617465642e0000000000000000000000000000000000000000602082015250565b6000613cd2602c83613087565b9150613cdd82613c76565b604082019050919050565b60006020820190508181036000830152613d0181613cc5565b9050919050565b7f496e76616c69642063616c6c7479706500000000000000000000000000000000600082015250565b6000613d3e601083613087565b9150613d4982613d08565b602082019050919050565b60006020820190508181036000830152613d6d81613d31565b9050919050565b6000613d7f8261358a565b613d898185613087565b9350613d998185602086016123d7565b613da281611ce4565b840191505092915050565b6000606082019050613dc2600083018661229b565b613dcf6020830185612fa4565b8181036040830152613de18184613d74565b9050949350505050565b6000604082019050613e006000830185612fa4565b613e0d6020830184612fa4565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000613e70603683613087565b9150613e7b82613e14565b604082019050919050565b60006020820190508181036000830152613e9f81613e63565b9050919050565b6000604082019050613ebb6000830185612fa4565b613ec8602083018461229b565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000613f17826123bb565b613f218185613efb565b9350613f318185602086016123d7565b613f3a81611ce4565b840191505092915050565b6000613f518383613f0c565b905092915050565b6000602082019050919050565b6000613f7182613ecf565b613f7b8185613eda565b935083602082028501613f8d85613eeb565b8060005b85811015613fc95784840389528151613faa8582613f45565b9450613fb583613f59565b925060208a01995050600181019050613f91565b50829750879550505050505092915050565b60006020820190508181036000830152613ff58184613f66565b905092915050565b600061400882612111565b915061401383612111565b92508261402357614022613387565b5b828206905092915050565b7f44796e616d6963207374617465207661726961626c6573206d7573742062652060008201527f61206d756c7469706c65206f6620333220627974657300000000000000000000602082015250565b600061408a603683613087565b91506140958261402e565b604082019050919050565b600060208201905081810360008301526140b98161407d565b9050919050565b7f537461746963207374617465207661726961626c6573206d757374206265203360008201527f3220627974657300000000000000000000000000000000000000000000000000602082015250565b600061411c602783613087565b9150614127826140c0565b604082019050919050565b6000602082019050818103600083015261414b8161410f565b9050919050565b600061416561416084611da1565b611d55565b90508281526020810184848401111561418157614180611d9c565b5b61418c8482856123d7565b509392505050565b600082601f8301126141a9576141a8611c7f565b5b81516141b9848260208601614152565b91505092915050565b60006141d56141d084611d70565b611d55565b905080838252602082019050602084028301858111156141f8576141f7611c89565b5b835b8181101561423f57805167ffffffffffffffff81111561421d5761421c611c7f565b5b80860161422a8982614194565b855260208501945050506020810190506141fa565b5050509392505050565b600082601f83011261425e5761425d611c7f565b5b815161426e8482602086016141c2565b91505092915050565b60006020828403121561428d5761428c611c75565b5b600082015167ffffffffffffffff8111156142ab576142aa611c7a565b5b6142b784828501614249565b91505092915050565b7f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060008201527f287661726961626c652900000000000000000000000000000000000000000000602082015250565b600061431c602a83613087565b9150614327826142c0565b604082019050919050565b6000602082019050818103600083015261434b8161430f565b9050919050565b7f52657475726e206174206c656173742033322062797465730000000000000000600082015250565b6000614388601883613087565b915061439382614352565b602082019050919050565b600060208201905081810360008301526143b78161437b565b9050919050565b6000815190506143cd81612ad1565b92915050565b6000602082840312156143e9576143e8611c75565b5b60006143f7848285016143be565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061445c602a83613087565b915061446782614400565b604082019050919050565b6000602082019050818103600083015261448b8161444f565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006144ee602683613087565b91506144f982614492565b604082019050919050565b6000602082019050818103600083015261451d816144e1565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061455a601d83613087565b915061456582614524565b602082019050919050565b600060208201905081810360008301526145898161454d565b9050919050565b600060208201905081810360008301526145aa8184613d74565b90509291505056fea2646970667358221220a7a6a9b2a852ea5432a1f2630ebd20fde618d154aad4308f4f9fc9706c26121264736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c8063ad207fd71161004e578063ad207fd714610173578063b67d77c5146101b0578063d47b0de4146101ed578063f95641621461022a57610086565b806308c4b4981461008b578063298e2c9e146100bb578063771602f7146100f857806398a38d7d1461013557610086565b3661008657005b600080fd5b6100a560048036038101906100a09190612039565b61025a565b6040516100b291906121d7565b60405180910390f35b3480156100c757600080fd5b506100e260048036038101906100dd9190612225565b6103ef565b6040516100ef9190612280565b60405180910390f35b34801561010457600080fd5b5061011f600480360381019061011a9190612225565b61043d565b60405161012c91906122aa565b60405180910390f35b34801561014157600080fd5b5061015c60048036038101906101579190612347565b610453565b60405161016a92919061243a565b60405180910390f35b34801561017f57600080fd5b5061019a60048036038101906101959190612225565b610541565b6040516101a79190612280565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d29190612225565b61058f565b6040516101e491906122aa565b60405180910390f35b3480156101f957600080fd5b50610214600480360381019061020f919061246a565b6105a5565b60405161022191906122aa565b60405180910390f35b610244600480360381019061023f9190612e13565b6105c7565b6040516102519190612f53565b60405180910390f35b610262611c3e565b6000303f9050610273868686610d8a565b50825167ffffffffffffffff81111561028f5761028e611cf5565b5b6040519080825280602002602001820160405280156102bd5781602001602082028036833780820191505090505b50826000018190525060005b835181101561039c578381815181106102e5576102e4612f75565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016103259190612fb3565b602060405180830381865afa158015610342573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103669190612fe3565b8360000151828151811061037d5761037c612f75565b5b60200260200101818152505080806103949061303f565b9150506102c9565b506000303f90508181146103e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103dc9061310a565b60405180910390fd5b5050949350505050565b6000818311610433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042a90613176565b60405180910390fd5b6001905092915050565b6000818361044b9190613196565b905092915050565b600060603073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104bc9061323c565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff168585856040516104ed92919061328c565b60006040518083038185875af1925050503d806000811461052a576040519150601f19603f3d011682016040523d82523d6000602084013e61052f565b606091505b50809250819350505094509492505050565b6000818314610585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057c906132f1565b60405180910390fd5b6001905092915050565b6000818361059d9190613311565b905092915050565b60008183856105b49190613345565b6105be91906133b6565b90509392505050565b6105cf611c51565b6000303f90506105e0898989610d8a565b5060007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905060005b8660200151604001515181101561082f576000876020015160400151828151811061063757610636612f75565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106779190612fb3565b602060405180830381865afa158015610694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b89190612fe3565b9050600081036106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490613433565b60405180910390fd5b6000886020015160600151838151811061071a57610719612f75565b5b6020026020010151905060008103610767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075e9061349f565b60405180910390fd5b600081670de0b6b3a76400008461077e9190613345565b61078891906133b6565b905084811015610796578094505b6107c88a602001516040015185815181106107b4576107b3612f75565b5b60200260200101518b600001516000611203565b6108198a602001516040015185815181106107e6576107e5612f75565b5b60200260200101518b600001517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff611203565b50505080806108279061303f565b915050610609565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8103610892576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108899061350b565b60405180910390fd5b60005b8660200151604001515181101561092157670de0b6b3a764000087602001516060015182815181106108ca576108c9612f75565b5b6020026020010151836108dd9190613345565b6108e791906133b6565b876020015160600151828151811061090257610901612f75565b5b60200260200101818152505080806109199061303f565b915050610895565b508086602001516080018181525050856080015115610a80576000866000015173ffffffffffffffffffffffffffffffffffffffff1663784d48c78860a0015189602001518a604001518b60e001518c61010001518d606001518c6040518863ffffffff1660e01b815260040161099e97969594939291906139b9565b60c0604051808303816000875af11580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190613a60565b505050505090508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a219190612fb3565b602060405180830381865afa158015610a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a629190612fe3565b846020018181525050610a7a81878660200151611352565b50610bc8565b6000866000015173ffffffffffffffffffffffffffffffffffffffff1663fd7d2e4f886020015189604001518a60c001518b60600151600001518c60600151602001518d60600151604001518c6040518863ffffffff1660e01b8152600401610aef9796959493929190613b5c565b60408051808303816000875af1158015610b0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b319190613bee565b5090508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b6d9190612fb3565b602060405180830381865afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190612fe3565b846020018181525050610bc681878660200151611352565b505b865167ffffffffffffffff811115610be357610be2611cf5565b5b604051908082528060200260200182016040528015610c115781602001602082028036833780820191505090505b50836000018190525060005b8751811015610d3357878181518110610c3957610c38612f75565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c799190612fb3565b602060405180830381865afa158015610c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cba9190612fe3565b84600001518281518110610cd157610cd0612f75565b5b602002602001018181525050610d20888281518110610cf357610cf2612f75565b5b60200260200101518786600001518481518110610d1357610d12612f75565b5b6020026020010151611352565b8080610d2b9061303f565b915050610c1d565b50506000303f9050818114610d7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d749061310a565b60405180910390fd5b5050979650505050505050565b60606000806000806060600089899050905060005b818110156111f2578a8a82818110610dba57610db9612f75565b5b905060200201359650602087901b60f81c60ff16955060006080871614610e08578a8a8280610de89061303f565b9350818110610dfa57610df9612f75565b5b905060200201359450610e32565b79ffffffffffffffffffffffffffffffffffffffffffffffffffff602888901b60001c1760001b94505b60006003871603610ec7578660001c73ffffffffffffffffffffffffffffffffffffffff16610e6c88878c6113d89092919063ffffffff16565b604051610e799190613c5f565b600060405180830381855af49150503d8060008114610eb4576040519150601f19603f3d011682016040523d82523d6000602084013e610eb9565b606091505b508094508195505050611148565b60016003871603610f5e578660001c73ffffffffffffffffffffffffffffffffffffffff16610f0188878c6113d89092919063ffffffff16565b604051610f0e9190613c5f565b6000604051808303816000865af19150503d8060008114610f4b576040519150601f19603f3d011682016040523d82523d6000602084013e610f50565b606091505b508094508195505050611147565b60026003871603610ff3578660001c73ffffffffffffffffffffffffffffffffffffffff16610f9888878c6113d89092919063ffffffff16565b604051610fa59190613c5f565b600060405180830381855afa9150503d8060008114610fe0576040519150601f19603f3d011682016040523d82523d6000602084013e610fe5565b606091505b508094508195505050611146565b60038087160361110a576000808a8760f81c60ff168151811061101957611018612f75565b5b602002602001015190506020815114611067576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105e90613ce8565b60405180910390fd5b602081015191508860001c73ffffffffffffffffffffffffffffffffffffffff16826110ab8b60ff60088c901b60001c1760001b8f6113d89092919063ffffffff16565b6040516110b89190613c5f565b60006040518083038185875af1925050503d80600081146110f5576040519150601f19603f3d011682016040523d82523d6000602084013e6110fa565b606091505b5080965081975050505050611145565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113c90613d54565b60405180910390fd5b5b5b5b836111a25760008351111561115e576044830192505b808760001c846040517fef3dcb2f00000000000000000000000000000000000000000000000000000000815260040161119993929190613dad565b60405180910390fd5b600060408716146111cb576111c6605888901b848b61173c9092919063ffffffff16565b6111e7565b6111e4605888901b848b6117f19092919063ffffffff16565b98505b806001019050610d9f565b508796505050505050509392505050565b600081148061128d575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161124a929190613deb565b602060405180830381865afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190612fe3565b145b6112cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112c390613e86565b60405180910390fd5b61134d8363095ea7b360e01b84846040516024016112eb929190613ea6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611990565b505050565b6113d38363a9059cbb60e01b8484604051602401611371929190613ea6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611990565b505050565b606060008060606000805b602081101561157c578681602081106113ff576113fe612f75565b5b1a60f81b60f81c60ff16915060ff82031561157c57600060808316146114fa5760fe820361146757600083510361145357886040516020016114419190613fdb565b60405160208183030381529060405292505b8251856114609190613196565b94506114f5565b600089607f84168151811061147f5761147e612f75565b5b602002602001015151905060006020826114999190613ffd565b146114d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d0906140a0565b60405180910390fd5b6020816114e69190613196565b866114f19190613196565b9550505b61156b565b602089607f84168151811061151257611511612f75565b5b6020026020010151511461155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155290614132565b60405180910390fd5b6020856115689190613196565b94505b6020840193508060010190506113e3565b5060048461158a9190613196565b67ffffffffffffffff8111156115a3576115a2611cf5565b5b6040519080825280601f01601f1916602001820160405280156115d55781602001600182028036833780820191505090505b5094508660208601526000935060005b60208110156117305786816020811061160157611600612f75565b5b1a60f81b60f81c60ff16915060ff82031561173057600060808316146116ef5760fe8203611678578385602488010152611658836020886004886116459190613196565b602088516116539190613311565b611a57565b602083516116669190613311565b846116719190613196565b93506116ea565b600089607f8416815181106116905761168f612f75565b5b602002602001015151905084866024890101526116da8a607f8516815181106116bc576116bb612f75565b5b60200260200101516000896004896116d49190613196565b85611a57565b80856116e69190613196565b9450505b61171f565b600089607f84168151811061170757611706612f75565b5b60200260200101519050602081015186602489010152505b6020850194508060010190506115e5565b50505050509392505050565b60008260f81c60ff16905060ff810361175557506117ec565b6000602083516117659190613196565b67ffffffffffffffff81111561177e5761177d611cf5565b5b6040519080825280601f01601f1916602001820160405280156117b05781602001600182028036833780820191505090505b508583815181106117c4576117c3612f75565b5b6020026020010181905290506117e08360008360208751611a57565b82518060208301525050505b505050565b606060008360f81c60ff16905060ff810361180f5784915050611989565b600060808216146118ab5760fe810361183d57828060200190518101906118369190614277565b94506118a6565b60006020840151905060208114611889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188090614332565b60405180910390fd5b60208451036020850152602084016020607f841602602088010152505b611984565b6020835110156118f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118e79061439e565b60405180910390fd5b602083511115611961576000602067ffffffffffffffff81111561191757611916611cf5565b5b6040519080825280601f01601f1916602001820160405280156119495781602001600182028036833780820191505090505b50905061195c8460008360008851611a57565b809350505b8285607f83168151811061197857611977612f75565b5b60200260200101819052505b849150505b9392505050565b60006119f2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a719092919063ffffffff16565b9050600081511115611a525780806020019051810190611a1291906143d3565b611a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4890614472565b60405180910390fd5b5b505050565b808260208501018286602089010160045afa505050505050565b6060611a808484600085611a89565b90509392505050565b606082471015611ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac590614504565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611af79190613c5f565b60006040518083038185875af1925050503d8060008114611b34576040519150601f19603f3d011682016040523d82523d6000602084013e611b39565b606091505b5091509150611b4a87838387611b56565b92505050949350505050565b60608315611bb8576000835103611bb057611b7085611bcb565b611baf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba690614570565b60405180910390fd5b5b829050611bc3565b611bc28383611bee565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115611c015781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c359190614590565b60405180910390fd5b6040518060200160405280606081525090565b604051806040016040528060608152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f840112611ca457611ca3611c7f565b5b8235905067ffffffffffffffff811115611cc157611cc0611c84565b5b602083019150836020820283011115611cdd57611cdc611c89565b5b9250929050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611d2d82611ce4565b810181811067ffffffffffffffff82111715611d4c57611d4b611cf5565b5b80604052505050565b6000611d5f611c6b565b9050611d6b8282611d24565b919050565b600067ffffffffffffffff821115611d8b57611d8a611cf5565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff821115611dbc57611dbb611cf5565b5b611dc582611ce4565b9050602081019050919050565b82818337600083830152505050565b6000611df4611def84611da1565b611d55565b905082815260208101848484011115611e1057611e0f611d9c565b5b611e1b848285611dd2565b509392505050565b600082601f830112611e3857611e37611c7f565b5b8135611e48848260208601611de1565b91505092915050565b6000611e64611e5f84611d70565b611d55565b90508083825260208201905060208402830185811115611e8757611e86611c89565b5b835b81811015611ece57803567ffffffffffffffff811115611eac57611eab611c7f565b5b808601611eb98982611e23565b85526020850194505050602081019050611e89565b5050509392505050565b600082601f830112611eed57611eec611c7f565b5b8135611efd848260208601611e51565b91505092915050565b600067ffffffffffffffff821115611f2157611f20611cf5565b5b602082029050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611f5d82611f32565b9050919050565b6000611f6f82611f52565b9050919050565b611f7f81611f64565b8114611f8a57600080fd5b50565b600081359050611f9c81611f76565b92915050565b6000611fb5611fb084611f06565b611d55565b90508083825260208201905060208402830185811115611fd857611fd7611c89565b5b835b818110156120015780611fed8882611f8d565b845260208401935050602081019050611fda565b5050509392505050565b600082601f8301126120205761201f611c7f565b5b8135612030848260208601611fa2565b91505092915050565b6000806000806060858703121561205357612052611c75565b5b600085013567ffffffffffffffff81111561207157612070611c7a565b5b61207d87828801611c8e565b9450945050602085013567ffffffffffffffff8111156120a05761209f611c7a565b5b6120ac87828801611ed8565b925050604085013567ffffffffffffffff8111156120cd576120cc611c7a565b5b6120d98782880161200b565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61212481612111565b82525050565b6000612136838361211b565b60208301905092915050565b6000602082019050919050565b600061215a826120e5565b61216481856120f0565b935061216f83612101565b8060005b838110156121a0578151612187888261212a565b975061219283612142565b925050600181019050612173565b5085935050505092915050565b600060208301600083015184820360008601526121ca828261214f565b9150508091505092915050565b600060208201905081810360008301526121f181846121ad565b905092915050565b61220281612111565b811461220d57600080fd5b50565b60008135905061221f816121f9565b92915050565b6000806040838503121561223c5761223b611c75565b5b600061224a85828601612210565b925050602061225b85828601612210565b9150509250929050565b60008115159050919050565b61227a81612265565b82525050565b60006020820190506122956000830184612271565b92915050565b6122a481612111565b82525050565b60006020820190506122bf600083018461229b565b92915050565b6122ce81611f52565b81146122d957600080fd5b50565b6000813590506122eb816122c5565b92915050565b60008083601f84011261230757612306611c7f565b5b8235905067ffffffffffffffff81111561232457612323611c84565b5b6020830191508360018202830111156123405761233f611c89565b5b9250929050565b6000806000806060858703121561236157612360611c75565b5b600061236f878288016122dc565b945050602061238087828801612210565b935050604085013567ffffffffffffffff8111156123a1576123a0611c7a565b5b6123ad878288016122f1565b925092505092959194509250565b600081519050919050565b600082825260208201905092915050565b60005b838110156123f55780820151818401526020810190506123da565b60008484015250505050565b600061240c826123bb565b61241681856123c6565b93506124268185602086016123d7565b61242f81611ce4565b840191505092915050565b600060408201905061244f6000830185612271565b81810360208301526124618184612401565b90509392505050565b60008060006060848603121561248357612482611c75565b5b600061249186828701612210565b93505060206124a286828701612210565b92505060406124b386828701612210565b9150509250925092565b600080fd5b600080fd5b600067ffffffffffffffff8211156124e2576124e1611cf5565b5b6124eb82611ce4565b9050602081019050919050565b600061250b612506846124c7565b611d55565b90508281526020810184848401111561252757612526611d9c565b5b612532848285611dd2565b509392505050565b600082601f83011261254f5761254e611c7f565b5b813561255f8482602086016124f8565b91505092915050565b600067ffffffffffffffff82111561258357612582611cf5565b5b602082029050602081019050919050565b60006125a76125a284612568565b611d55565b905080838252602082019050602084028301858111156125ca576125c9611c89565b5b835b818110156125f357806125df88826122dc565b8452602084019350506020810190506125cc565b5050509392505050565b600082601f83011261261257612611611c7f565b5b8135612622848260208601612594565b91505092915050565b600067ffffffffffffffff82111561264657612645611cf5565b5b602082029050602081019050919050565b600061266a6126658461262b565b611d55565b9050808382526020820190506020840283018581111561268d5761268c611c89565b5b835b818110156126b657806126a28882612210565b84526020840193505060208101905061268f565b5050509392505050565b600082601f8301126126d5576126d4611c7f565b5b81356126e5848260208601612657565b91505092915050565b600060a08284031215612704576127036124bd565b5b61270e60a0611d55565b9050600082013567ffffffffffffffff81111561272e5761272d6124c2565b5b61273a8482850161253a565b600083015250602082013567ffffffffffffffff81111561275e5761275d6124c2565b5b61276a8482850161253a565b602083015250604082013567ffffffffffffffff81111561278e5761278d6124c2565b5b61279a848285016125fd565b604083015250606082013567ffffffffffffffff8111156127be576127bd6124c2565b5b6127ca848285016126c0565b60608301525060806127de84828501612210565b60808301525092915050565b600067ffffffffffffffff82111561280557612804611cf5565b5b602082029050602081019050919050565b60006bffffffffffffffffffffffff82169050919050565b61283781612816565b811461284257600080fd5b50565b6000813590506128548161282e565b92915050565b6000604082840312156128705761286f6124bd565b5b61287a6040611d55565b9050600061288a848285016122dc565b600083015250602061289e84828501612845565b60208301525092915050565b60006128bd6128b8846127ea565b611d55565b905080838252602082019050604084028301858111156128e0576128df611c89565b5b835b8181101561290957806128f5888261285a565b8452602084019350506040810190506128e2565b5050509392505050565b600082601f83011261292857612927611c7f565b5b81356129388482602086016128aa565b91505092915050565b600060c08284031215612957576129566124bd565b5b61296160c0611d55565b9050600061297184828501612210565b600083015250602061298584828501612210565b602083015250604082013567ffffffffffffffff8111156129a9576129a86124c2565b5b6129b584828501612913565b60408301525060606129c984828501612210565b60608301525060806129dd84828501612210565b60808301525060a082013567ffffffffffffffff811115612a0157612a006124c2565b5b612a0d8482850161253a565b60a08301525092915050565b600060608284031215612a2f57612a2e6124bd565b5b612a396060611d55565b9050600082013567ffffffffffffffff811115612a5957612a586124c2565b5b612a65848285016125fd565b600083015250602082013567ffffffffffffffff811115612a8957612a886124c2565b5b612a95848285016125fd565b602083015250604082013567ffffffffffffffff811115612ab957612ab86124c2565b5b612ac5848285016125fd565b60408301525092915050565b612ada81612265565b8114612ae557600080fd5b50565b600081359050612af781612ad1565b92915050565b6000612b0882611f52565b9050919050565b612b1881612afd565b8114612b2357600080fd5b50565b600081359050612b3581612b0f565b92915050565b600065ffffffffffff82169050919050565b612b5681612b3b565b8114612b6157600080fd5b50565b600081359050612b7381612b4d565b92915050565b600063ffffffff82169050919050565b612b9281612b79565b8114612b9d57600080fd5b50565b600081359050612baf81612b89565b92915050565b600060c08284031215612bcb57612bca6124bd565b5b612bd560c0611d55565b90506000612be584828501612b64565b6000830152506020612bf984828501612ba0565b6020830152506040612c0d84828501612210565b6040830152506060612c2184828501612210565b6060830152506080612c3584828501612210565b60808301525060a082013567ffffffffffffffff811115612c5957612c586124c2565b5b612c65848285016125fd565b60a08301525092915050565b60006101208284031215612c8857612c876124bd565b5b612c93610120611d55565b90506000612ca3848285016122dc565b600083015250602082013567ffffffffffffffff811115612cc757612cc66124c2565b5b612cd3848285016126ee565b602083015250604082013567ffffffffffffffff811115612cf757612cf66124c2565b5b612d0384828501612941565b604083015250606082013567ffffffffffffffff811115612d2757612d266124c2565b5b612d3384828501612a19565b6060830152506080612d4784828501612ae8565b60808301525060a0612d5b84828501612b26565b60a08301525060c0612d6f848285016122dc565b60c08301525060e082013567ffffffffffffffff811115612d9357612d926124c2565b5b612d9f84828501612bb5565b60e08301525061010082013567ffffffffffffffff811115612dc457612dc36124c2565b5b612dd084828501612bb5565b6101008301525092915050565b6000819050919050565b612df081612ddd565b8114612dfb57600080fd5b50565b600081359050612e0d81612de7565b92915050565b600080600080600080600060c0888a031215612e3257612e31611c75565b5b600088013567ffffffffffffffff811115612e5057612e4f611c7a565b5b612e5c8a828b01611c8e565b9750975050602088013567ffffffffffffffff811115612e7f57612e7e611c7a565b5b612e8b8a828b01611ed8565b955050604088013567ffffffffffffffff811115612eac57612eab611c7a565b5b612eb88a828b0161200b565b945050606088013567ffffffffffffffff811115612ed957612ed8611c7a565b5b612ee58a828b01612c71565b9350506080612ef68a828b016122dc565b92505060a0612f078a828b01612dfe565b91505092959891949750929550565b60006040830160008301518482036000860152612f33828261214f565b9150506020830151612f48602086018261211b565b508091505092915050565b60006020820190508181036000830152612f6d8184612f16565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b612fad81611f52565b82525050565b6000602082019050612fc86000830184612fa4565b92915050565b600081519050612fdd816121f9565b92915050565b600060208284031215612ff957612ff8611c75565b5b600061300784828501612fce565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061304a82612111565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361307c5761307b613010565b5b600182019050919050565b600082825260208201905092915050565b7f50726576656e7454616d706572696e673a20436f646520686173206368616e6760008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b60006130f4602283613087565b91506130ff82613098565b604082019050919050565b60006020820190508181036000830152613123816130e7565b9050919050565b7f214153534552545f475400000000000000000000000000000000000000000000600082015250565b6000613160600a83613087565b915061316b8261312a565b602082019050919050565b6000602082019050818103600083015261318f81613153565b9050919050565b60006131a182612111565b91506131ac83612111565b92508282019050808211156131c4576131c3613010565b5b92915050565b7f5a61707065724578656375746f723a204f6e6c792063616c6c61626c6520627960008201527f205a617070657200000000000000000000000000000000000000000000000000602082015250565b6000613226602783613087565b9150613231826131ca565b604082019050919050565b6000602082019050818103600083015261325581613219565b9050919050565b600081905092915050565b6000613273838561325c565b9350613280838584611dd2565b82840190509392505050565b6000613299828486613267565b91508190509392505050565b7f214153534552545f455100000000000000000000000000000000000000000000600082015250565b60006132db600a83613087565b91506132e6826132a5565b602082019050919050565b6000602082019050818103600083015261330a816132ce565b9050919050565b600061331c82612111565b915061332783612111565b925082820390508181111561333f5761333e613010565b5b92915050565b600061335082612111565b915061335b83612111565b925082820261336981612111565b915082820484148315176133805761337f613010565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006133c182612111565b91506133cc83612111565b9250826133dc576133db613387565b5b828204905092915050565b7f5a45524f2042414c414e43450000000000000000000000000000000000000000600082015250565b600061341d600c83613087565b9150613428826133e7565b602082019050919050565b6000602082019050818103600083015261344c81613410565b9050919050565b7f5a45524f205155414e5449545900000000000000000000000000000000000000600082015250565b6000613489600d83613087565b915061349482613453565b602082019050919050565b600060208201905081810360008301526134b88161347c565b9050919050565b7f4e4f205348415245530000000000000000000000000000000000000000000000600082015250565b60006134f5600983613087565b9150613500826134bf565b602082019050919050565b60006020820190508181036000830152613524816134e8565b9050919050565b6000819050919050565b600061355061354b61354684611f32565b61352b565b611f32565b9050919050565b600061356282613535565b9050919050565b600061357482613557565b9050919050565b61358481613569565b82525050565b600081519050919050565b600082825260208201905092915050565b60006135b18261358a565b6135bb8185613595565b93506135cb8185602086016123d7565b6135d481611ce4565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61361481611f52565b82525050565b6000613626838361360b565b60208301905092915050565b6000602082019050919050565b600061364a826135df565b61365481856135ea565b935061365f836135fb565b8060005b83811015613690578151613677888261361a565b975061368283613632565b925050600181019050613663565b5085935050505092915050565b600060a08301600083015184820360008601526136ba82826135a6565b915050602083015184820360208601526136d482826135a6565b915050604083015184820360408601526136ee828261363f565b91505060608301518482036060860152613708828261214f565b915050608083015161371d608086018261211b565b508091505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61375d81612816565b82525050565b604082016000820151613779600085018261360b565b50602082015161378c6020850182613754565b50505050565b600061379e8383613763565b60408301905092915050565b6000602082019050919050565b60006137c282613728565b6137cc8185613733565b93506137d783613744565b8060005b838110156138085781516137ef8882613792565b97506137fa836137aa565b9250506001810190506137db565b5085935050505092915050565b600060c08301600083015161382d600086018261211b565b506020830151613840602086018261211b565b506040830151848203604086015261385882826137b7565b915050606083015161386d606086018261211b565b506080830151613880608086018261211b565b5060a083015184820360a086015261389882826135a6565b9150508091505092915050565b6138ae81612b3b565b82525050565b6138bd81612b79565b82525050565b600060c0830160008301516138db60008601826138a5565b5060208301516138ee60208601826138b4565b506040830151613901604086018261211b565b506060830151613914606086018261211b565b506080830151613927608086018261211b565b5060a083015184820360a086015261393f828261363f565b9150508091505092915050565b60006060830160008301518482036000860152613969828261363f565b91505060208301518482036020860152613983828261363f565b9150506040830151848203604086015261399d828261363f565b9150508091505092915050565b6139b381612ddd565b82525050565b600060e0820190506139ce600083018a61357b565b81810360208301526139e0818961369d565b905081810360408301526139f48188613815565b90508181036060830152613a0881876138c3565b90508181036080830152613a1c81866138c3565b905081810360a0830152613a30818561394c565b9050613a3f60c08301846139aa565b98975050505050505050565b600081519050613a5a816122c5565b92915050565b60008060008060008060c08789031215613a7d57613a7c611c75565b5b6000613a8b89828a01613a4b565b9650506020613a9c89828a01613a4b565b9550506040613aad89828a01613a4b565b9450506060613abe89828a01613a4b565b9350506080613acf89828a01613a4b565b92505060a0613ae089828a01613a4b565b9150509295509295509295565b600082825260208201905092915050565b6000613b09826135df565b613b138185613aed565b9350613b1e836135fb565b8060005b83811015613b4f578151613b36888261361a565b9750613b4183613632565b925050600181019050613b22565b5085935050505092915050565b600060e0820190508181036000830152613b76818a61369d565b90508181036020830152613b8a8189613815565b9050613b996040830188612fa4565b8181036060830152613bab8187613afe565b90508181036080830152613bbf8186613afe565b905081810360a0830152613bd38185613afe565b9050613be260c08301846139aa565b98975050505050505050565b60008060408385031215613c0557613c04611c75565b5b6000613c1385828601613a4b565b9250506020613c2485828601613a4b565b9150509250929050565b6000613c39826123bb565b613c43818561325c565b9350613c538185602086016123d7565b80840191505092915050565b6000613c6b8284613c2e565b915081905092915050565b7f5f657865637574653a2076616c75652063616c6c20686173206e6f2076616c7560008201527f6520696e646963617465642e0000000000000000000000000000000000000000602082015250565b6000613cd2602c83613087565b9150613cdd82613c76565b604082019050919050565b60006020820190508181036000830152613d0181613cc5565b9050919050565b7f496e76616c69642063616c6c7479706500000000000000000000000000000000600082015250565b6000613d3e601083613087565b9150613d4982613d08565b602082019050919050565b60006020820190508181036000830152613d6d81613d31565b9050919050565b6000613d7f8261358a565b613d898185613087565b9350613d998185602086016123d7565b613da281611ce4565b840191505092915050565b6000606082019050613dc2600083018661229b565b613dcf6020830185612fa4565b8181036040830152613de18184613d74565b9050949350505050565b6000604082019050613e006000830185612fa4565b613e0d6020830184612fa4565b9392505050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000613e70603683613087565b9150613e7b82613e14565b604082019050919050565b60006020820190508181036000830152613e9f81613e63565b9050919050565b6000604082019050613ebb6000830185612fa4565b613ec8602083018461229b565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000613f17826123bb565b613f218185613efb565b9350613f318185602086016123d7565b613f3a81611ce4565b840191505092915050565b6000613f518383613f0c565b905092915050565b6000602082019050919050565b6000613f7182613ecf565b613f7b8185613eda565b935083602082028501613f8d85613eeb565b8060005b85811015613fc95784840389528151613faa8582613f45565b9450613fb583613f59565b925060208a01995050600181019050613f91565b50829750879550505050505092915050565b60006020820190508181036000830152613ff58184613f66565b905092915050565b600061400882612111565b915061401383612111565b92508261402357614022613387565b5b828206905092915050565b7f44796e616d6963207374617465207661726961626c6573206d7573742062652060008201527f61206d756c7469706c65206f6620333220627974657300000000000000000000602082015250565b600061408a603683613087565b91506140958261402e565b604082019050919050565b600060208201905081810360008301526140b98161407d565b9050919050565b7f537461746963207374617465207661726961626c6573206d757374206265203360008201527f3220627974657300000000000000000000000000000000000000000000000000602082015250565b600061411c602783613087565b9150614127826140c0565b604082019050919050565b6000602082019050818103600083015261414b8161410f565b9050919050565b600061416561416084611da1565b611d55565b90508281526020810184848401111561418157614180611d9c565b5b61418c8482856123d7565b509392505050565b600082601f8301126141a9576141a8611c7f565b5b81516141b9848260208601614152565b91505092915050565b60006141d56141d084611d70565b611d55565b905080838252602082019050602084028301858111156141f8576141f7611c89565b5b835b8181101561423f57805167ffffffffffffffff81111561421d5761421c611c7f565b5b80860161422a8982614194565b855260208501945050506020810190506141fa565b5050509392505050565b600082601f83011261425e5761425d611c7f565b5b815161426e8482602086016141c2565b91505092915050565b60006020828403121561428d5761428c611c75565b5b600082015167ffffffffffffffff8111156142ab576142aa611c7a565b5b6142b784828501614249565b91505092915050565b7f4f6e6c79206f6e652072657475726e2076616c7565207065726d69747465642060008201527f287661726961626c652900000000000000000000000000000000000000000000602082015250565b600061431c602a83613087565b9150614327826142c0565b604082019050919050565b6000602082019050818103600083015261434b8161430f565b9050919050565b7f52657475726e206174206c656173742033322062797465730000000000000000600082015250565b6000614388601883613087565b915061439382614352565b602082019050919050565b600060208201905081810360008301526143b78161437b565b9050919050565b6000815190506143cd81612ad1565b92915050565b6000602082840312156143e9576143e8611c75565b5b60006143f7848285016143be565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061445c602a83613087565b915061446782614400565b604082019050919050565b6000602082019050818103600083015261448b8161444f565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006144ee602683613087565b91506144f982614492565b604082019050919050565b6000602082019050818103600083015261451d816144e1565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061455a601d83613087565b915061456582614524565b602082019050919050565b600060208201905081810360008301526145898161454d565b9050919050565b600060208201905081810360008301526145aa8184613d74565b90509291505056fea2646970667358221220a7a6a9b2a852ea5432a1f2630ebd20fde618d154aad4308f4f9fc9706c26121264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "execute(bytes32[],bytes[],address[])": {
        "details": "Main endpoint to call",
        "params": {
          "commands": "- Weiroll code to execute",
          "state": "- Intiaial Weiroll state to use",
          "tokens": "- All tokens used by the Zap in order to calculate dust"
        }
      },
      "rawCall(address,uint256,bytes)": {
        "details": "Workaround for weiroll not supporting a way to make untyped calls.",
        "params": {
          "data": "- Data to send",
          "to": "- Address to call",
          "value": "- Amount of ETH to send"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}