import { IDict } from '../interfaces';
export declare class PoolTemplate {
    id: string;
    name: string;
    fullName: string;
    symbol: string;
    referenceAsset: string;
    address: string;
    lpToken: string;
    gauge: string;
    zap: string | null;
    sRewardContract: string | null;
    rewardContract: string | null;
    isPlain: boolean;
    isLending: boolean;
    isMeta: boolean;
    isCrypto: boolean;
    isFake: boolean;
    isFactory: boolean;
    isMetaFactory: boolean;
    basePool: string;
    metaCoinIdx: number;
    underlyingCoins: string[];
    wrappedCoins: string[];
    underlyingCoinAddresses: string[];
    wrappedCoinAddresses: string[];
    underlyingDecimals: number[];
    wrappedDecimals: number[];
    useLending: boolean[];
    inApi: boolean;
    wallet: {
        balances: (...addresses: string[] | string[][]) => Promise<IDict<IDict<string>> | IDict<string>>;
        lpTokenBalances: (...addresses: string[] | string[][]) => Promise<IDict<IDict<string>> | IDict<string>>;
        underlyingCoinBalances: (...addresses: string[] | string[][]) => Promise<IDict<IDict<string>> | IDict<string>>;
        wrappedCoinBalances: (...addresses: string[] | string[][]) => Promise<IDict<IDict<string>> | IDict<string>>;
        allCoinBalances: (...addresses: string[] | string[][]) => Promise<IDict<IDict<string>> | IDict<string>>;
    };
    constructor(id: string);
    private _pureCalcLpTokenAmount;
    private _calcLpTokenAmount;
    private statsWrappedBalances;
    private statsUnderlyingBalances;
    private calcLpTokenAmount;
    private calcLpTokenAmountWrapped;
    metaUnderlyingSeedAmounts(amount1: number | string): string[];
    cryptoSeedAmounts(amount1: number | string): Promise<string[]>;
    depositBalancedAmounts(): Promise<string[]>;
    depositExpected(amounts: (number | string)[]): Promise<string>;
    private _balancedAmountsWithSameValue;
    depositIsApproved(amounts: (number | string)[]): Promise<boolean>;
    private depositEstimateGas;
    deposit(amounts: (number | string)[], slippage?: number): Promise<string>;
    depositWrappedBalancedAmounts(): Promise<string[]>;
    depositWrappedExpected(amounts: (number | string)[]): Promise<string>;
    depositWrappedIsApproved(amounts: (number | string)[]): Promise<boolean>;
    depositWrapped(amounts: (number | string)[], slippage?: number): Promise<string>;
    withdrawExpected(lpTokenAmount: number | string): Promise<string[]>;
    withdrawIsApproved(lpTokenAmount: number | string): Promise<boolean>;
    withdraw(lpTokenAmount: number | string, slippage?: number): Promise<string>;
    withdrawWrappedExpected(lpTokenAmount: number | string): Promise<string[]>;
    withdrawWrapped(lpTokenAmount: number | string, slippage?: number): Promise<string>;
    withdrawImbalanceExpected(amounts: (number | string)[]): Promise<string>;
    withdrawImbalanceBonus(amounts: (number | string)[]): Promise<string>;
    withdrawImbalanceIsApproved(amounts: (number | string)[]): Promise<boolean>;
    private withdrawImbalanceEstimateGas;
    withdrawImbalance(amounts: (number | string)[], slippage?: number): Promise<string>;
    withdrawImbalanceWrappedExpected(amounts: (number | string)[]): Promise<string>;
    withdrawImbalanceWrappedBonus(amounts: (number | string)[]): Promise<string>;
    private withdrawImbalanceWrappedEstimateGas;
    withdrawImbalanceWrapped(amounts: (number | string)[], slippage?: number): Promise<string>;
    private _withdrawOneCoinExpected;
    withdrawOneCoinExpected(lpTokenAmount: number | string, coin: string | number): Promise<string>;
    withdrawOneCoinBonus(lpTokenAmount: number | string, coin: string | number): Promise<string>;
    withdrawOneCoinIsApproved(lpTokenAmount: number | string): Promise<boolean>;
    private withdrawOneCoinEstimateGas;
    withdrawOneCoin(lpTokenAmount: number | string, coin: string | number, slippage?: number): Promise<string>;
    private _withdrawOneCoinWrappedExpected;
    withdrawOneCoinWrappedExpected(lpTokenAmount: number | string, coin: string | number): Promise<string>;
    withdrawOneCoinWrappedBonus(lpTokenAmount: number | string, coin: string | number): Promise<string>;
    withdrawOneCoinWrapped(lpTokenAmount: number | string, coin: string | number, slippage?: number): Promise<string>;
    private walletBalances;
    private walletLpTokenBalances;
    private walletUnderlyingCoinBalances;
    private walletWrappedCoinBalances;
    private walletAllCoinBalances;
    private _userLpTotalBalance;
    userBalances(address?: string): Promise<string[]>;
    userWrappedBalances(address?: string): Promise<string[]>;
    userLiquidityUSD(address?: string): Promise<string>;
    statsTotalLiquidity: (useApi?: boolean) => Promise<string>;
    userShare(address?: string): Promise<{
        lpUser: string;
        lpTotal: string;
        lpShare: string;
        gaugeUser?: string;
        gaugeTotal?: string;
        gaugeShare?: string;
    }>;
    private _swapExpected;
    swapExpected(inputCoin: string | number, outputCoin: string | number, amount: number | string): Promise<string>;
    swapPriceImpact(inputCoin: string | number, outputCoin: string | number, amount: number | string): Promise<number>;
    private _swapContractAddress;
    swapIsApproved(inputCoin: string | number, amount: number | string): Promise<boolean>;
    swap(inputCoin: string | number, outputCoin: string | number, amount: number | string, slippage?: number): Promise<string>;
    private _swapWrappedExpected;
    swapWrappedExpected(inputCoin: string | number, outputCoin: string | number, amount: number | string): Promise<string>;
    swapWrappedPriceImpact(inputCoin: string | number, outputCoin: string | number, amount: number | string): Promise<number>;
    swapWrappedIsApproved(inputCoin: string | number, amount: number | string): Promise<boolean>;
    swapWrappedApprove(inputCoin: string | number, amount: number | string): Promise<string[]>;
    private swapWrappedEstimateGas;
    swapWrapped(inputCoin: string | number, outputCoin: string | number, amount: number | string, slippage?: number): Promise<string>;
    private _getCoinIdx;
    private _getRates;
    private _balances;
    private _underlyingPrices;
    private _wrappedPrices;
}
//# sourceMappingURL=PoolTemplate.d.ts.map