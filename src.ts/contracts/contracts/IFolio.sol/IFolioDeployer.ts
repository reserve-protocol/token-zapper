/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type GovRolesStruct = {
  existingTradeProposers: PromiseOrValue<string>[];
  tradeLaunchers: PromiseOrValue<string>[];
  vibesOfficers: PromiseOrValue<string>[];
};

export type GovRolesStructOutput = [string[], string[], string[]] & {
  existingTradeProposers: string[];
  tradeLaunchers: string[];
  vibesOfficers: string[];
};

export declare namespace IFolio {
  export type FolioBasicDetailsStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    assets: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
    initialShares: PromiseOrValue<BigNumberish>;
  };

  export type FolioBasicDetailsStructOutput = [
    string,
    string,
    string[],
    BigNumber[],
    BigNumber
  ] & {
    name: string;
    symbol: string;
    assets: string[];
    amounts: BigNumber[];
    initialShares: BigNumber;
  };

  export type FeeRecipientStruct = {
    recipient: PromiseOrValue<string>;
    portion: PromiseOrValue<BigNumberish>;
  };

  export type FeeRecipientStructOutput = [string, BigNumber] & {
    recipient: string;
    portion: BigNumber;
  };

  export type FolioAdditionalDetailsStruct = {
    tradeDelay: PromiseOrValue<BigNumberish>;
    auctionLength: PromiseOrValue<BigNumberish>;
    feeRecipients: IFolio.FeeRecipientStruct[];
    folioFee: PromiseOrValue<BigNumberish>;
    mintingFee: PromiseOrValue<BigNumberish>;
  };

  export type FolioAdditionalDetailsStructOutput = [
    BigNumber,
    BigNumber,
    IFolio.FeeRecipientStructOutput[],
    BigNumber,
    BigNumber
  ] & {
    tradeDelay: BigNumber;
    auctionLength: BigNumber;
    feeRecipients: IFolio.FeeRecipientStructOutput[];
    folioFee: BigNumber;
    mintingFee: BigNumber;
  };
}

export declare namespace IGovernanceDeployer {
  export type GovParamsStruct = {
    votingDelay: PromiseOrValue<BigNumberish>;
    votingPeriod: PromiseOrValue<BigNumberish>;
    proposalThreshold: PromiseOrValue<BigNumberish>;
    quorumPercent: PromiseOrValue<BigNumberish>;
    timelockDelay: PromiseOrValue<BigNumberish>;
    guardian: PromiseOrValue<string>;
  };

  export type GovParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    votingDelay: number;
    votingPeriod: number;
    proposalThreshold: BigNumber;
    quorumPercent: BigNumber;
    timelockDelay: BigNumber;
    guardian: string;
  };
}

export interface IFolioDeployerInterface extends utils.Interface {
  functions: {
    "deployFolio((string,string,address[],uint256[],uint256),(uint256,uint256,(address,uint96)[],uint256,uint256),address,address[],address[],address[])": FunctionFragment;
    "deployGovernedFolio(address,(string,string,address[],uint256[],uint256),(uint256,uint256,(address,uint96)[],uint256,uint256),(uint48,uint32,uint256,uint256,uint256,address),(uint48,uint32,uint256,uint256,uint256,address),(address[],address[],address[]))": FunctionFragment;
    "folioImplementation()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deployFolio"
      | "deployGovernedFolio"
      | "folioImplementation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deployFolio",
    values: [
      IFolio.FolioBasicDetailsStruct,
      IFolio.FolioAdditionalDetailsStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployGovernedFolio",
    values: [
      PromiseOrValue<string>,
      IFolio.FolioBasicDetailsStruct,
      IFolio.FolioAdditionalDetailsStruct,
      IGovernanceDeployer.GovParamsStruct,
      IGovernanceDeployer.GovParamsStruct,
      GovRolesStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "folioImplementation",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deployFolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployGovernedFolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "folioImplementation",
    data: BytesLike
  ): Result;

  events: {
    "FolioDeployed(address,address,address)": EventFragment;
    "GovernedFolioDeployed(address,address,address,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FolioDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernedFolioDeployed"): EventFragment;
}

export interface FolioDeployedEventObject {
  folioOwner: string;
  folio: string;
  folioAdmin: string;
}
export type FolioDeployedEvent = TypedEvent<
  [string, string, string],
  FolioDeployedEventObject
>;

export type FolioDeployedEventFilter = TypedEventFilter<FolioDeployedEvent>;

export interface GovernedFolioDeployedEventObject {
  stToken: string;
  folio: string;
  ownerGovernor: string;
  ownerTimelock: string;
  tradingGovernor: string;
  tradingTimelock: string;
}
export type GovernedFolioDeployedEvent = TypedEvent<
  [string, string, string, string, string, string],
  GovernedFolioDeployedEventObject
>;

export type GovernedFolioDeployedEventFilter =
  TypedEventFilter<GovernedFolioDeployedEvent>;

export interface IFolioDeployer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFolioDeployerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deployFolio(
      basicDetails: IFolio.FolioBasicDetailsStruct,
      additionalDetails: IFolio.FolioAdditionalDetailsStruct,
      owner: PromiseOrValue<string>,
      tradeProposers: PromiseOrValue<string>[],
      tradeLaunchers: PromiseOrValue<string>[],
      vibesOfficers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployGovernedFolio(
      stToken: PromiseOrValue<string>,
      basicDetails: IFolio.FolioBasicDetailsStruct,
      additionalDetails: IFolio.FolioAdditionalDetailsStruct,
      ownerGovParams: IGovernanceDeployer.GovParamsStruct,
      tradingGovParams: IGovernanceDeployer.GovParamsStruct,
      govRoles: GovRolesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    folioImplementation(overrides?: CallOverrides): Promise<[string]>;
  };

  deployFolio(
    basicDetails: IFolio.FolioBasicDetailsStruct,
    additionalDetails: IFolio.FolioAdditionalDetailsStruct,
    owner: PromiseOrValue<string>,
    tradeProposers: PromiseOrValue<string>[],
    tradeLaunchers: PromiseOrValue<string>[],
    vibesOfficers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployGovernedFolio(
    stToken: PromiseOrValue<string>,
    basicDetails: IFolio.FolioBasicDetailsStruct,
    additionalDetails: IFolio.FolioAdditionalDetailsStruct,
    ownerGovParams: IGovernanceDeployer.GovParamsStruct,
    tradingGovParams: IGovernanceDeployer.GovParamsStruct,
    govRoles: GovRolesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  folioImplementation(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    deployFolio(
      basicDetails: IFolio.FolioBasicDetailsStruct,
      additionalDetails: IFolio.FolioAdditionalDetailsStruct,
      owner: PromiseOrValue<string>,
      tradeProposers: PromiseOrValue<string>[],
      tradeLaunchers: PromiseOrValue<string>[],
      vibesOfficers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[string, string] & { folio_: string; folioAdmin_: string }>;

    deployGovernedFolio(
      stToken: PromiseOrValue<string>,
      basicDetails: IFolio.FolioBasicDetailsStruct,
      additionalDetails: IFolio.FolioAdditionalDetailsStruct,
      ownerGovParams: IGovernanceDeployer.GovParamsStruct,
      tradingGovParams: IGovernanceDeployer.GovParamsStruct,
      govRoles: GovRolesStruct,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        folio: string;
        proxyAdmin: string;
        ownerGovernor: string;
        ownerTimelock: string;
        tradingGovernor: string;
        tradingTimelock: string;
      }
    >;

    folioImplementation(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FolioDeployed(address,address,address)"(
      folioOwner?: PromiseOrValue<string> | null,
      folio?: PromiseOrValue<string> | null,
      folioAdmin?: null
    ): FolioDeployedEventFilter;
    FolioDeployed(
      folioOwner?: PromiseOrValue<string> | null,
      folio?: PromiseOrValue<string> | null,
      folioAdmin?: null
    ): FolioDeployedEventFilter;

    "GovernedFolioDeployed(address,address,address,address,address,address)"(
      stToken?: PromiseOrValue<string> | null,
      folio?: PromiseOrValue<string> | null,
      ownerGovernor?: null,
      ownerTimelock?: null,
      tradingGovernor?: null,
      tradingTimelock?: null
    ): GovernedFolioDeployedEventFilter;
    GovernedFolioDeployed(
      stToken?: PromiseOrValue<string> | null,
      folio?: PromiseOrValue<string> | null,
      ownerGovernor?: null,
      ownerTimelock?: null,
      tradingGovernor?: null,
      tradingTimelock?: null
    ): GovernedFolioDeployedEventFilter;
  };

  estimateGas: {
    deployFolio(
      basicDetails: IFolio.FolioBasicDetailsStruct,
      additionalDetails: IFolio.FolioAdditionalDetailsStruct,
      owner: PromiseOrValue<string>,
      tradeProposers: PromiseOrValue<string>[],
      tradeLaunchers: PromiseOrValue<string>[],
      vibesOfficers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployGovernedFolio(
      stToken: PromiseOrValue<string>,
      basicDetails: IFolio.FolioBasicDetailsStruct,
      additionalDetails: IFolio.FolioAdditionalDetailsStruct,
      ownerGovParams: IGovernanceDeployer.GovParamsStruct,
      tradingGovParams: IGovernanceDeployer.GovParamsStruct,
      govRoles: GovRolesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    folioImplementation(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deployFolio(
      basicDetails: IFolio.FolioBasicDetailsStruct,
      additionalDetails: IFolio.FolioAdditionalDetailsStruct,
      owner: PromiseOrValue<string>,
      tradeProposers: PromiseOrValue<string>[],
      tradeLaunchers: PromiseOrValue<string>[],
      vibesOfficers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployGovernedFolio(
      stToken: PromiseOrValue<string>,
      basicDetails: IFolio.FolioBasicDetailsStruct,
      additionalDetails: IFolio.FolioAdditionalDetailsStruct,
      ownerGovParams: IGovernanceDeployer.GovParamsStruct,
      tradingGovParams: IGovernanceDeployer.GovParamsStruct,
      govRoles: GovRolesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    folioImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
