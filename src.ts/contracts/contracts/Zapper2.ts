/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type ZapParamsStruct = {
  tokenIn: PromiseOrValue<string>;
  amountIn: PromiseOrValue<BigNumberish>;
  commands: PromiseOrValue<BytesLike>[];
  state: PromiseOrValue<BytesLike>[];
  tokens: PromiseOrValue<string>[];
  amountOut: PromiseOrValue<BigNumberish>;
  tokenOut: PromiseOrValue<string>;
  recipient: PromiseOrValue<string>;
};

export type ZapParamsStructOutput = [
  string,
  BigNumber,
  string[],
  string[],
  string[],
  BigNumber,
  string,
  string
] & {
  tokenIn: string;
  amountIn: BigNumber;
  commands: string[];
  state: string[];
  tokens: string[];
  amountOut: BigNumber;
  tokenOut: string;
  recipient: string;
};

export type ZapperOutputStruct = {
  dust: PromiseOrValue<BigNumberish>[];
  amountOut: PromiseOrValue<BigNumberish>;
  gasUsed: PromiseOrValue<BigNumberish>;
};

export type ZapperOutputStructOutput = [BigNumber[], BigNumber, BigNumber] & {
  dust: BigNumber[];
  amountOut: BigNumber;
  gasUsed: BigNumber;
};

export type GovRolesStruct = {
  existingTradeProposers: PromiseOrValue<string>[];
  tradeLaunchers: PromiseOrValue<string>[];
  vibesOfficers: PromiseOrValue<string>[];
};

export type GovRolesStructOutput = [string[], string[], string[]] & {
  existingTradeProposers: string[];
  tradeLaunchers: string[];
  vibesOfficers: string[];
};

export type DeployFolioConfigStruct = {
  deployer: PromiseOrValue<string>;
  basicDetails: IFolio.FolioBasicDetailsStruct;
  additionalDetails: IFolio.FolioAdditionalDetailsStruct;
  govRoles: GovRolesStruct;
  isGoverned: PromiseOrValue<boolean>;
  stToken: PromiseOrValue<string>;
  owner: PromiseOrValue<string>;
  ownerGovParams: IGovernanceDeployer.GovParamsStruct;
  tradingGovParams: IGovernanceDeployer.GovParamsStruct;
};

export type DeployFolioConfigStructOutput = [
  string,
  IFolio.FolioBasicDetailsStructOutput,
  IFolio.FolioAdditionalDetailsStructOutput,
  GovRolesStructOutput,
  boolean,
  string,
  string,
  IGovernanceDeployer.GovParamsStructOutput,
  IGovernanceDeployer.GovParamsStructOutput
] & {
  deployer: string;
  basicDetails: IFolio.FolioBasicDetailsStructOutput;
  additionalDetails: IFolio.FolioAdditionalDetailsStructOutput;
  govRoles: GovRolesStructOutput;
  isGoverned: boolean;
  stToken: string;
  owner: string;
  ownerGovParams: IGovernanceDeployer.GovParamsStructOutput;
  tradingGovParams: IGovernanceDeployer.GovParamsStructOutput;
};

export type ZapERC20ParamsStruct = {
  tokenIn: PromiseOrValue<string>;
  amountIn: PromiseOrValue<BigNumberish>;
  commands: PromiseOrValue<BytesLike>[];
  state: PromiseOrValue<BytesLike>[];
  tokens: PromiseOrValue<string>[];
  amountOut: PromiseOrValue<BigNumberish>;
  tokenOut: PromiseOrValue<string>;
};

export type ZapERC20ParamsStructOutput = [
  string,
  BigNumber,
  string[],
  string[],
  string[],
  BigNumber,
  string
] & {
  tokenIn: string;
  amountIn: BigNumber;
  commands: string[];
  state: string[];
  tokens: string[];
  amountOut: BigNumber;
  tokenOut: string;
};

export declare namespace IFolio {
  export type FolioBasicDetailsStruct = {
    name: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    assets: PromiseOrValue<string>[];
    amounts: PromiseOrValue<BigNumberish>[];
    initialShares: PromiseOrValue<BigNumberish>;
  };

  export type FolioBasicDetailsStructOutput = [
    string,
    string,
    string[],
    BigNumber[],
    BigNumber
  ] & {
    name: string;
    symbol: string;
    assets: string[];
    amounts: BigNumber[];
    initialShares: BigNumber;
  };

  export type FeeRecipientStruct = {
    recipient: PromiseOrValue<string>;
    portion: PromiseOrValue<BigNumberish>;
  };

  export type FeeRecipientStructOutput = [string, BigNumber] & {
    recipient: string;
    portion: BigNumber;
  };

  export type FolioAdditionalDetailsStruct = {
    auctionDelay: PromiseOrValue<BigNumberish>;
    auctionLength: PromiseOrValue<BigNumberish>;
    feeRecipients: IFolio.FeeRecipientStruct[];
    tvlFee: PromiseOrValue<BigNumberish>;
    mintFee: PromiseOrValue<BigNumberish>;
    mandate: PromiseOrValue<string>;
  };

  export type FolioAdditionalDetailsStructOutput = [
    BigNumber,
    BigNumber,
    IFolio.FeeRecipientStructOutput[],
    BigNumber,
    BigNumber,
    string
  ] & {
    auctionDelay: BigNumber;
    auctionLength: BigNumber;
    feeRecipients: IFolio.FeeRecipientStructOutput[];
    tvlFee: BigNumber;
    mintFee: BigNumber;
    mandate: string;
  };
}

export declare namespace IGovernanceDeployer {
  export type GovParamsStruct = {
    votingDelay: PromiseOrValue<BigNumberish>;
    votingPeriod: PromiseOrValue<BigNumberish>;
    proposalThreshold: PromiseOrValue<BigNumberish>;
    quorumPercent: PromiseOrValue<BigNumberish>;
    timelockDelay: PromiseOrValue<BigNumberish>;
    guardians: PromiseOrValue<string>[];
  };

  export type GovParamsStructOutput = [
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    string[]
  ] & {
    votingDelay: number;
    votingPeriod: number;
    proposalThreshold: BigNumber;
    quorumPercent: BigNumber;
    timelockDelay: BigNumber;
    guardians: string[];
  };
}

export interface Zapper2Interface extends utils.Interface {
  functions: {
    "zap((address,uint256,bytes32[],bytes[],address[],uint256,address,address))": FunctionFragment;
    "zapDeploy((address,uint256,bytes32[],bytes[],address[],uint256,address,address),(address,(string,string,address[],uint256[],uint256),(uint256,uint256,(address,uint96)[],uint256,uint256,string),(address[],address[],address[]),bool,address,address,(uint48,uint32,uint256,uint256,uint256,address[]),(uint48,uint32,uint256,uint256,uint256,address[])),bytes32)": FunctionFragment;
    "zapERC20((address,uint256,bytes32[],bytes[],address[],uint256,address))": FunctionFragment;
    "zapETH((address,uint256,bytes32[],bytes[],address[],uint256,address))": FunctionFragment;
    "zapToETH((address,uint256,bytes32[],bytes[],address[],uint256,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "zap"
      | "zapDeploy"
      | "zapERC20"
      | "zapETH"
      | "zapToETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "zap",
    values: [ZapParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "zapDeploy",
    values: [
      ZapParamsStruct,
      DeployFolioConfigStruct,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "zapERC20",
    values: [ZapERC20ParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "zapETH",
    values: [ZapERC20ParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "zapToETH",
    values: [ZapERC20ParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "zap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapDeploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapERC20", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "zapToETH", data: BytesLike): Result;

  events: {};
}

export interface Zapper2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: Zapper2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    zap(
      params: ZapParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapDeploy(
      params: ZapParamsStruct,
      config: DeployFolioConfigStruct,
      nonce: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapERC20(
      params: ZapERC20ParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapETH(
      params: ZapERC20ParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    zapToETH(
      params: ZapERC20ParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  zap(
    params: ZapParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapDeploy(
    params: ZapParamsStruct,
    config: DeployFolioConfigStruct,
    nonce: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapERC20(
    params: ZapERC20ParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapETH(
    params: ZapERC20ParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  zapToETH(
    params: ZapERC20ParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    zap(
      params: ZapParamsStruct,
      overrides?: CallOverrides
    ): Promise<ZapperOutputStructOutput>;

    zapDeploy(
      params: ZapParamsStruct,
      config: DeployFolioConfigStruct,
      nonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<ZapperOutputStructOutput>;

    zapERC20(
      params: ZapERC20ParamsStruct,
      overrides?: CallOverrides
    ): Promise<ZapperOutputStructOutput>;

    zapETH(
      params: ZapERC20ParamsStruct,
      overrides?: CallOverrides
    ): Promise<ZapperOutputStructOutput>;

    zapToETH(
      params: ZapERC20ParamsStruct,
      overrides?: CallOverrides
    ): Promise<ZapperOutputStructOutput>;
  };

  filters: {};

  estimateGas: {
    zap(
      params: ZapParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapDeploy(
      params: ZapParamsStruct,
      config: DeployFolioConfigStruct,
      nonce: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapERC20(
      params: ZapERC20ParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapETH(
      params: ZapERC20ParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    zapToETH(
      params: ZapERC20ParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    zap(
      params: ZapParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapDeploy(
      params: ZapParamsStruct,
      config: DeployFolioConfigStruct,
      nonce: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapERC20(
      params: ZapERC20ParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapETH(
      params: ZapERC20ParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    zapToETH(
      params: ZapERC20ParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
