{
  "address": "0xeA698DeEAD412456dbc488F8A9066326D98C3435",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedB",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "encoding",
          "type": "bytes"
        }
      ],
      "name": "addLiquidityV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expected",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expected",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "encodedRouterCall",
          "type": "bytes"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "contract IAerodromeRouter",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "encoding",
          "type": "bytes"
        }
      ],
      "name": "exactInputSingleV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedB",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "encoding",
          "type": "bytes"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3e262a3aa3f5731262936ddb1c01119477ac31945a7586189af04e9b54f4613",
  "receipt": {
    "to": null,
    "from": "0xF2d98377d80DADf725bFb97E91357F1d81384De2",
    "contractAddress": "0xeA698DeEAD412456dbc488F8A9066326D98C3435",
    "transactionIndex": 129,
    "gasUsed": "1398527",
    "logsBloom": "0x
    "blockHash": "0xc315503c7406873acc8d6b824fccff09813e29f6d2bafec07ef898fb86bd7e6f",
    "transactionHash": "0xd3e262a3aa3f5731262936ddb1c01119477ac31945a7586189af04e9b54f4613",
    "logs": [],
    "blockNumber": 23576677,
    "cumulativeGasUsed": "18371930",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "aede524c354efead279f962a7e66f0ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedB\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encoding\",\"type\":\"bytes\"}],\"name\":\"addLiquidityV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expected\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expected\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedRouterCall\",\"type\":\"bytes\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"contract IAerodromeRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encoding\",\"type\":\"bytes\"}],\"name\":\"exactInputSingleV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedB\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encoding\",\"type\":\"bytes\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Aerodrome.sol\":\"SlipstreamRouterCall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Aerodrome.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\ninterface IAerodromeRouter {\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n        address factory;\\n    }\\n\\n    error ETHTransferFailed();\\n    error Expired();\\n    error InsufficientAmount();\\n    error InsufficientAmountA();\\n    error InsufficientAmountB();\\n    error InsufficientAmountADesired();\\n    error InsufficientAmountBDesired();\\n    error InsufficientAmountAOptimal();\\n    error InsufficientLiquidity();\\n    error InsufficientOutputAmount();\\n    error InvalidAmountInForETHDeposit();\\n    error InvalidTokenInForETHDeposit();\\n    error InvalidPath();\\n    error InvalidRouteA();\\n    error InvalidRouteB();\\n    error OnlyWETH();\\n    error PoolDoesNotExist();\\n    error PoolFactoryDoesNotExist();\\n    error SameAddresses();\\n    error ZeroAddress();\\n\\n    /// @notice Address of FactoryRegistry.sol\\n    function factoryRegistry() external view returns (address);\\n\\n    /// @notice Address of Protocol PoolFactory.sol\\n    function defaultFactory() external view returns (address);\\n\\n    /// @dev Struct containing information necessary to zap in and out of pools\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           Stable or volatile pool\\n    /// @param factory          factory of pool\\n    /// @param amountOutMinA    Minimum amount expected from swap leg of zap via routesA\\n    /// @param amountOutMinB    Minimum amount expected from swap leg of zap via routesB\\n    /// @param amountAMin       Minimum amount of tokenA expected from liquidity leg of zap\\n    /// @param amountBMin       Minimum amount of tokenB expected from liquidity leg of zap\\n    struct Zap {\\n        address tokenA;\\n        address tokenB;\\n        bool stable;\\n        address factory;\\n        uint256 amountOutMinA;\\n        uint256 amountOutMinB;\\n        uint256 amountAMin;\\n        uint256 amountBMin;\\n    }\\n\\n    /// @notice Sort two tokens by which address value is less than the other\\n    /// @param tokenA   Address of token to sort\\n    /// @param tokenB   Address of token to sort\\n    /// @return token0  Lower address value between tokenA and tokenB\\n    /// @return token1  Higher address value between tokenA and tokenB\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    /// @notice Calculate the address of a pool by its' factory.\\n    ///         Used by all Router functions containing a `Route[]` or `_factory` argument.\\n    ///         Reverts if _factory is not approved by the FactoryRegistry\\n    /// @dev Returns a randomly generated address for a nonexistent pool\\n    /// @param tokenA   Address of token to query\\n    /// @param tokenB   Address of token to query\\n    /// @param stable   True if pool is stable, false if volatile\\n    /// @param _factory Address of factory which created the pool\\n    function poolFor(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory\\n    ) external view returns (address pool);\\n\\n    /// @notice Fetch and sort the reserves for a pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param _factory     Address of PoolFactory for tokenA and tokenB\\n    /// @return reserveA    Amount of reserves of the sorted token A\\n    /// @return reserveB    Amount of reserves of the sorted token B\\n    function getReserves(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory\\n    ) external view returns (uint256 reserveA, uint256 reserveB);\\n\\n    /// @notice Perform chained getAmountOut calculations on any number of pools\\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\\n\\n    // **** ADD LIQUIDITY ****\\n\\n    /// @notice Quote the amount deposited into a Pool\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param _factory         Address of PoolFactory for tokenA and tokenB\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\n    /// @return amountA         Amount of tokenA to actually deposit\\n    /// @return amountB         Amount of tokenB to actually deposit\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    /// @notice Quote the amount of liquidity removed from a Pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param _factory     Address of PoolFactory for tokenA and tokenB\\n    /// @param liquidity    Amount of liquidity to remove\\n    /// @return amountA     Amount of tokenA received\\n    /// @return amountB     Amount of tokenB received\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory,\\n        uint256 liquidity\\n    ) external view returns (uint256 amountA, uint256 amountB);\\n\\n    /// @notice Add liquidity of two tokens to a Pool\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\n    /// @param amountAMin       Minimum amount of tokenA to deposit\\n    /// @param amountBMin       Minimum amount of tokenB to deposit\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountA         Amount of tokenA to actually deposit\\n    /// @return amountB         Amount of tokenB to actually deposit\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    /// @notice Add liquidity of a token and WETH (transferred as ETH) to a Pool\\n    /// @param token                .\\n    /// @param stable               True if pool is stable, false if volatile\\n    /// @param amountTokenDesired   Amount of token desired to deposit\\n    /// @param amountTokenMin       Minimum amount of token to deposit\\n    /// @param amountETHMin         Minimum amount of ETH to deposit\\n    /// @param to                   Recipient of liquidity token\\n    /// @param deadline             Deadline to add liquidity\\n    /// @return amountToken         Amount of token to actually deposit\\n    /// @return amountETH           Amount of tokenETH to actually deposit\\n    /// @return liquidity           Amount of liquidity token returned from deposit\\n    function addLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    // **** REMOVE LIQUIDITY ****\\n\\n    /// @notice Remove liquidity of two tokens from a Pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param liquidity    Amount of liquidity to remove\\n    /// @param amountAMin   Minimum amount of tokenA to receive\\n    /// @param amountBMin   Minimum amount of tokenB to receive\\n    /// @param to           Recipient of tokens received\\n    /// @param deadline     Deadline to remove liquidity\\n    /// @return amountA     Amount of tokenA received\\n    /// @return amountB     Amount of tokenB received\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    /// @notice Remove liquidity of a token and WETH (returned as ETH) from a Pool\\n    /// @param token            .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param liquidity        Amount of liquidity to remove\\n    /// @param amountTokenMin   Minimum amount of token to receive\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountToken     Amount of token received\\n    /// @return amountETH       Amount of ETH received\\n    function removeLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    /// @notice Remove liquidity of a fee-on-transfer token and WETH (returned as ETH) from a Pool\\n    /// @param token            .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param liquidity        Amount of liquidity to remove\\n    /// @param amountTokenMin   Minimum amount of token to receive\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountETH       Amount of ETH received\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    // **** SWAP ****\\n\\n    /// @notice Swap one token for another\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /// @notice Swap ETH for a token\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    /// @notice Swap a token for WETH (returned as ETH)\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired ETH\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /// @notice Swap one token for another without slippage protection\\n    /// @return amounts     Array of amounts to swap  per route\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    function UNSAFE_swapExactTokensForTokens(\\n        uint256[] memory amounts,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n\\n    /// @notice Swap one token for another supporting fee-on-transfer tokens\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    /// @notice Swap ETH for a token supporting fee-on-transfer tokens\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    /// @notice Swap a token for WETH (returned as ETH) supporting fee-on-transfer tokens\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired ETH\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    /// @notice Zap a token A into a pool (B, C). (A can be equal to B or C).\\n    ///         Supports standard ERC20 tokens only (i.e. not fee-on-transfer tokens etc).\\n    ///         Slippage is required for the initial swap.\\n    ///         Additional slippage may be required when adding liquidity as the\\n    ///         price of the token may have changed.\\n    /// @param tokenIn      Token you are zapping in from (i.e. input token).\\n    /// @param amountInA    Amount of input token you wish to send down routesA\\n    /// @param amountInB    Amount of input token you wish to send down routesB\\n    /// @param zapInPool    Contains zap struct information. See Zap struct.\\n    /// @param routesA      Route used to convert input token to tokenA\\n    /// @param routesB      Route used to convert input token to tokenB\\n    /// @param to           Address you wish to mint liquidity to.\\n    /// @param stake        Auto-stake liquidity in corresponding gauge.\\n    /// @return liquidity   Amount of LP tokens created from zapping in.\\n    function zapIn(\\n        address tokenIn,\\n        uint256 amountInA,\\n        uint256 amountInB,\\n        Zap calldata zapInPool,\\n        Route[] calldata routesA,\\n        Route[] calldata routesB,\\n        address to,\\n        bool stake\\n    ) external payable returns (uint256 liquidity);\\n\\n    /// @notice Zap out a pool (B, C) into A.\\n    ///         Supports standard ERC20 tokens only (i.e. not fee-on-transfer tokens etc).\\n    ///         Slippage is required for the removal of liquidity.\\n    ///         Additional slippage may be required on the swap as the\\n    ///         price of the token may have changed.\\n    /// @param tokenOut     Token you are zapping out to (i.e. output token).\\n    /// @param liquidity    Amount of liquidity you wish to remove.\\n    /// @param zapOutPool   Contains zap struct information. See Zap struct.\\n    /// @param routesA      Route used to convert tokenA into output token.\\n    /// @param routesB      Route used to convert tokenB into output token.\\n    function zapOut(\\n        address tokenOut,\\n        uint256 liquidity,\\n        Zap calldata zapOutPool,\\n        Route[] calldata routesA,\\n        Route[] calldata routesB\\n    ) external;\\n\\n    /// @notice Used to generate params required for zapping in.\\n    ///         Zap in => remove liquidity then swap.\\n    ///         Apply slippage to expected swap values to account for changes in reserves in between.\\n    /// @dev Output token refers to the token you want to zap in from.\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           .\\n    /// @param _factory         .\\n    /// @param amountInA        Amount of input token you wish to send down routesA\\n    /// @param amountInB        Amount of input token you wish to send down routesB\\n    /// @param routesA          Route used to convert input token to tokenA\\n    /// @param routesB          Route used to convert input token to tokenB\\n    /// @return amountOutMinA   Minimum output expected from swapping input token to tokenA.\\n    /// @return amountOutMinB   Minimum output expected from swapping input token to tokenB.\\n    /// @return amountAMin      Minimum amount of tokenA expected from depositing liquidity.\\n    /// @return amountBMin      Minimum amount of tokenB expected from depositing liquidity.\\n    function generateZapInParams(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory,\\n        uint256 amountInA,\\n        uint256 amountInB,\\n        Route[] calldata routesA,\\n        Route[] calldata routesB\\n    ) external view returns (uint256 amountOutMinA, uint256 amountOutMinB, uint256 amountAMin, uint256 amountBMin);\\n\\n    /// @notice Used to generate params required for zapping out.\\n    ///         Zap out => swap then add liquidity.\\n    ///         Apply slippage to expected liquidity values to account for changes in reserves in between.\\n    /// @dev Output token refers to the token you want to zap out of.\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           .\\n    /// @param _factory         .\\n    /// @param liquidity        Amount of liquidity being zapped out of into a given output token.\\n    /// @param routesA          Route used to convert tokenA into output token.\\n    /// @param routesB          Route used to convert tokenB into output token.\\n    /// @return amountOutMinA   Minimum output expected from swapping tokenA into output token.\\n    /// @return amountOutMinB   Minimum output expected from swapping tokenB into output token.\\n    /// @return amountAMin      Minimum amount of tokenA expected from withdrawing liquidity.\\n    /// @return amountBMin      Minimum amount of tokenB expected from withdrawing liquidity.\\n    function generateZapOutParams(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory,\\n        uint256 liquidity,\\n        Route[] calldata routesA,\\n        Route[] calldata routesB\\n    ) external view returns (uint256 amountOutMinA, uint256 amountOutMinB, uint256 amountAMin, uint256 amountBMin);\\n\\n    /// @notice Used by zapper to determine appropriate ratio of A to B to deposit liquidity. Assumes stable pool.\\n    /// @dev Returns stable liquidity ratio of B to (A + B).\\n    ///      E.g. if ratio is 0.4, it means there is more of A than there is of B.\\n    ///      Therefore you should deposit more of token A than B.\\n    /// @param tokenA   tokenA of stable pool you are zapping into.\\n    /// @param tokenB   tokenB of stable pool you are zapping into.\\n    /// @param factory  Factory that created stable pool.\\n    /// @return ratio   Ratio of token0 to token1 required to deposit into zap.\\n    function quoteStableLiquidityRatio(\\n        address tokenA,\\n        address tokenB,\\n        address factory\\n    ) external view returns (uint256 ratio);\\n}\\n\\ninterface IAerodromePool {\\n    error DepositsNotEqual();\\n    error BelowMinimumK();\\n    error FactoryAlreadySet();\\n    error InsufficientLiquidity();\\n    error InsufficientLiquidityMinted();\\n    error InsufficientLiquidityBurned();\\n    error InsufficientOutputAmount();\\n    error InsufficientInputAmount();\\n    error IsPaused();\\n    error InvalidTo();\\n    error K();\\n    error NotEmergencyCouncil();\\n\\n    event Fees(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, address indexed to, uint256 amount0, uint256 amount1);\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out\\n    );\\n    event Sync(uint256 reserve0, uint256 reserve1);\\n    event Claim(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1);\\n\\n    // Struct to capture time period obervations every 30 minutes, used for local oracles\\n    struct Observation {\\n        uint256 timestamp;\\n        uint256 reserve0Cumulative;\\n        uint256 reserve1Cumulative;\\n    }\\n\\n    /// @notice Returns the decimal (dec), reserves (r), stable (st), and tokens (t) of token0 and token1\\n    function metadata()\\n        external\\n        view\\n        returns (uint256 dec0, uint256 dec1, uint256 r0, uint256 r1, bool st, address t0, address t1);\\n\\n    /// @notice Claim accumulated but unclaimed fees (claimable0 and claimable1)\\n    function claimFees() external returns (uint256, uint256);\\n\\n    /// @notice Returns [token0, token1]\\n    function tokens() external view returns (address, address);\\n\\n    /// @notice Address of token in the pool with the lower address value\\n    function token0() external view returns (address);\\n\\n    /// @notice Address of token in the poool with the higher address value\\n    function token1() external view returns (address);\\n\\n    /// @notice Address of linked PoolFees.sol\\n    function poolFees() external view returns (address);\\n\\n    /// @notice Address of PoolFactory that created this contract\\n    function factory() external view returns (address);\\n\\n    /// @notice Capture oracle reading every 30 minutes (1800 seconds)\\n    function periodSize() external view returns (uint256);\\n\\n    /// @notice Amount of token0 in pool\\n    function reserve0() external view returns (uint256);\\n\\n    /// @notice Amount of token1 in pool\\n    function reserve1() external view returns (uint256);\\n\\n    /// @notice Timestamp of last update to pool\\n    function blockTimestampLast() external view returns (uint256);\\n\\n    /// @notice Cumulative of reserve0 factoring in time elapsed\\n    function reserve0CumulativeLast() external view returns (uint256);\\n\\n    /// @notice Cumulative of reserve1 factoring in time elapsed\\n    function reserve1CumulativeLast() external view returns (uint256);\\n\\n    /// @notice Accumulated fees of token0 (global)\\n    function index0() external view returns (uint256);\\n\\n    /// @notice Accumulated fees of token1 (global)\\n    function index1() external view returns (uint256);\\n\\n    /// @notice Get an LP's relative index0 to index0\\n    function supplyIndex0(address) external view returns (uint256);\\n\\n    /// @notice Get an LP's relative index1 to index1\\n    function supplyIndex1(address) external view returns (uint256);\\n\\n    /// @notice Amount of unclaimed, but claimable tokens from fees of token0 for an LP\\n    function claimable0(address) external view returns (uint256);\\n\\n    /// @notice Amount of unclaimed, but claimable tokens from fees of token1 for an LP\\n    function claimable1(address) external view returns (uint256);\\n\\n    /// @notice Returns the value of K in the Pool, based on its reserves.\\n    function getK() external returns (uint256);\\n\\n    /// @notice Set pool name\\n    ///         Only callable by Voter.emergencyCouncil()\\n    /// @param __name String of new name\\n    function setName(string calldata __name) external;\\n\\n    /// @notice Set pool symbol\\n    ///         Only callable by Voter.emergencyCouncil()\\n    /// @param __symbol String of new symbol\\n    function setSymbol(string calldata __symbol) external;\\n\\n    /// @notice Get the number of observations recorded\\n    function observationLength() external view returns (uint256);\\n\\n    /// @notice Get the value of the most recent observation\\n    function lastObservation() external view returns (Observation memory);\\n\\n    /// @notice True if pool is stable, false if volatile\\n    function stable() external view returns (bool);\\n\\n    /// @notice Produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\\n    function currentCumulativePrices()\\n        external\\n        view\\n        returns (uint256 reserve0Cumulative, uint256 reserve1Cumulative, uint256 blockTimestamp);\\n\\n    /// @notice Provides twap price with user configured granularity, up to the full window size\\n    /// @param tokenIn .\\n    /// @param amountIn .\\n    /// @param granularity .\\n    /// @return amountOut .\\n    function quote(address tokenIn, uint256 amountIn, uint256 granularity) external view returns (uint256 amountOut);\\n\\n    /// @notice Returns a memory set of TWAP prices\\n    ///         Same as calling sample(tokenIn, amountIn, points, 1)\\n    /// @param tokenIn .\\n    /// @param amountIn .\\n    /// @param points Number of points to return\\n    /// @return Array of TWAP prices\\n    function prices(address tokenIn, uint256 amountIn, uint256 points) external view returns (uint256[] memory);\\n\\n    /// @notice Same as prices with with an additional window argument.\\n    ///         Window = 2 means 2 * 30min (or 1 hr) between observations\\n    /// @param tokenIn .\\n    /// @param amountIn .\\n    /// @param points .\\n    /// @param window .\\n    /// @return Array of TWAP prices\\n    function sample(\\n        address tokenIn,\\n        uint256 amountIn,\\n        uint256 points,\\n        uint256 window\\n    ) external view returns (uint256[] memory);\\n\\n    /// @notice This low-level function should be called from a contract which performs important safety checks\\n    /// @param amount0Out   Amount of token0 to send to `to`\\n    /// @param amount1Out   Amount of token1 to send to `to`\\n    /// @param to           Address to recieve the swapped output\\n    /// @param data         Additional calldata for flashloans\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n\\n    /// @notice This low-level function should be called from a contract which performs important safety checks\\n    ///         standard uniswap v2 implementation\\n    /// @param to Address to receive token0 and token1 from burning the pool token\\n    /// @return amount0 Amount of token0 returned\\n    /// @return amount1 Amount of token1 returned\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice This low-level function should be called by addLiquidity functions in Router.sol, which performs important safety checks\\n    ///         standard uniswap v2 implementation\\n    /// @param to           Address to receive the minted LP token\\n    /// @return liquidity   Amount of LP token minted\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    /// @notice Update reserves and, on the first call per block, price accumulators\\n    /// @return _reserve0 .\\n    /// @return _reserve1 .\\n    /// @return _blockTimestampLast .\\n    function getReserves() external view returns (uint256 _reserve0, uint256 _reserve1, uint256 _blockTimestampLast);\\n\\n    /// @notice Get the amount of tokenOut given the amount of tokenIn\\n    /// @param amountIn Amount of token in\\n    /// @param tokenIn  Address of token\\n    /// @return Amount out\\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\\n\\n    /// @notice Force balances to match reserves\\n    /// @param to Address to receive any skimmed rewards\\n    function skim(address to) external;\\n\\n    /// @notice Force reserves to match balances\\n    function sync() external;\\n\\n    /// @notice Called on pool creation by PoolFactory\\n    /// @param _token0 Address of token0\\n    /// @param _token1 Address of token1\\n    /// @param _stable True if stable, false if volatile\\n    function initialize(address _token0, address _token1, bool _stable) external;\\n}\\n\\ninterface IMixedRouteQuoterV1 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return v3SqrtPriceX96AfterList List of the sqrt price after the swap for each v3 pool in the path, 0 for v2 pools\\n    /// @return v3InitializedTicksCrossedList List of the initialized ticks that the swap crossed for each v3 pool in the path, 0 for v2 pools\\n    /// @return v3SwapGasEstimate The estimate of the gas that the v3 swaps in the path consume\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory v3SqrtPriceX96AfterList,\\n            uint32[] memory v3InitializedTicksCrossedList,\\n            uint256 v3SwapGasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleV3Params {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        int24 tickSpacing;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct QuoteExactInputSingleV2Params {\\n        address tokenIn;\\n        address tokenOut;\\n        bool stable;\\n        uint256 amountIn;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// tickSpacing The tickSpacing of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingleV3(QuoteExactInputSingleV3Params memory params)\\n        external\\n        returns (uint256 amountOut, uint160 sqrtPriceX96After, uint32 initializedTicksCrossed, uint256 gasEstimate);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single V2 pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleV2Params`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// stable The boolean representing volatile (false) or stable (true)\\n    /// amountIn The desired input amount\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingleV2(QuoteExactInputSingleV2Params memory params)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @dev ExactOutput swaps are not supported by this new Quoter which is specialized for supporting routes\\n    ///      crossing both V2 liquidity pairs and V3 pools.\\n    /// @deprecated quoteExactOutputSingle and exactOutput. Use QuoterV2 instead.\\n}\\n\\ninterface IAerodromeFactory {\\n    event SetFeeManager(address feeManager);\\n    event SetPauser(address pauser);\\n    event SetPauseState(bool state);\\n    event SetVoter(address voter);\\n    event PoolCreated(address indexed token0, address indexed token1, bool indexed stable, address pool, uint256);\\n    event SetCustomFee(address indexed pool, uint256 fee);\\n\\n    error FeeInvalid();\\n    error FeeTooHigh();\\n    error InvalidPool();\\n    error NotFeeManager();\\n    error NotPauser();\\n    error NotVoter();\\n    error PoolAlreadyExists();\\n    error SameAddress();\\n    error ZeroFee();\\n    error ZeroAddress();\\n\\n    /// @notice returns the number of pools created from this factory\\n    function allPoolsLength() external view returns (uint256);\\n\\n    /// @notice Is a valid pool created by this factory.\\n    /// @param .\\n    function isPool(address pool) external view returns (bool);\\n\\n    /// @notice Support for v3-style pools which wraps around getPool(tokenA,tokenB,stable)\\n    /// @dev fee is converted to stable boolean.\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param fee  1 if stable, 0 if volatile, else returns address(0)\\n    function getPool(address tokenA, address tokenB, int24 fee) external view returns (address);\\n\\n    /// @dev Only called once to set to Voter.sol - Voter does not have a function\\n    ///      to call this contract method, so once set it's immutable.\\n    ///      This also follows convention of setVoterAndDistributor() in VotingEscrow.sol\\n    /// @param _voter .\\n    function setVoter(address _voter) external;\\n\\n    function setPauser(address _pauser) external;\\n\\n    function setPauseState(bool _state) external;\\n\\n    function setFeeManager(address _feeManager) external;\\n\\n    /// @notice Set default fee for stable and volatile pools.\\n    /// @dev Throws if higher than maximum fee.\\n    ///      Throws if fee is zero.\\n    /// @param _stable Stable or volatile pool.\\n    /// @param _fee .\\n    function setFee(bool _stable, uint256 _fee) external;\\n\\n    /// @notice Set overriding fee for a pool from the default\\n    /// @dev A custom fee of zero means the default fee will be used.\\n    function setCustomFee(address _pool, uint256 _fee) external;\\n\\n    /// @notice Returns fee for a pool, as custom fees are possible.\\n    function getFee(address _pool, bool _stable) external view returns (uint256);\\n\\n    /// @notice Create a pool given two tokens and if they're stable/volatile\\n    /// @dev token order does not matter\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param stable .\\n    function createPool(address tokenA, address tokenB, bool stable) external returns (address pool);\\n\\n    /// @notice Support for v3-style pools which wraps around createPool(tokena,tokenB,stable)\\n    /// @dev fee is converted to stable boolean\\n    /// @dev token order does not matter\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param fee 1 if stable, 0 if volatile, else revert\\n    function createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function voter() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n}\\n\\nstruct SwapLp {\\n  address lp;\\n  int24 poolType;\\n  address token0;\\n  address token1;\\n  address factory;\\n  uint256 poolFee;\\n}\\n\\ninterface IAerodromeSugar {\\n  function forSwaps(uint256 limit, uint256 offset) external view returns (SwapLp[]memory);\\n}\\n\\n\\n\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        int24 tickSpacing;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\ncontract SlipstreamRouterCall {\\n    function exactInputSingle(\\n        uint256 amountIn,\\n        uint256 _expected,\\n        address router,\\n        bytes calldata encodedRouterCall\\n    ) external returns (uint256) {\\n        (ISwapRouter.ExactInputSingleParams memory decodedCall) = abi.decode(\\n            encodedRouterCall,\\n            (ISwapRouter.ExactInputSingleParams)\\n        );\\n        decodedCall.amountIn = amountIn;\\n        decodedCall.amountOutMinimum = _expected;\\n        return ISwapRouter(router).exactInputSingle(decodedCall);\\n    }\\n\\n    function exactInput(\\n        uint256 amountIn,\\n        uint256 _expected,\\n        address router,\\n        address recipient,\\n        bytes memory path\\n    ) external returns (uint256) {\\n        ISwapRouter.ExactInputParams memory decodedCall = ISwapRouter.ExactInputParams({\\n            path: path,\\n            recipient: recipient,\\n            deadline: block.timestamp + 1000,\\n            amountIn: amountIn,\\n            amountOutMinimum: _expected\\n        });\\n        decodedCall.amountIn = amountIn;\\n        decodedCall.amountOutMinimum = _expected;\\n        return ISwapRouter(router).exactInput(decodedCall);\\n    }\\n\\n\\n    struct State {\\n        uint256 amountA;\\n        uint256 amountB;\\n        uint256 expectedA;\\n        uint256 expectedB;\\n\\n        address tokenA;\\n        address tokenB;\\n        bool stable;\\n        address dest;\\n    }\\n\\n    function addLiquidityV2(\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 expectedA,\\n        uint256 expectedB,\\n        bytes memory encoding\\n    ) external returns (uint256 amountOut) {\\n        State memory state = State(amountA, amountB, expectedA, expectedB, address(0), address(0), false, address(0));\\n\\n        (address tokenA, address tokenB, bool stable, address dest, address router) = abi.decode(\\n            encoding,\\n            (address, address, bool, address, address)\\n        );\\n\\n        state.tokenA = tokenA;\\n        state.tokenB = tokenB;\\n        state.stable = stable;\\n        state.dest = dest;\\n        \\n        {\\n            (, , uint256 liquidity) = IAerodromeRouter(router).addLiquidity(\\n                state.tokenA,\\n                state.tokenB,\\n                state.stable,\\n                state.amountA,\\n                state.amountB,\\n                state.expectedA,\\n                state.expectedB,\\n                state.dest,\\n                block.timestamp + 1000\\n            );\\n\\n            return liquidity;\\n        }\\n    }\\n\\n    function removeLiquidity(\\n        uint256 amount,\\n        uint256 expectedA,\\n        uint256 expectedB,\\n        bytes memory encoding\\n    ) external {\\n        (address tokenA, address tokenB, bool stable, address dest, address router, uint256 deadline) = abi.decode(\\n            encoding,\\n            (address, address, bool, address, address, uint256)\\n        );\\n        IAerodromeRouter(router).removeLiquidity(\\n            tokenA,\\n            tokenB,\\n            stable,\\n            amount,\\n            expectedA,\\n            expectedB,\\n            dest,\\n            deadline\\n        );\\n    }\\n\\n\\n    function exactInputSingleV2(\\n        uint256 amountIn,\\n        uint256 expected,\\n        IAerodromeRouter router,\\n        address recipient,\\n        bytes memory encoding\\n    ) external returns (uint256 amountOut) {\\n        (address tokenIn, address tokenOut, bool stable, address factory) = abi.decode(\\n            encoding,\\n            (address, address, bool, address)\\n        );\\n        IAerodromeRouter.Route[] memory routes = new IAerodromeRouter.Route[](1);\\n\\n        routes[0] = IAerodromeRouter.Route({\\n            from: tokenIn,\\n            to: tokenOut,\\n            stable: stable,\\n            factory: factory\\n        });\\n        \\n        uint[] memory out = router.swapExactTokensForTokens(\\n            amountIn,\\n            expected,\\n            routes,\\n            recipient,\\n            block.timestamp + 1000\\n        );\\n\\n        return out[out.length - 1];\\n    }\\n}\",\"keccak256\":\"0x6583390df94963f33bf165c4196567578f0262a92f1a2b6f46b377baf2cd5714\",\"license\":\"BlueOak-1.0.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061185b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634ac6d1581461005c5780634d49dcf8146100785780636919e674146100a8578063b908e456146100d8578063bdd613d314610108575b600080fd5b6100766004803603810190610071919061099a565b610138565b005b610092600480360381019061008d9190610ab9565b6101f8565b60405161009f9190610b5f565b60405180910390f35b6100c260048036038101906100bd9190610bda565b6103cc565b6040516100cf9190610b5f565b60405180910390f35b6100f260048036038101906100ed9190610c62565b61047c565b6040516100ff9190610b5f565b60405180910390f35b610122600480360381019061011d9190610cf9565b6106b3565b60405161012f9190610b5f565b60405180910390f35b600080600080600080868060200190518101906101559190610e1b565b9550955095509550955095508173ffffffffffffffffffffffffffffffffffffffff16630dede6c48787878e8e8e8a896040518963ffffffff1660e01b81526004016101a8989796959493929190610ec6565b60408051808303816000875af11580156101c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea9190610f44565b505050505050505050505050565b6000806000806000858060200190518101906102149190610f84565b93509350935093506000600167ffffffffffffffff8111156102395761023861086f565b5b60405190808252806020026020018201604052801561027257816020015b61025f61079e565b8152602001906001900390816102575790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184151581526020018373ffffffffffffffffffffffffffffffffffffffff16815250816000815181106102ee576102ed610feb565b5b602002602001018190525060008973ffffffffffffffffffffffffffffffffffffffff1663cac88ea98d8d858d6103e8426103299190611049565b6040518663ffffffff1660e01b815260040161034995949392919061119f565b6000604051808303816000875af1158015610368573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061039191906112bc565b905080600182516103a29190611305565b815181106103b3576103b2610feb565b5b6020026020010151965050505050505095945050505050565b60008083838101906103de919061146d565b9050868160a0018181525050858160c00181815250508473ffffffffffffffffffffffffffffffffffffffff1663a026383e826040518263ffffffff1660e01b815260040161042d919061156a565b6020604051808303816000875af115801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190611586565b91505095945050505050565b600080604051806101000160405280888152602001878152602001868152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060008060008060008780602001905181019061051f91906115b3565b9450945094509450945084866080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838660a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828660c0019015159081151581525050818660e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008173ffffffffffffffffffffffffffffffffffffffff16635a47ddc388608001518960a001518a60c001518b600001518c602001518d604001518e606001518f60e001516103e8426106359190611049565b6040518a63ffffffff1660e01b81526004016106599998979695949392919061162e565b6060604051808303816000875af1158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c91906116bb565b925050508097505050505050505095945050505050565b6000806040518060a001604052808481526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016103e8426106f19190611049565b815260200188815260200187815250905086816060018181525050858160800181815250508473ffffffffffffffffffffffffffffffffffffffff1663c04b8d59826040518263ffffffff1660e01b815260040161074f9190611803565b6020604051808303816000875af115801561076e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107929190611586565b91505095945050505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108318161081e565b811461083c57600080fd5b50565b60008135905061084e81610828565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108a78261085e565b810181811067ffffffffffffffff821117156108c6576108c561086f565b5b80604052505050565b60006108d961080a565b90506108e5828261089e565b919050565b600067ffffffffffffffff8211156109055761090461086f565b5b61090e8261085e565b9050602081019050919050565b82818337600083830152505050565b600061093d610938846108ea565b6108cf565b90508281526020810184848401111561095957610958610859565b5b61096484828561091b565b509392505050565b600082601f83011261098157610980610854565b5b813561099184826020860161092a565b91505092915050565b600080600080608085870312156109b4576109b3610814565b5b60006109c28782880161083f565b94505060206109d38782880161083f565b93505060406109e48782880161083f565b925050606085013567ffffffffffffffff811115610a0557610a04610819565b5b610a118782880161096c565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4882610a1d565b9050919050565b6000610a5a82610a3d565b9050919050565b610a6a81610a4f565b8114610a7557600080fd5b50565b600081359050610a8781610a61565b92915050565b610a9681610a3d565b8114610aa157600080fd5b50565b600081359050610ab381610a8d565b92915050565b600080600080600060a08688031215610ad557610ad4610814565b5b6000610ae38882890161083f565b9550506020610af48882890161083f565b9450506040610b0588828901610a78565b9350506060610b1688828901610aa4565b925050608086013567ffffffffffffffff811115610b3757610b36610819565b5b610b438882890161096c565b9150509295509295909350565b610b598161081e565b82525050565b6000602082019050610b746000830184610b50565b92915050565b600080fd5b600080fd5b60008083601f840112610b9a57610b99610854565b5b8235905067ffffffffffffffff811115610bb757610bb6610b7a565b5b602083019150836001820283011115610bd357610bd2610b7f565b5b9250929050565b600080600080600060808688031215610bf657610bf5610814565b5b6000610c048882890161083f565b9550506020610c158882890161083f565b9450506040610c2688828901610aa4565b935050606086013567ffffffffffffffff811115610c4757610c46610819565b5b610c5388828901610b84565b92509250509295509295909350565b600080600080600060a08688031215610c7e57610c7d610814565b5b6000610c8c8882890161083f565b9550506020610c9d8882890161083f565b9450506040610cae8882890161083f565b9350506060610cbf8882890161083f565b925050608086013567ffffffffffffffff811115610ce057610cdf610819565b5b610cec8882890161096c565b9150509295509295909350565b600080600080600060a08688031215610d1557610d14610814565b5b6000610d238882890161083f565b9550506020610d348882890161083f565b9450506040610d4588828901610aa4565b9350506060610d5688828901610aa4565b925050608086013567ffffffffffffffff811115610d7757610d76610819565b5b610d838882890161096c565b9150509295509295909350565b6000610d9b82610a1d565b9050919050565b610dab81610d90565b8114610db657600080fd5b50565b600081519050610dc881610da2565b92915050565b60008115159050919050565b610de381610dce565b8114610dee57600080fd5b50565b600081519050610e0081610dda565b92915050565b600081519050610e1581610828565b92915050565b60008060008060008060c08789031215610e3857610e37610814565b5b6000610e4689828a01610db9565b9650506020610e5789828a01610db9565b9550506040610e6889828a01610df1565b9450506060610e7989828a01610db9565b9350506080610e8a89828a01610db9565b92505060a0610e9b89828a01610e06565b9150509295509295509295565b610eb181610a3d565b82525050565b610ec081610dce565b82525050565b600061010082019050610edc600083018b610ea8565b610ee9602083018a610ea8565b610ef66040830189610eb7565b610f036060830188610b50565b610f106080830187610b50565b610f1d60a0830186610b50565b610f2a60c0830185610ea8565b610f3760e0830184610b50565b9998505050505050505050565b60008060408385031215610f5b57610f5a610814565b5b6000610f6985828601610e06565b9250506020610f7a85828601610e06565b9150509250929050565b60008060008060808587031215610f9e57610f9d610814565b5b6000610fac87828801610db9565b9450506020610fbd87828801610db9565b9350506040610fce87828801610df1565b9250506060610fdf87828801610db9565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110548261081e565b915061105f8361081e565b92508282019050808211156110775761107661101a565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6110b281610a3d565b82525050565b6110c181610dce565b82525050565b6080820160008201516110dd60008501826110a9565b5060208201516110f060208501826110a9565b50604082015161110360408501826110b8565b50606082015161111660608501826110a9565b50505050565b600061112883836110c7565b60808301905092915050565b6000602082019050919050565b600061114c8261107d565b6111568185611088565b935061116183611099565b8060005b83811015611192578151611179888261111c565b975061118483611134565b925050600181019050611165565b5085935050505092915050565b600060a0820190506111b46000830188610b50565b6111c16020830187610b50565b81810360408301526111d38186611141565b90506111e26060830185610ea8565b6111ef6080830184610b50565b9695505050505050565b600067ffffffffffffffff8211156112145761121361086f565b5b602082029050602081019050919050565b6000611238611233846111f9565b6108cf565b9050808382526020820190506020840283018581111561125b5761125a610b7f565b5b835b8181101561128457806112708882610e06565b84526020840193505060208101905061125d565b5050509392505050565b600082601f8301126112a3576112a2610854565b5b81516112b3848260208601611225565b91505092915050565b6000602082840312156112d2576112d1610814565b5b600082015167ffffffffffffffff8111156112f0576112ef610819565b5b6112fc8482850161128e565b91505092915050565b60006113108261081e565b915061131b8361081e565b92508282039050818111156113335761133261101a565b5b92915050565b600080fd5b60008160020b9050919050565b6113548161133e565b811461135f57600080fd5b50565b6000813590506113718161134b565b92915050565b61138081610a1d565b811461138b57600080fd5b50565b60008135905061139d81611377565b92915050565b600061010082840312156113ba576113b9611339565b5b6113c56101006108cf565b905060006113d584828501610aa4565b60008301525060206113e984828501610aa4565b60208301525060406113fd84828501611362565b604083015250606061141184828501610aa4565b60608301525060806114258482850161083f565b60808301525060a06114398482850161083f565b60a08301525060c061144d8482850161083f565b60c08301525060e06114618482850161138e565b60e08301525092915050565b6000610100828403121561148457611483610814565b5b6000611492848285016113a3565b91505092915050565b6114a48161133e565b82525050565b6114b38161081e565b82525050565b6114c281610a1d565b82525050565b610100820160008201516114df60008501826110a9565b5060208201516114f260208501826110a9565b506040820151611505604085018261149b565b50606082015161151860608501826110a9565b50608082015161152b60808501826114aa565b5060a082015161153e60a08501826114aa565b5060c082015161155160c08501826114aa565b5060e082015161156460e08501826114b9565b50505050565b60006101008201905061158060008301846114c8565b92915050565b60006020828403121561159c5761159b610814565b5b60006115aa84828501610e06565b91505092915050565b600080600080600060a086880312156115cf576115ce610814565b5b60006115dd88828901610db9565b95505060206115ee88828901610db9565b94505060406115ff88828901610df1565b935050606061161088828901610db9565b925050608061162188828901610db9565b9150509295509295909350565b600061012082019050611644600083018c610ea8565b611651602083018b610ea8565b61165e604083018a610eb7565b61166b6060830189610b50565b6116786080830188610b50565b61168560a0830187610b50565b61169260c0830186610b50565b61169f60e0830185610ea8565b6116ad610100830184610b50565b9a9950505050505050505050565b6000806000606084860312156116d4576116d3610814565b5b60006116e286828701610e06565b93505060206116f386828701610e06565b925050604061170486828701610e06565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561174857808201518184015260208101905061172d565b60008484015250505050565b600061175f8261170e565b6117698185611719565b935061177981856020860161172a565b6117828161085e565b840191505092915050565b600060a08301600083015184820360008601526117aa8282611754565b91505060208301516117bf60208601826110a9565b5060408301516117d260408601826114aa565b5060608301516117e560608601826114aa565b5060808301516117f860808601826114aa565b508091505092915050565b6000602082019050818103600083015261181d818461178d565b90509291505056fea26469706673582212205fd13f9ff5cfc28d04124d3a11171a6c175e9e48feab42467f4f011a4e43369564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80634ac6d1581461005c5780634d49dcf8146100785780636919e674146100a8578063b908e456146100d8578063bdd613d314610108575b600080fd5b6100766004803603810190610071919061099a565b610138565b005b610092600480360381019061008d9190610ab9565b6101f8565b60405161009f9190610b5f565b60405180910390f35b6100c260048036038101906100bd9190610bda565b6103cc565b6040516100cf9190610b5f565b60405180910390f35b6100f260048036038101906100ed9190610c62565b61047c565b6040516100ff9190610b5f565b60405180910390f35b610122600480360381019061011d9190610cf9565b6106b3565b60405161012f9190610b5f565b60405180910390f35b600080600080600080868060200190518101906101559190610e1b565b9550955095509550955095508173ffffffffffffffffffffffffffffffffffffffff16630dede6c48787878e8e8e8a896040518963ffffffff1660e01b81526004016101a8989796959493929190610ec6565b60408051808303816000875af11580156101c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ea9190610f44565b505050505050505050505050565b6000806000806000858060200190518101906102149190610f84565b93509350935093506000600167ffffffffffffffff8111156102395761023861086f565b5b60405190808252806020026020018201604052801561027257816020015b61025f61079e565b8152602001906001900390816102575790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184151581526020018373ffffffffffffffffffffffffffffffffffffffff16815250816000815181106102ee576102ed610feb565b5b602002602001018190525060008973ffffffffffffffffffffffffffffffffffffffff1663cac88ea98d8d858d6103e8426103299190611049565b6040518663ffffffff1660e01b815260040161034995949392919061119f565b6000604051808303816000875af1158015610368573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061039191906112bc565b905080600182516103a29190611305565b815181106103b3576103b2610feb565b5b6020026020010151965050505050505095945050505050565b60008083838101906103de919061146d565b9050868160a0018181525050858160c00181815250508473ffffffffffffffffffffffffffffffffffffffff1663a026383e826040518263ffffffff1660e01b815260040161042d919061156a565b6020604051808303816000875af115801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190611586565b91505095945050505050565b600080604051806101000160405280888152602001878152602001868152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060008060008060008780602001905181019061051f91906115b3565b9450945094509450945084866080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838660a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828660c0019015159081151581525050818660e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008173ffffffffffffffffffffffffffffffffffffffff16635a47ddc388608001518960a001518a60c001518b600001518c602001518d604001518e606001518f60e001516103e8426106359190611049565b6040518a63ffffffff1660e01b81526004016106599998979695949392919061162e565b6060604051808303816000875af1158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c91906116bb565b925050508097505050505050505095945050505050565b6000806040518060a001604052808481526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016103e8426106f19190611049565b815260200188815260200187815250905086816060018181525050858160800181815250508473ffffffffffffffffffffffffffffffffffffffff1663c04b8d59826040518263ffffffff1660e01b815260040161074f9190611803565b6020604051808303816000875af115801561076e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107929190611586565b91505095945050505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108318161081e565b811461083c57600080fd5b50565b60008135905061084e81610828565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6108a78261085e565b810181811067ffffffffffffffff821117156108c6576108c561086f565b5b80604052505050565b60006108d961080a565b90506108e5828261089e565b919050565b600067ffffffffffffffff8211156109055761090461086f565b5b61090e8261085e565b9050602081019050919050565b82818337600083830152505050565b600061093d610938846108ea565b6108cf565b90508281526020810184848401111561095957610958610859565b5b61096484828561091b565b509392505050565b600082601f83011261098157610980610854565b5b813561099184826020860161092a565b91505092915050565b600080600080608085870312156109b4576109b3610814565b5b60006109c28782880161083f565b94505060206109d38782880161083f565b93505060406109e48782880161083f565b925050606085013567ffffffffffffffff811115610a0557610a04610819565b5b610a118782880161096c565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a4882610a1d565b9050919050565b6000610a5a82610a3d565b9050919050565b610a6a81610a4f565b8114610a7557600080fd5b50565b600081359050610a8781610a61565b92915050565b610a9681610a3d565b8114610aa157600080fd5b50565b600081359050610ab381610a8d565b92915050565b600080600080600060a08688031215610ad557610ad4610814565b5b6000610ae38882890161083f565b9550506020610af48882890161083f565b9450506040610b0588828901610a78565b9350506060610b1688828901610aa4565b925050608086013567ffffffffffffffff811115610b3757610b36610819565b5b610b438882890161096c565b9150509295509295909350565b610b598161081e565b82525050565b6000602082019050610b746000830184610b50565b92915050565b600080fd5b600080fd5b60008083601f840112610b9a57610b99610854565b5b8235905067ffffffffffffffff811115610bb757610bb6610b7a565b5b602083019150836001820283011115610bd357610bd2610b7f565b5b9250929050565b600080600080600060808688031215610bf657610bf5610814565b5b6000610c048882890161083f565b9550506020610c158882890161083f565b9450506040610c2688828901610aa4565b935050606086013567ffffffffffffffff811115610c4757610c46610819565b5b610c5388828901610b84565b92509250509295509295909350565b600080600080600060a08688031215610c7e57610c7d610814565b5b6000610c8c8882890161083f565b9550506020610c9d8882890161083f565b9450506040610cae8882890161083f565b9350506060610cbf8882890161083f565b925050608086013567ffffffffffffffff811115610ce057610cdf610819565b5b610cec8882890161096c565b9150509295509295909350565b600080600080600060a08688031215610d1557610d14610814565b5b6000610d238882890161083f565b9550506020610d348882890161083f565b9450506040610d4588828901610aa4565b9350506060610d5688828901610aa4565b925050608086013567ffffffffffffffff811115610d7757610d76610819565b5b610d838882890161096c565b9150509295509295909350565b6000610d9b82610a1d565b9050919050565b610dab81610d90565b8114610db657600080fd5b50565b600081519050610dc881610da2565b92915050565b60008115159050919050565b610de381610dce565b8114610dee57600080fd5b50565b600081519050610e0081610dda565b92915050565b600081519050610e1581610828565b92915050565b60008060008060008060c08789031215610e3857610e37610814565b5b6000610e4689828a01610db9565b9650506020610e5789828a01610db9565b9550506040610e6889828a01610df1565b9450506060610e7989828a01610db9565b9350506080610e8a89828a01610db9565b92505060a0610e9b89828a01610e06565b9150509295509295509295565b610eb181610a3d565b82525050565b610ec081610dce565b82525050565b600061010082019050610edc600083018b610ea8565b610ee9602083018a610ea8565b610ef66040830189610eb7565b610f036060830188610b50565b610f106080830187610b50565b610f1d60a0830186610b50565b610f2a60c0830185610ea8565b610f3760e0830184610b50565b9998505050505050505050565b60008060408385031215610f5b57610f5a610814565b5b6000610f6985828601610e06565b9250506020610f7a85828601610e06565b9150509250929050565b60008060008060808587031215610f9e57610f9d610814565b5b6000610fac87828801610db9565b9450506020610fbd87828801610db9565b9350506040610fce87828801610df1565b9250506060610fdf87828801610db9565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110548261081e565b915061105f8361081e565b92508282019050808211156110775761107661101a565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6110b281610a3d565b82525050565b6110c181610dce565b82525050565b6080820160008201516110dd60008501826110a9565b5060208201516110f060208501826110a9565b50604082015161110360408501826110b8565b50606082015161111660608501826110a9565b50505050565b600061112883836110c7565b60808301905092915050565b6000602082019050919050565b600061114c8261107d565b6111568185611088565b935061116183611099565b8060005b83811015611192578151611179888261111c565b975061118483611134565b925050600181019050611165565b5085935050505092915050565b600060a0820190506111b46000830188610b50565b6111c16020830187610b50565b81810360408301526111d38186611141565b90506111e26060830185610ea8565b6111ef6080830184610b50565b9695505050505050565b600067ffffffffffffffff8211156112145761121361086f565b5b602082029050602081019050919050565b6000611238611233846111f9565b6108cf565b9050808382526020820190506020840283018581111561125b5761125a610b7f565b5b835b8181101561128457806112708882610e06565b84526020840193505060208101905061125d565b5050509392505050565b600082601f8301126112a3576112a2610854565b5b81516112b3848260208601611225565b91505092915050565b6000602082840312156112d2576112d1610814565b5b600082015167ffffffffffffffff8111156112f0576112ef610819565b5b6112fc8482850161128e565b91505092915050565b60006113108261081e565b915061131b8361081e565b92508282039050818111156113335761133261101a565b5b92915050565b600080fd5b60008160020b9050919050565b6113548161133e565b811461135f57600080fd5b50565b6000813590506113718161134b565b92915050565b61138081610a1d565b811461138b57600080fd5b50565b60008135905061139d81611377565b92915050565b600061010082840312156113ba576113b9611339565b5b6113c56101006108cf565b905060006113d584828501610aa4565b60008301525060206113e984828501610aa4565b60208301525060406113fd84828501611362565b604083015250606061141184828501610aa4565b60608301525060806114258482850161083f565b60808301525060a06114398482850161083f565b60a08301525060c061144d8482850161083f565b60c08301525060e06114618482850161138e565b60e08301525092915050565b6000610100828403121561148457611483610814565b5b6000611492848285016113a3565b91505092915050565b6114a48161133e565b82525050565b6114b38161081e565b82525050565b6114c281610a1d565b82525050565b610100820160008201516114df60008501826110a9565b5060208201516114f260208501826110a9565b506040820151611505604085018261149b565b50606082015161151860608501826110a9565b50608082015161152b60808501826114aa565b5060a082015161153e60a08501826114aa565b5060c082015161155160c08501826114aa565b5060e082015161156460e08501826114b9565b50505050565b60006101008201905061158060008301846114c8565b92915050565b60006020828403121561159c5761159b610814565b5b60006115aa84828501610e06565b91505092915050565b600080600080600060a086880312156115cf576115ce610814565b5b60006115dd88828901610db9565b95505060206115ee88828901610db9565b94505060406115ff88828901610df1565b935050606061161088828901610db9565b925050608061162188828901610db9565b9150509295509295909350565b600061012082019050611644600083018c610ea8565b611651602083018b610ea8565b61165e604083018a610eb7565b61166b6060830189610b50565b6116786080830188610b50565b61168560a0830187610b50565b61169260c0830186610b50565b61169f60e0830185610ea8565b6116ad610100830184610b50565b9a9950505050505050505050565b6000806000606084860312156116d4576116d3610814565b5b60006116e286828701610e06565b93505060206116f386828701610e06565b925050604061170486828701610e06565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561174857808201518184015260208101905061172d565b60008484015250505050565b600061175f8261170e565b6117698185611719565b935061177981856020860161172a565b6117828161085e565b840191505092915050565b600060a08301600083015184820360008601526117aa8282611754565b91505060208301516117bf60208601826110a9565b5060408301516117d260408601826114aa565b5060608301516117e560608601826114aa565b5060808301516117f860808601826114aa565b508091505092915050565b6000602082019050818103600083015261181d818461178d565b90509291505056fea26469706673582212205fd13f9ff5cfc28d04124d3a11171a6c175e9e48feab42467f4f011a4e43369564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}