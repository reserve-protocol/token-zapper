/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMaverickV2RouterInterface extends utils.Interface {
  functions: {
    "exactInputMultiHop(address,bytes,uint256,uint256)": FunctionFragment;
    "exactInputSingle(address,address,bool,uint256,uint256)": FunctionFragment;
    "exactInputSinglePackedArgs(bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "exactInputMultiHop"
      | "exactInputSingle"
      | "exactInputSinglePackedArgs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "exactInputMultiHop",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSingle",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exactInputSinglePackedArgs",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "exactInputMultiHop",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exactInputSinglePackedArgs",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMaverickV2Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMaverickV2RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exactInputMultiHop(
      recipient: PromiseOrValue<string>,
      path: PromiseOrValue<BytesLike>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactInputSingle(
      recipient: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAIn: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exactInputSinglePackedArgs(
      argsPacked: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  exactInputMultiHop(
    recipient: PromiseOrValue<string>,
    path: PromiseOrValue<BytesLike>,
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMinimum: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactInputSingle(
    recipient: PromiseOrValue<string>,
    pool: PromiseOrValue<string>,
    tokenAIn: PromiseOrValue<boolean>,
    amountIn: PromiseOrValue<BigNumberish>,
    amountOutMinimum: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exactInputSinglePackedArgs(
    argsPacked: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    exactInputMultiHop(
      recipient: PromiseOrValue<string>,
      path: PromiseOrValue<BytesLike>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputSingle(
      recipient: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAIn: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exactInputSinglePackedArgs(
      argsPacked: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    exactInputMultiHop(
      recipient: PromiseOrValue<string>,
      path: PromiseOrValue<BytesLike>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactInputSingle(
      recipient: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAIn: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exactInputSinglePackedArgs(
      argsPacked: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exactInputMultiHop(
      recipient: PromiseOrValue<string>,
      path: PromiseOrValue<BytesLike>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactInputSingle(
      recipient: PromiseOrValue<string>,
      pool: PromiseOrValue<string>,
      tokenAIn: PromiseOrValue<boolean>,
      amountIn: PromiseOrValue<BigNumberish>,
      amountOutMinimum: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exactInputSinglePackedArgs(
      argsPacked: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
