{
  "address": "0x4F923E78dfD0A6F7308eE06Fc2739d0Be6314592",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWrappedNative",
          "name": "wrappedNative_",
          "type": "address"
        },
        {
          "internalType": "contract IPermit2",
          "name": "permit2_",
          "type": "address"
        },
        {
          "internalType": "contract ZapperExecutor",
          "name": "executor_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct ZapERC20Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "zapERC20",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZapperOutput",
          "name": "out",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct ZapERC20Params",
          "name": "params",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct TokenPermissions",
              "name": "permitted",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct PermitTransferFrom",
          "name": "permit",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "zapERC20WithPermit2",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZapperOutput",
          "name": "out",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct ZapERC20Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "zapETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZapperOutput",
          "name": "out",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct ZapERC20Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "zapToETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZapperOutput",
          "name": "out",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe473ae26f5cbbaaafbc6660a39e234a937b166dd7649f96e28a93521ae7d1442",
  "receipt": {
    "to": null,
    "from": "0xF2d98377d80DADf725bFb97E91357F1d81384De2",
    "contractAddress": "0x4F923E78dfD0A6F7308eE06Fc2739d0Be6314592",
    "transactionIndex": 7,
    "gasUsed": "2378597",
    "logsBloom": "0x
    "blockHash": "0x9b0eca98cb1cb0e94f52514e4f8c15820b1f3e7a8964bdcb22ef726581307a7b",
    "transactionHash": "0xe473ae26f5cbbaaafbc6660a39e234a937b166dd7649f96e28a93521ae7d1442",
    "logs": [],
    "blockNumber": 249654054,
    "cumulativeGasUsed": "3842793",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x82af49447d8a07e3bd95bd0d56f35241523fbab1",
    "0x000000000022D473030F116dDEE9F6B43aC78BA3",
    "0xbD2F0B5e3a64Ef22e0b695180EE53247670AE904"
  ],
  "numDeployments": 3,
  "solcInputHash": "6c319692973621720c3a3528a90de80c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWrappedNative\",\"name\":\"wrappedNative_\",\"type\":\"address\"},{\"internalType\":\"contract IPermit2\",\"name\":\"permit2_\",\"type\":\"address\"},{\"internalType\":\"contract ZapperExecutor\",\"name\":\"executor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct ZapERC20Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"zapERC20\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperOutput\",\"name\":\"out\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct ZapERC20Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenPermissions\",\"name\":\"permitted\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct PermitTransferFrom\",\"name\":\"permit\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"zapERC20WithPermit2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperOutput\",\"name\":\"out\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct ZapERC20Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"zapETH\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperOutput\",\"name\":\"out\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct ZapERC20Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"zapToETH\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperOutput\",\"name\":\"out\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Zapper.sol\":\"Zapper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IPermit2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n/// @notice The token and amount details for a transfer signed in the permit transfer signature\\nstruct TokenPermissions {\\n    // ERC20 token address\\n    address token;\\n    // the maximum amount that can be spent\\n    uint256 amount;\\n}\\n\\n/// @notice The signed permit message for a single token transfer\\nstruct PermitTransferFrom {\\n    TokenPermissions permitted;\\n    // a unique value for every token owner's signature to prevent signature replays\\n    uint256 nonce;\\n    // deadline on the permit signature\\n    uint256 deadline;\\n}\\n\\n/// @notice Specifies the recipient address and amount for batched transfers.\\n/// @dev Recipients and amounts correspond to the index of the signed token permissions array.\\n/// @dev Reverts if the requested amount is greater than the permitted signed amount.\\nstruct SignatureTransferDetails {\\n    // recipient address\\n    address to;\\n    // spender requested amount\\n    uint256 requestedAmount;\\n}\\n\\ninterface IPermit2 {\\n    /// @notice Transfers a token using a signed permit message\\n    /// @dev Reverts if the requested amount is greater than the permitted signed amount\\n    /// @param permit The permit data signed over by the owner\\n    /// @param owner The owner of the tokens to transfer\\n    /// @param transferDetails The spender's requested transfer details for the permitted token\\n    /// @param signature The signature to verify\\n    function permitTransferFrom(\\n        PermitTransferFrom memory permit,\\n        SignatureTransferDetails calldata transferDetails,\\n        address owner,\\n        bytes calldata signature\\n    ) external;\\n\\n    /// @notice A mapping from owner address to token address to spender address to PackedAllowance struct, which contains details and conditions of the approval.\\n    /// @notice The mapping is indexed in the above order see: allowance[ownerAddress][tokenAddress][spenderAddress]\\n    /// @dev The packed slot holds the allowed amount, expiration at which the allowed amount is no longer valid, and current nonce thats updated on any signature based approvals.\\n    function allowance(\\n        address,\\n        address,\\n        address\\n    ) external view returns (uint160, uint48, uint48);\\n}\\n/// @notice Thrown when validating an inputted signature that is stale\\n/// @param signatureDeadline The timestamp at which a signature is no longer valid\\nerror SignatureExpired(uint256 signatureDeadline);\\n\\n/// @notice Thrown when validating that the inputted nonce has not been used\\nerror InvalidNonce();\\n\",\"keccak256\":\"0x90dc66ba8224fc25acc9f1ea32861a82ec95e28883d2de4a2abb1ab045095b93\",\"license\":\"MIT\"},\"contracts/IRTokenZapper.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct Call {\\n    address to;\\n    bytes data;\\n    uint256 value;\\n}\\n\\nstruct ZapERC20Params {\\n    // Token to zap\\n    IERC20 tokenIn;\\n    // Total amount to zap / pull from user\\n    uint256 amountIn;\\n    \\n    // Weiroll code to execute to produce 'amountOut' of 'tokenOut'\\n    bytes32[] commands;\\n    bytes[] state;\\n    IERC20[] tokens;\\n\\n    // RTokens the user requested\\n    uint256 amountOut;\\n    // RToken to issue\\n    IERC20 tokenOut;\\n}\\n\\ninterface FacadeRead {\\n    function maxIssuable(RToken rToken, address account) external returns (uint256);\\n}\\n\\ninterface RToken {\\n    function issueTo(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xd10b0913b7684e6073dbb9e89386c05955f43e48704ebb457d5c51ae3d9f6c98\",\"license\":\"BlueOak-1.0.0\"},\"contracts/IWrappedNative.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\ninterface IWrappedNative {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x21560ed054ebaca77f878af42ef8f8929195083066ff9996a973a0afb99332bb\",\"license\":\"BlueOak-1.0.0\"},\"contracts/PreventTampering.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nabstract contract PreventTampering {\\n    modifier revertOnCodeHashChange() {\\n        bytes32 hashBefore;\\n        assembly {\\n            hashBefore := extcodehash(address())\\n        }\\n        _;\\n        bytes32 hashPostExecution;\\n        assembly {\\n            hashPostExecution := extcodehash(address())\\n        }\\n        require(hashPostExecution == hashBefore, \\\"PreventTampering: Code has changed\\\");\\n    }\\n}\\n\\n\\ncontract SelfDestruct {\\n    function destroy() external {\\n        selfdestruct(payable(msg.sender));\\n    }\\n    function doNothing() external {}\\n}\\n\\ncontract TestPreventTampering is PreventTampering {\\n    function shouldNotRevert() external {\\n        SelfDestruct selfDestruct = new SelfDestruct();\\n        address(selfDestruct).delegatecall(abi.encodeWithSelector(selfDestruct.destroy.selector));\\n    }\\n    function shouldRevert() revertOnCodeHashChange() external {\\n        SelfDestruct selfDestruct = new SelfDestruct();\\n        address(selfDestruct).delegatecall(abi.encodeWithSelector(selfDestruct.destroy.selector));\\n    }\\n    function markedRevertOnCodeHashChangeDontRevert() revertOnCodeHashChange() external {\\n        SelfDestruct selfDestruct = new SelfDestruct();\\n        address(selfDestruct).delegatecall(abi.encodeWithSelector(selfDestruct.doNothing.selector));\\n    }\\n}\",\"keccak256\":\"0x3f2fd9ccbff5fa8c5700e4c422e0e348c10ff3c4426335dc106226c57236af03\",\"license\":\"BlueOak-1.0.0\"},\"contracts/Zapper.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC2771Context } from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\n\\nimport { IWrappedNative } from \\\"./IWrappedNative.sol\\\";\\nimport { FacadeRead, RToken, Call, ZapERC20Params } from \\\"./IRTokenZapper.sol\\\";\\nimport { IPermit2, SignatureTransferDetails, PermitTransferFrom } from \\\"./IPermit2.sol\\\";\\nimport { VM } from \\\"./weiroll/VM.sol\\\";\\nimport { PreventTampering } from \\\"./PreventTampering.sol\\\";\\nstruct ExecuteOutput {\\n    uint256[] dust;\\n}\\ncontract ZapperExecutor is VM, PreventTampering {\\n    receive() external payable {}\\n\\n    function add(\\n        uint256 a,\\n        uint256 b\\n    ) external pure returns (uint256) {\\n        return a + b;\\n    }\\n    function sub(\\n        uint256 a,\\n        uint256 b\\n    ) external pure returns (uint256) {\\n        return a - b;\\n    }\\n    function fpMul(\\n        uint256 a,\\n        uint256 b,\\n        uint256 scale\\n    ) external pure returns (uint256) {\\n        return (a * b) / scale;\\n    }\\n    function assertLarger(\\n        uint256 a,\\n        uint256 b\\n    ) external pure returns (bool) {\\n        require(a > b, \\\"!ASSERT_GT\\\");\\n        return true;\\n    }\\n    function assertEqual(\\n        uint256 a,\\n        uint256 b\\n    ) external pure returns (bool) {\\n        require(a == b, \\\"!ASSERT_EQ\\\");\\n        return true;\\n    }\\n\\n\\n    /** @dev Main endpoint to call\\n     * @param commands - Weiroll code to execute\\n     * @param state - Intiaial Weiroll state to use\\n     * @param tokens - All tokens used by the Zap in order to calculate dust\\n     */\\n    function execute(\\n        bytes32[] calldata commands,\\n        bytes[] memory state,\\n        IERC20[] memory tokens\\n    )\\n        revertOnCodeHashChange\\n        public\\n        payable\\n        returns (ExecuteOutput memory out)\\n    {\\n        _execute(commands, state);\\n        out.dust = new uint256[](tokens.length);\\n        for(uint256 i; i < tokens.length; i++) {\\n            out.dust[i] = tokens[i].balanceOf(address(this));\\n        }\\n    }\\n\\n    /** @dev Workaround for weiroll not supporting a way to make untyped calls.\\n      * @param to - Address to call\\n      * @param value - Amount of ETH to send\\n      * @param data - Data to send\\n     */\\n    function rawCall(\\n        address to,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bool success, bytes memory out) {\\n        require(msg.sender == address(this), \\\"ZapperExecutor: Only callable by Zapper\\\");\\n        (success, out) = to.call{value: value}(data);\\n    }\\n\\n    /**   @dev Utility for minting max amount of rToken.\\n               Should only be used off-chain to calculate the exact\\n               amount of an rToken that can be minted\\n        * @param token - rToken to mint\\n        * @param recipient - Recipient of the rToken\\n     */\\n    function mintMaxRToken(\\n        FacadeRead facade,\\n        RToken token,\\n        address recipient\\n    ) external {\\n        uint256 maxIssueableAmount = facade.maxIssuable(token, address(this));\\n        token.issueTo(recipient, maxIssueableAmount);\\n    }\\n}\\n\\nstruct ZapperOutput {\\n    uint256[] dust;\\n    uint256 amountOut;\\n    uint256 gasUsed;\\n}\\n\\ncontract Zapper is ReentrancyGuard {\\n    IWrappedNative internal immutable wrappedNative;\\n    IPermit2 internal immutable permit2;\\n    ZapperExecutor internal immutable zapperExecutor;\\n\\n    constructor(\\n        IWrappedNative wrappedNative_,\\n        IPermit2 permit2_,\\n        ZapperExecutor executor_\\n    ) {\\n        wrappedNative = wrappedNative_;\\n        permit2 = permit2_;\\n        zapperExecutor = executor_;\\n    }\\n\\n    function zapInner(ZapERC20Params calldata params) internal returns (ZapperOutput memory out) {\\n        uint256 initialBalance = params.tokenOut.balanceOf(msg.sender);\\n        // STEP 1: Execute\\n        out.dust = zapperExecutor.execute(\\n            params.commands,\\n            params.state,\\n            params.tokens\\n        ).dust;\\n\\n        // STEP 2: Verify that the user has gotten the tokens they requested\\n        uint256 newBalance = params.tokenOut.balanceOf(msg.sender);\\n        require(newBalance > initialBalance, \\\"INVALID_NEW_BALANCE\\\");\\n        uint256 difference = newBalance - initialBalance;\\n        require(difference >= params.amountOut, \\\"INSUFFICIENT_OUT\\\");\\n\\n        out.amountOut = difference;\\n        \\n    }\\n\\n    receive() external payable {}\\n\\n    function zapERC20(\\n        ZapERC20Params calldata params\\n    ) external nonReentrant returns (ZapperOutput memory out) {\\n        uint256 startGas = gasleft();\\n        require(params.amountIn != 0, \\\"INVALID_INPUT_AMOUNT\\\");\\n        require(params.amountOut != 0, \\\"INVALID_OUTPUT_AMOUNT\\\");\\n        SafeERC20.safeTransferFrom(\\n            params.tokenIn,\\n            msg.sender,\\n            address(zapperExecutor),\\n            params.amountIn\\n        );\\n        out = zapInner(params);\\n        out.gasUsed = startGas - gasleft();\\n    }\\n\\n    function zapERC20WithPermit2(\\n        ZapERC20Params calldata params,\\n        PermitTransferFrom calldata permit,\\n        bytes calldata signature\\n    ) external nonReentrant returns (ZapperOutput memory out) {\\n        uint256 startGas = gasleft();\\n        require(params.amountIn != 0, \\\"INVALID_INPUT_AMOUNT\\\");\\n        require(params.amountOut != 0, \\\"INVALID_OUTPUT_AMOUNT\\\");\\n\\n        permit2.permitTransferFrom(\\n            permit,\\n            SignatureTransferDetails({\\n                to: address(zapperExecutor),\\n                requestedAmount: params.amountIn\\n            }),\\n            msg.sender,\\n            signature\\n        );\\n\\n        out = zapInner(params);\\n        out.gasUsed = startGas - gasleft();\\n    }\\n\\n    function zapETH(\\n        ZapERC20Params calldata params\\n    ) external payable nonReentrant returns (ZapperOutput memory out) {\\n        uint256 startGas = gasleft();\\n        require(address(params.tokenIn) == address(wrappedNative), \\\"INVALID_INPUT_TOKEN\\\");\\n        require(params.amountIn == msg.value, \\\"INVALID_INPUT_AMOUNT\\\");\\n        require(msg.value != 0, \\\"INVALID_INPUT_AMOUNT\\\");\\n        require(params.amountOut != 0, \\\"INVALID_OUTPUT_AMOUNT\\\");\\n        wrappedNative.deposit{ value: msg.value }();\\n        SafeERC20.safeTransfer(\\n            IERC20(address(wrappedNative)),\\n            address(zapperExecutor),\\n            wrappedNative.balanceOf(address(this))\\n        );\\n        out = zapInner(params);\\n        out.gasUsed = startGas - gasleft();\\n    }\\n\\n    function zapToETH(\\n        ZapERC20Params calldata params\\n    ) external payable nonReentrant returns (ZapperOutput memory out) {\\n        uint256 startGas = gasleft();\\n        require(params.amountIn != 0, \\\"INVALID_INPUT_AMOUNT\\\");\\n        require(params.amountOut != 0, \\\"INVALID_OUTPUT_AMOUNT\\\");\\n        SafeERC20.safeTransferFrom(\\n            params.tokenIn,\\n            msg.sender,\\n            address(zapperExecutor),\\n            params.amountIn\\n        );\\n        out = zapInner(params);\\n        out.gasUsed = startGas - gasleft();\\n    }\\n}\\n\",\"keccak256\":\"0xef91e8ee34ee05558d49026620314e3928a60e7a83e3766af991264e97bba1f0\",\"license\":\"BlueOak-1.0.0\"},\"contracts/weiroll/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary CommandBuilder {\\n\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 idx;\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < 32;) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    count += stateData.length;\\n                } else {\\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n                    require(\\n                        arglen % 32 == 0,\\n                        \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n                    );\\n                    count += arglen + 32;\\n                }\\n            } else {\\n                require(\\n                    state[idx & IDX_VALUE_MASK].length == 32,\\n                    \\\"Static state variables must be 32 bytes\\\"\\n                );\\n                count += 32;\\n            }\\n            unchecked{free += 32;}\\n            unchecked{++i;}\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        for (uint256 i; i < 32;) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    free += stateData.length - 32;\\n                } else {\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n\\n                    // Variable length data; put a pointer in the slot and write the data at the end\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        arglen\\n                    );\\n                    free += arglen;\\n                }\\n            } else {\\n                // Fixed length data; write it directly\\n                bytes memory statevar = state[idx & IDX_VALUE_MASK];\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(statevar, 32)))\\n                }\\n            }\\n            unchecked{count += 32;}\\n            unchecked{++i;}\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argptr;\\n                assembly {\\n                    argptr := mload(add(output, 32))\\n                }\\n                require(\\n                    argptr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            require(output.length >= 32, \\\"Return at least 32 bytes\\\");\\n            // Single word\\n            // require(\\n            //     output.length == 32,\\n            //     \\\"Only one return value permitted (static)\\\"\\n            // );\\n\\n            // There are rare instances of contracts whoes ABI indicate a single word return returning more than 1 word\\n            // returndata buffers containing a single word of data.\\n            if (output.length > 32) {\\n                // Truncate returndata to proper size\\n                bytes memory newOutput = new bytes(32);\\n                memcpy(output, 0, newOutput, 0, output.length);\\n                output = newOutput;\\n            }\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint256(uint8(index));\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcidx,\\n        bytes memory dest,\\n        uint256 destidx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcidx),\\n                    len,\\n                    add(add(dest, 32), destidx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a4c8144e65ff02cebab947a9d2e8f93a29a47ddd2d8e0be3efae9eb6501baec\",\"license\":\"MIT\"},\"contracts/weiroll/VM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x80;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x40;\\n\\n    uint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    address immutable self;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    constructor() {\\n        self = address(this);\\n    }\\n\\n    // function callExtension(\\n    //     bytes memory data\\n    // ) virtual internal returns (bool success, bytes memory outdata);\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n      internal returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outdata;\\n\\n        uint256 commandsLength = commands.length;\\n        for (uint256 i; i < commandsLength;) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                indices = commands[i++];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outdata) = address(uint160(uint256(command))).delegatecall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                    (success, outdata) = address(uint160(uint256(command))).call( // target\\n                        // inputs\\n                        state.buildInputs(\\n                            //selector\\n                            bytes4(command),\\n                            indices\\n                        )\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outdata) = address(uint160(uint256(command))).staticcall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 calleth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                require(v.length == 32, \\\"_execute: value call has no value indicated.\\\");\\n                assembly {\\n                    calleth := mload(add(v, 0x20))\\n                }\\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\\n                    value: calleth\\n                }(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        bytes32(uint256(indices << 8) | CommandBuilder.IDX_END_OF_ARGS)\\n                    )\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                if (outdata.length > 0) {\\n                    assembly {\\n                        outdata := add(outdata, 68)\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: i,\\n                    target: address(uint160(uint256(command))),\\n                    message: string(outdata)\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outdata);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outdata);\\n            }\\n            unchecked{++i;}\\n        }\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0xd7d97f7093a7495046de45bef3d72fbe8df6b10d328121dfc178b2d12b1bccbb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100435760003560e01c80638e0a8e9d1461004f578063ceba504d1461008c578063dd074ea0146100bc578063f78a9861146100ec5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610f25565b610129565b6040516100839190611086565b60405180910390f35b6100a660048036038101906100a19190610f25565b61023c565b6040516100b39190611086565b60405180910390f35b6100d660048036038101906100d19190610f25565b61034f565b6040516100e39190611086565b60405180910390f35b3480156100f857600080fd5b50610113600480360381019061010e919061112c565b610667565b6040516101209190611086565b60405180910390f35b610131610ecc565b61013961081c565b60005a90506000836020013503610185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017c90611219565b60405180910390fd5b60008360a00135036101cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c390611285565b60405180910390fd5b61020e8360000160208101906101e29190611315565b337f0000000000000000000000000000000000000000000000000000000000000000866020013561086b565b610217836108f4565b91505a816102259190611371565b82604001818152505050610237610ba8565b919050565b610244610ecc565b61024c61081c565b60005a90506000836020013503610298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028f90611219565b60405180910390fd5b60008360a00135036102df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d690611285565b60405180910390fd5b6103218360000160208101906102f59190611315565b337f0000000000000000000000000000000000000000000000000000000000000000866020013561086b565b61032a836108f4565b91505a816103389190611371565b8260400181815250505061034a610ba8565b919050565b610357610ecc565b61035f61081c565b60005a90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168360000160208101906103ae9190611315565b73ffffffffffffffffffffffffffffffffffffffff1614610404576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fb906113f1565b60405180910390fd5b3483602001351461044a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044190611219565b60405180910390fd5b6000340361048d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048490611219565b60405180910390fd5b60008360a00135036104d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cb90611285565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561053c57600080fd5b505af1158015610550573d6000803e3d6000fd5b50505050506106397f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105f39190611420565b602060405180830381865afa158015610610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106349190611467565b610bb2565b610642836108f4565b91505a816106509190611371565b82604001818152505050610662610ba8565b919050565b61066f610ecc565b61067761081c565b60005a905060008660200135036106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba90611219565b60405180910390fd5b60008660a001350361070a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070190611285565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166330f28b7a8660405180604001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020018a602001358152503388886040518663ffffffff1660e01b81526004016107b9959493929190611643565b600060405180830381600087803b1580156107d357600080fd5b505af11580156107e7573d6000803e3d6000fd5b505050506107f4866108f4565b91505a816108029190611371565b82604001818152505050610814610ba8565b949350505050565b600260005403610861576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610858906116de565b60405180910390fd5b6002600081905550565b6108ee846323b872dd60e01b85858560405160240161088c9392919061170d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c38565b50505050565b6108fc610ecc565b60008260c00160208101906109119190611315565b73ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016109499190611420565b602060405180830381865afa158015610966573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098a9190611467565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166308c4b4988480604001906109d89190611753565b8680606001906109e891906117b6565b8880608001906109f89190611819565b6040518763ffffffff1660e01b8152600401610a1996959493929190611b6e565b6000604051808303816000875af1158015610a38573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a619190611d60565b60000151826000018190525060008360c0016020810190610a829190611315565b73ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610aba9190611420565b602060405180830381865afa158015610ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afb9190611467565b9050818111610b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3690611df5565b60405180910390fd5b60008282610b4d9190611371565b90508460a00135811015610b96576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8d90611e61565b60405180910390fd5b80846020018181525050505050919050565b6001600081905550565b610c338363a9059cbb60e01b8484604051602401610bd1929190611e81565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610c38565b505050565b6000610c9a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610cff9092919063ffffffff16565b9050600081511115610cfa5780806020019051810190610cba9190611ee2565b610cf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf090611f81565b60405180910390fd5b5b505050565b6060610d0e8484600085610d17565b90509392505050565b606082471015610d5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5390612013565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610d8591906120a4565b60006040518083038185875af1925050503d8060008114610dc2576040519150601f19603f3d011682016040523d82523d6000602084013e610dc7565b606091505b5091509150610dd887838387610de4565b92505050949350505050565b60608315610e46576000835103610e3e57610dfe85610e59565b610e3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3490612107565b60405180910390fd5b5b829050610e51565b610e508383610e7c565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610e8f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec3919061216b565b60405180910390fd5b60405180606001604052806060815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600060e08284031215610f1c57610f1b610f01565b5b81905092915050565b600060208284031215610f3b57610f3a610ef7565b5b600082013567ffffffffffffffff811115610f5957610f58610efc565b5b610f6584828501610f06565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610fad81610f9a565b82525050565b6000610fbf8383610fa4565b60208301905092915050565b6000602082019050919050565b6000610fe382610f6e565b610fed8185610f79565b9350610ff883610f8a565b8060005b838110156110295781516110108882610fb3565b975061101b83610fcb565b925050600181019050610ffc565b5085935050505092915050565b600060608301600083015184820360008601526110538282610fd8565b91505060208301516110686020860182610fa4565b50604083015161107b6040860182610fa4565b508091505092915050565b600060208201905081810360008301526110a08184611036565b905092915050565b6000608082840312156110be576110bd610f01565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126110ec576110eb6110c7565b5b8235905067ffffffffffffffff811115611109576111086110cc565b5b602083019150836001820283011115611125576111246110d1565b5b9250929050565b60008060008060c0858703121561114657611145610ef7565b5b600085013567ffffffffffffffff81111561116457611163610efc565b5b61117087828801610f06565b9450506020611181878288016110a8565b93505060a085013567ffffffffffffffff8111156111a2576111a1610efc565b5b6111ae878288016110d6565b925092505092959194509250565b600082825260208201905092915050565b7f494e56414c49445f494e5055545f414d4f554e54000000000000000000000000600082015250565b60006112036014836111bc565b915061120e826111cd565b602082019050919050565b60006020820190508181036000830152611232816111f6565b9050919050565b7f494e56414c49445f4f55545055545f414d4f554e540000000000000000000000600082015250565b600061126f6015836111bc565b915061127a82611239565b602082019050919050565b6000602082019050818103600083015261129e81611262565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006112d0826112a5565b9050919050565b60006112e2826112c5565b9050919050565b6112f2816112d7565b81146112fd57600080fd5b50565b60008135905061130f816112e9565b92915050565b60006020828403121561132b5761132a610ef7565b5b600061133984828501611300565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061137c82610f9a565b915061138783610f9a565b925082820390508181111561139f5761139e611342565b5b92915050565b7f494e56414c49445f494e5055545f544f4b454e00000000000000000000000000600082015250565b60006113db6013836111bc565b91506113e6826113a5565b602082019050919050565b6000602082019050818103600083015261140a816113ce565b9050919050565b61141a816112c5565b82525050565b60006020820190506114356000830184611411565b92915050565b61144481610f9a565b811461144f57600080fd5b50565b6000815190506114618161143b565b92915050565b60006020828403121561147d5761147c610ef7565b5b600061148b84828501611452565b91505092915050565b600082905092915050565b6114a8816112c5565b81146114b357600080fd5b50565b6000813590506114c58161149f565b92915050565b60006114da60208401846114b6565b905092915050565b6114eb816112c5565b82525050565b6000813590506115008161143b565b92915050565b600061151560208401846114f1565b905092915050565b6040820161152e60008301836114cb565b61153b60008501826114e2565b506115496020830183611506565b6115566020850182610fa4565b50505050565b6080820161156d6000830183611494565b61157a600085018261151d565b506115886040830183611506565b6115956040850182610fa4565b506115a36060830183611506565b6115b06060850182610fa4565b50505050565b6040820160008201516115cc60008501826114e2565b5060208201516115df6020850182610fa4565b50505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061162283856115e5565b935061162f8385846115f6565b61163883611605565b840190509392505050565b600061010082019050611659600083018861155c565b61166660808301876115b6565b61167360c0830186611411565b81810360e0830152611686818486611616565b90509695505050505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006116c8601f836111bc565b91506116d382611692565b602082019050919050565b600060208201905081810360008301526116f7816116bb565b9050919050565b61170781610f9a565b82525050565b60006060820190506117226000830186611411565b61172f6020830185611411565b61173c60408301846116fe565b949350505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126117705761176f611744565b5b80840192508235915067ffffffffffffffff82111561179257611791611749565b5b6020830192506020820236038313156117ae576117ad61174e565b5b509250929050565b600080833560016020038436030381126117d3576117d2611744565b5b80840192508235915067ffffffffffffffff8211156117f5576117f4611749565b5b6020830192506020820236038313156118115761181061174e565b5b509250929050565b6000808335600160200384360303811261183657611835611744565b5b80840192508235915067ffffffffffffffff82111561185857611857611749565b5b6020830192506020820236038313156118745761187361174e565b5b509250929050565b600082825260208201905092915050565b600080fd5b82818337505050565b60006118a7838561187c565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156118da576118d961188d565b5b6020830292506118eb838584611892565b82840190509392505050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b600061192f8385611912565b935061193c8385846115f6565b61194583611605565b840190509392505050565b600061195d848484611923565b90509392505050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261199257611991611970565b5b83810192508235915060208301925067ffffffffffffffff8211156119ba576119b9611966565b5b6001820236038313156119d0576119cf61196b565b5b509250929050565b6000602082019050919050565b60006119f183856118f7565b935083602084028501611a0384611908565b8060005b87811015611a49578484038952611a1e8284611975565b611a29868284611950565b9550611a34846119d8565b935060208b019a505050600181019050611a07565b50829750879450505050509392505050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b6000611a9b611a96611a91846112a5565b611a76565b6112a5565b9050919050565b6000611aad82611a80565b9050919050565b6000611abf82611aa2565b9050919050565b611acf81611ab4565b82525050565b6000611ae18383611ac6565b60208301905092915050565b6000611afc6020840184611300565b905092915050565b6000602082019050919050565b6000611b1d8385611a5b565b9350611b2882611a6c565b8060005b85811015611b6157611b3e8284611aed565b611b488882611ad5565b9750611b5383611b04565b925050600181019050611b2c565b5085925050509392505050565b60006060820190508181036000830152611b8981888a61189b565b90508181036020830152611b9e8186886119e5565b90508181036040830152611bb3818486611b11565b9050979650505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611bfd82611605565b810181811067ffffffffffffffff82111715611c1c57611c1b611bc5565b5b80604052505050565b6000611c2f610eed565b9050611c3b8282611bf4565b919050565b600080fd5b600067ffffffffffffffff821115611c6057611c5f611bc5565b5b602082029050602081019050919050565b6000611c84611c7f84611c45565b611c25565b90508083825260208201905060208402830185811115611ca757611ca66110d1565b5b835b81811015611cd05780611cbc8882611452565b845260208401935050602081019050611ca9565b5050509392505050565b600082601f830112611cef57611cee6110c7565b5b8151611cff848260208601611c71565b91505092915050565b600060208284031215611d1e57611d1d611bc0565b5b611d286020611c25565b9050600082015167ffffffffffffffff811115611d4857611d47611c40565b5b611d5484828501611cda565b60008301525092915050565b600060208284031215611d7657611d75610ef7565b5b600082015167ffffffffffffffff811115611d9457611d93610efc565b5b611da084828501611d08565b91505092915050565b7f494e56414c49445f4e45575f42414c414e434500000000000000000000000000600082015250565b6000611ddf6013836111bc565b9150611dea82611da9565b602082019050919050565b60006020820190508181036000830152611e0e81611dd2565b9050919050565b7f494e53554646494349454e545f4f555400000000000000000000000000000000600082015250565b6000611e4b6010836111bc565b9150611e5682611e15565b602082019050919050565b60006020820190508181036000830152611e7a81611e3e565b9050919050565b6000604082019050611e966000830185611411565b611ea360208301846116fe565b9392505050565b60008115159050919050565b611ebf81611eaa565b8114611eca57600080fd5b50565b600081519050611edc81611eb6565b92915050565b600060208284031215611ef857611ef7610ef7565b5b6000611f0684828501611ecd565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000611f6b602a836111bc565b9150611f7682611f0f565b604082019050919050565b60006020820190508181036000830152611f9a81611f5e565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000611ffd6026836111bc565b915061200882611fa1565b604082019050919050565b6000602082019050818103600083015261202c81611ff0565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561206757808201518184015260208101905061204c565b60008484015250505050565b600061207e82612033565b612088818561203e565b9350612098818560208601612049565b80840191505092915050565b60006120b08284612073565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006120f1601d836111bc565b91506120fc826120bb565b602082019050919050565b60006020820190508181036000830152612120816120e4565b9050919050565b600081519050919050565b600061213d82612127565b61214781856111bc565b9350612157818560208601612049565b61216081611605565b840191505092915050565b600060208201905081810360008301526121858184612132565b90509291505056fea2646970667358221220227fa7c782cf0e47cede7790b5bdead08534530eab2315da8a1110c580676f5364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 89,
        "contract": "contracts/Zapper.sol:Zapper",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}