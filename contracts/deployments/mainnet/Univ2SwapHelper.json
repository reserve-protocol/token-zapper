{
  "address": "0x57F6aE5415bc2855D9e50FC52E13811557FFB1C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "zeroForOne",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcdaa8da70916002fb101a6ffce1c7112cd0b8188d74fee4410408716a573d9e0",
  "receipt": {
    "to": null,
    "from": "0xF2d98377d80DADf725bFb97E91357F1d81384De2",
    "contractAddress": "0x57F6aE5415bc2855D9e50FC52E13811557FFB1C9",
    "transactionIndex": 105,
    "gasUsed": "928185",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x19a3bd53314a2b051033aea4365817da9a3a699aa01bdbc363926b7477762bc6",
    "transactionHash": "0xcdaa8da70916002fb101a6ffce1c7112cd0b8188d74fee4410408716a573d9e0",
    "logs": [],
    "blockNumber": 21716781,
    "cumulativeGasUsed": "11047266",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ad08863fc35117a60afa2b9c59b9fb7b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"zeroForOne\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/weiroll-helpers/Univ2SwapHelper.sol\":\"Univ2SwapHelper\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\",\"keccak256\":\"0x5b9c5eecd0f688eb09374166e4eadf0b506d0d08d26f8b050583a44114efd2be\",\"license\":\"BlueOak-1.0.0\"},\"contracts/weiroll-helpers/Univ2SwapHelper.sol\":{\"content\":\"\\n// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IUniswapV2Pair } from \\\"../IUniswapV2Pair.sol\\\";\\nfunction getAmountOut(\\n  uint amountIn,\\n  uint reserveIn,\\n  uint reserveOut\\n) pure returns (uint amountOut){\\n  require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\\n  require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n  uint amountInWithFee = amountIn * 997;\\n  uint numerator = amountInWithFee * reserveOut;\\n  uint denominator = reserveIn * 1000 + amountInWithFee;\\n  amountOut = numerator / denominator;\\n}\\ncontract Univ2SwapHelper {\\n    function swap(\\n        address pool,\\n        bool zeroForOne,\\n        address tokenIn,\\n        uint256 amountIn\\n    ) external returns (uint256 amountOut) {\\n      (uint112 reserve0, uint112 reserve1,) = IUniswapV2Pair(pool).getReserves();\\n      if (zeroForOne) {\\n        amountOut = getAmountOut(amountIn, reserve0, reserve1);\\n        SafeERC20.safeTransfer(IERC20(tokenIn), pool, amountIn);\\n        IUniswapV2Pair(pool).swap(amountOut, 0, address(this), new bytes(0));\\n      } else {\\n        amountOut = getAmountOut(amountIn, reserve1, reserve0);\\n        SafeERC20.safeTransfer(IERC20(tokenIn), pool, amountIn);\\n        IUniswapV2Pair(pool).swap(0, amountOut, address(this), new bytes(0));\\n      }\\n    }\\n}\\n\",\"keccak256\":\"0x9a08425d4f0d15b32b2b4ca16a177bcfc263501528787f5b58ff43d88e19261a\",\"license\":\"BlueOak-1.0.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610fe7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806390712b0714610030575b600080fd5b61004a600480360381019061004591906107b2565b610060565b6040516100579190610828565b60405180910390f35b60008060008673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156100b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d491906108c5565b509150915085156101db5761010a84836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff166102dd565b92506101178588866103c7565b8673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84600030600067ffffffffffffffff81111561015257610151610918565b5b6040519080825280601f01601f1916602001820160405280156101845781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016101a49493929190610a2b565b600060405180830381600087803b1580156101be57600080fd5b505af11580156101d2573d6000803e3d6000fd5b505050506102d3565b61020684826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff166102dd565b92506102138588866103c7565b8673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f60008530600067ffffffffffffffff81111561024e5761024d610918565b5b6040519080825280601f01601f1916602001820160405280156102805781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016102a09493929190610a77565b600060405180830381600087803b1580156102ba57600080fd5b505af11580156102ce573d6000803e3d6000fd5b505050505b5050949350505050565b6000808411610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031890610b46565b60405180910390fd5b6000831180156103315750600082115b610370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036790610bd8565b60405180910390fd5b60006103e5856103809190610c27565b9050600083826103909190610c27565b90506000826103e8876103a39190610c27565b6103ad9190610c69565b905080826103bb9190610ccc565b93505050509392505050565b6104488363a9059cbb60e01b84846040516024016103e6929190610cfd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061044d565b505050565b60006104af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166105149092919063ffffffff16565b905060008151111561050f57808060200190518101906104cf9190610d3b565b61050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610dda565b60405180910390fd5b5b505050565b6060610523848460008561052c565b90509392505050565b606082471015610571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056890610e6c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161059a9190610ec8565b60006040518083038185875af1925050503d80600081146105d7576040519150601f19603f3d011682016040523d82523d6000602084013e6105dc565b606091505b50915091506105ed878383876105f9565b92505050949350505050565b6060831561065b576000835103610653576106138561066e565b610652576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064990610f2b565b60405180910390fd5b5b829050610666565b6106658383610691565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156106a45781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d89190610f8f565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610711826106e6565b9050919050565b61072181610706565b811461072c57600080fd5b50565b60008135905061073e81610718565b92915050565b60008115159050919050565b61075981610744565b811461076457600080fd5b50565b60008135905061077681610750565b92915050565b6000819050919050565b61078f8161077c565b811461079a57600080fd5b50565b6000813590506107ac81610786565b92915050565b600080600080608085870312156107cc576107cb6106e1565b5b60006107da8782880161072f565b94505060206107eb87828801610767565b93505060406107fc8782880161072f565b925050606061080d8782880161079d565b91505092959194509250565b6108228161077c565b82525050565b600060208201905061083d6000830184610819565b92915050565b60006dffffffffffffffffffffffffffff82169050919050565b61086681610843565b811461087157600080fd5b50565b6000815190506108838161085d565b92915050565b600063ffffffff82169050919050565b6108a281610889565b81146108ad57600080fd5b50565b6000815190506108bf81610899565b92915050565b6000806000606084860312156108de576108dd6106e1565b5b60006108ec86828701610874565b93505060206108fd86828701610874565b925050604061090e868287016108b0565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b6000819050919050565b600061097661097161096c84610947565b610951565b61077c565b9050919050565b6109868161095b565b82525050565b61099581610706565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109d55780820151818401526020810190506109ba565b60008484015250505050565b6000601f19601f8301169050919050565b60006109fd8261099b565b610a0781856109a6565b9350610a178185602086016109b7565b610a20816109e1565b840191505092915050565b6000608082019050610a406000830187610819565b610a4d602083018661097d565b610a5a604083018561098c565b8181036060830152610a6c81846109f2565b905095945050505050565b6000608082019050610a8c600083018761097d565b610a996020830186610819565b610aa6604083018561098c565b8181036060830152610ab881846109f2565b905095945050505050565b600082825260208201905092915050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4960008201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000602082015250565b6000610b30602b83610ac3565b9150610b3b82610ad4565b604082019050919050565b60006020820190508181036000830152610b5f81610b23565b9050919050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60008201527f4951554944495459000000000000000000000000000000000000000000000000602082015250565b6000610bc2602883610ac3565b9150610bcd82610b66565b604082019050919050565b60006020820190508181036000830152610bf181610bb5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c328261077c565b9150610c3d8361077c565b9250828202610c4b8161077c565b91508282048414831517610c6257610c61610bf8565b5b5092915050565b6000610c748261077c565b9150610c7f8361077c565b9250828201905080821115610c9757610c96610bf8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cd78261077c565b9150610ce28361077c565b925082610cf257610cf1610c9d565b5b828204905092915050565b6000604082019050610d12600083018561098c565b610d1f6020830184610819565b9392505050565b600081519050610d3581610750565b92915050565b600060208284031215610d5157610d506106e1565b5b6000610d5f84828501610d26565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610dc4602a83610ac3565b9150610dcf82610d68565b604082019050919050565b60006020820190508181036000830152610df381610db7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610e56602683610ac3565b9150610e6182610dfa565b604082019050919050565b60006020820190508181036000830152610e8581610e49565b9050919050565b600081905092915050565b6000610ea28261099b565b610eac8185610e8c565b9350610ebc8185602086016109b7565b80840191505092915050565b6000610ed48284610e97565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610f15601d83610ac3565b9150610f2082610edf565b602082019050919050565b60006020820190508181036000830152610f4481610f08565b9050919050565b600081519050919050565b6000610f6182610f4b565b610f6b8185610ac3565b9350610f7b8185602086016109b7565b610f84816109e1565b840191505092915050565b60006020820190508181036000830152610fa98184610f56565b90509291505056fea26469706673582212205e03b73b8446815c3053c2a03ef5eed37888864821f378b34c68644d095ac37964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806390712b0714610030575b600080fd5b61004a600480360381019061004591906107b2565b610060565b6040516100579190610828565b60405180910390f35b60008060008673ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156100b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d491906108c5565b509150915085156101db5761010a84836dffffffffffffffffffffffffffff16836dffffffffffffffffffffffffffff166102dd565b92506101178588866103c7565b8673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84600030600067ffffffffffffffff81111561015257610151610918565b5b6040519080825280601f01601f1916602001820160405280156101845781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016101a49493929190610a2b565b600060405180830381600087803b1580156101be57600080fd5b505af11580156101d2573d6000803e3d6000fd5b505050506102d3565b61020684826dffffffffffffffffffffffffffff16846dffffffffffffffffffffffffffff166102dd565b92506102138588866103c7565b8673ffffffffffffffffffffffffffffffffffffffff1663022c0d9f60008530600067ffffffffffffffff81111561024e5761024d610918565b5b6040519080825280601f01601f1916602001820160405280156102805781602001600182028036833780820191505090505b506040518563ffffffff1660e01b81526004016102a09493929190610a77565b600060405180830381600087803b1580156102ba57600080fd5b505af11580156102ce573d6000803e3d6000fd5b505050505b5050949350505050565b6000808411610321576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031890610b46565b60405180910390fd5b6000831180156103315750600082115b610370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036790610bd8565b60405180910390fd5b60006103e5856103809190610c27565b9050600083826103909190610c27565b90506000826103e8876103a39190610c27565b6103ad9190610c69565b905080826103bb9190610ccc565b93505050509392505050565b6104488363a9059cbb60e01b84846040516024016103e6929190610cfd565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061044d565b505050565b60006104af826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166105149092919063ffffffff16565b905060008151111561050f57808060200190518101906104cf9190610d3b565b61050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610dda565b60405180910390fd5b5b505050565b6060610523848460008561052c565b90509392505050565b606082471015610571576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056890610e6c565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161059a9190610ec8565b60006040518083038185875af1925050503d80600081146105d7576040519150601f19603f3d011682016040523d82523d6000602084013e6105dc565b606091505b50915091506105ed878383876105f9565b92505050949350505050565b6060831561065b576000835103610653576106138561066e565b610652576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064990610f2b565b60405180910390fd5b5b829050610666565b6106658383610691565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156106a45781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d89190610f8f565b60405180910390fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610711826106e6565b9050919050565b61072181610706565b811461072c57600080fd5b50565b60008135905061073e81610718565b92915050565b60008115159050919050565b61075981610744565b811461076457600080fd5b50565b60008135905061077681610750565b92915050565b6000819050919050565b61078f8161077c565b811461079a57600080fd5b50565b6000813590506107ac81610786565b92915050565b600080600080608085870312156107cc576107cb6106e1565b5b60006107da8782880161072f565b94505060206107eb87828801610767565b93505060406107fc8782880161072f565b925050606061080d8782880161079d565b91505092959194509250565b6108228161077c565b82525050565b600060208201905061083d6000830184610819565b92915050565b60006dffffffffffffffffffffffffffff82169050919050565b61086681610843565b811461087157600080fd5b50565b6000815190506108838161085d565b92915050565b600063ffffffff82169050919050565b6108a281610889565b81146108ad57600080fd5b50565b6000815190506108bf81610899565b92915050565b6000806000606084860312156108de576108dd6106e1565b5b60006108ec86828701610874565b93505060206108fd86828701610874565b925050604061090e868287016108b0565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000819050919050565b6000819050919050565b600061097661097161096c84610947565b610951565b61077c565b9050919050565b6109868161095b565b82525050565b61099581610706565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156109d55780820151818401526020810190506109ba565b60008484015250505050565b6000601f19601f8301169050919050565b60006109fd8261099b565b610a0781856109a6565b9350610a178185602086016109b7565b610a20816109e1565b840191505092915050565b6000608082019050610a406000830187610819565b610a4d602083018661097d565b610a5a604083018561098c565b8181036060830152610a6c81846109f2565b905095945050505050565b6000608082019050610a8c600083018761097d565b610a996020830186610819565b610aa6604083018561098c565b8181036060830152610ab881846109f2565b905095945050505050565b600082825260208201905092915050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4960008201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000602082015250565b6000610b30602b83610ac3565b9150610b3b82610ad4565b604082019050919050565b60006020820190508181036000830152610b5f81610b23565b9050919050565b7f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60008201527f4951554944495459000000000000000000000000000000000000000000000000602082015250565b6000610bc2602883610ac3565b9150610bcd82610b66565b604082019050919050565b60006020820190508181036000830152610bf181610bb5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c328261077c565b9150610c3d8361077c565b9250828202610c4b8161077c565b91508282048414831517610c6257610c61610bf8565b5b5092915050565b6000610c748261077c565b9150610c7f8361077c565b9250828201905080821115610c9757610c96610bf8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cd78261077c565b9150610ce28361077c565b925082610cf257610cf1610c9d565b5b828204905092915050565b6000604082019050610d12600083018561098c565b610d1f6020830184610819565b9392505050565b600081519050610d3581610750565b92915050565b600060208284031215610d5157610d506106e1565b5b6000610d5f84828501610d26565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610dc4602a83610ac3565b9150610dcf82610d68565b604082019050919050565b60006020820190508181036000830152610df381610db7565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610e56602683610ac3565b9150610e6182610dfa565b604082019050919050565b60006020820190508181036000830152610e8581610e49565b9050919050565b600081905092915050565b6000610ea28261099b565b610eac8185610e8c565b9350610ebc8185602086016109b7565b80840191505092915050565b6000610ed48284610e97565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610f15601d83610ac3565b9150610f2082610edf565b602082019050919050565b60006020820190508181036000830152610f4481610f08565b9050919050565b600081519050919050565b6000610f6182610f4b565b610f6b8185610ac3565b9350610f7b8185602086016109b7565b610f84816109e1565b840191505092915050565b60006020820190508181036000830152610fa98184610f56565b90509291505056fea26469706673582212205e03b73b8446815c3053c2a03ef5eed37888864821f378b34c68644d095ac37964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}