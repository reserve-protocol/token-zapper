/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  RTokenMintHelper,
  RTokenMintHelperInterface,
} from "../../../../contracts/weiroll-helpers/RTokenMintHelper.sol/RTokenMintHelper";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract FacadeRead",
        name: "facade",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "basket",
        type: "bytes",
      },
      {
        internalType: "contract RToken",
        name: "rToken",
        type: "address",
      },
    ],
    name: "mintToken",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061108e806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a60a76b414610030575b600080fd5b61004a60048036038101906100459190610851565b610060565b60405161005791906108de565b60405180910390f35b60008084848101906100729190610a86565b905060005b81518110156100ea57600082828151811061009557610094610acf565b5b602002602001015190506100ab818660006102c1565b6100d681867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6102c1565b5080806100e290610b2d565b915050610077565b5060008673ffffffffffffffffffffffffffffffffffffffff16631c3debf485306040518363ffffffff1660e01b8152600401610128929190610be3565b6020604051808303816000875af1158015610147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016b9190610c38565b90508373ffffffffffffffffffffffffffffffffffffffff16631207f0c133836040518363ffffffff1660e01b81526004016101a8929190610c65565b600060405180830381600087803b1580156101c257600080fd5b505af11580156101d6573d6000803e3d6000fd5b5050505060005b82518110156102b35760008382815181106101fb576101fa610acf565b5b6020026020010151905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102409190610c8e565b602060405180830381865afa15801561025d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102819190610c38565b9050600081036102925750506102a0565b61029d823383610410565b50505b80806102ab90610b2d565b9150506101dd565b508092505050949350505050565b600081148061034b575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610308929190610ca9565b602060405180830381865afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103499190610c38565b145b61038a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038190610d55565b60405180910390fd5b61040b8363095ea7b360e01b84846040516024016103a9929190610c65565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610496565b505050565b6104918363a9059cbb60e01b848460405160240161042f929190610c65565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610496565b505050565b60006104f8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661055d9092919063ffffffff16565b905060008151111561055857808060200190518101906105189190610dad565b610557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054e90610e4c565b60405180910390fd5b5b505050565b606061056c8484600085610575565b90509392505050565b6060824710156105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b190610ede565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516105e39190610f6f565b60006040518083038185875af1925050503d8060008114610620576040519150601f19603f3d011682016040523d82523d6000602084013e610625565b606091505b509150915061063687838387610642565b92505050949350505050565b606083156106a457600083510361069c5761065c856106b7565b61069b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069290610fd2565b60405180910390fd5b5b8290506106af565b6106ae83836106da565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156106ed5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107219190611036565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107698261073e565b9050919050565b600061077b8261075e565b9050919050565b61078b81610770565b811461079657600080fd5b50565b6000813590506107a881610782565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107d3576107d26107ae565b5b8235905067ffffffffffffffff8111156107f0576107ef6107b3565b5b60208301915083600182028301111561080c5761080b6107b8565b5b9250929050565b600061081e8261075e565b9050919050565b61082e81610813565b811461083957600080fd5b50565b60008135905061084b81610825565b92915050565b6000806000806060858703121561086b5761086a610734565b5b600061087987828801610799565b945050602085013567ffffffffffffffff81111561089a57610899610739565b5b6108a6878288016107bd565b935093505060406108b98782880161083c565b91505092959194509250565b6000819050919050565b6108d8816108c5565b82525050565b60006020820190506108f360008301846108cf565b92915050565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610942826108f9565b810181811067ffffffffffffffff821117156109615761096061090a565b5b80604052505050565b600061097461072a565b90506109808282610939565b919050565b600067ffffffffffffffff8211156109a05761099f61090a565b5b602082029050602081019050919050565b60006109bc8261075e565b9050919050565b6109cc816109b1565b81146109d757600080fd5b50565b6000813590506109e9816109c3565b92915050565b6000610a026109fd84610985565b61096a565b90508083825260208201905060208402830185811115610a2557610a246107b8565b5b835b81811015610a4e5780610a3a88826109da565b845260208401935050602081019050610a27565b5050509392505050565b600082601f830112610a6d57610a6c6107ae565b5b8135610a7d8482602086016109ef565b91505092915050565b600060208284031215610a9c57610a9b610734565b5b600082013567ffffffffffffffff811115610aba57610ab9610739565b5b610ac684828501610a58565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b38826108c5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b6a57610b69610afe565b5b600182019050919050565b6000819050919050565b6000610b9a610b95610b908461073e565b610b75565b61073e565b9050919050565b6000610bac82610b7f565b9050919050565b6000610bbe82610ba1565b9050919050565b610bce81610bb3565b82525050565b610bdd8161075e565b82525050565b6000604082019050610bf86000830185610bc5565b610c056020830184610bd4565b9392505050565b610c15816108c5565b8114610c2057600080fd5b50565b600081519050610c3281610c0c565b92915050565b600060208284031215610c4e57610c4d610734565b5b6000610c5c84828501610c23565b91505092915050565b6000604082019050610c7a6000830185610bd4565b610c8760208301846108cf565b9392505050565b6000602082019050610ca36000830184610bd4565b92915050565b6000604082019050610cbe6000830185610bd4565b610ccb6020830184610bd4565b9392505050565b600082825260208201905092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b6000610d3f603683610cd2565b9150610d4a82610ce3565b604082019050919050565b60006020820190508181036000830152610d6e81610d32565b9050919050565b60008115159050919050565b610d8a81610d75565b8114610d9557600080fd5b50565b600081519050610da781610d81565b92915050565b600060208284031215610dc357610dc2610734565b5b6000610dd184828501610d98565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000610e36602a83610cd2565b9150610e4182610dda565b604082019050919050565b60006020820190508181036000830152610e6581610e29565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000610ec8602683610cd2565b9150610ed382610e6c565b604082019050919050565b60006020820190508181036000830152610ef781610ebb565b9050919050565b600081519050919050565b600081905092915050565b60005b83811015610f32578082015181840152602081019050610f17565b60008484015250505050565b6000610f4982610efe565b610f538185610f09565b9350610f63818560208601610f14565b80840191505092915050565b6000610f7b8284610f3e565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000610fbc601d83610cd2565b9150610fc782610f86565b602082019050919050565b60006020820190508181036000830152610feb81610faf565b9050919050565b600081519050919050565b600061100882610ff2565b6110128185610cd2565b9350611022818560208601610f14565b61102b816108f9565b840191505092915050565b600060208201905081810360008301526110508184610ffd565b90509291505056fea26469706673582212201b13c99a1641a43b456fdeaebe098085c19c0d1217a44b45390bc5583ff6382c64736f6c63430008110033";

type RTokenMintHelperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RTokenMintHelperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RTokenMintHelper__factory extends ContractFactory {
  constructor(...args: RTokenMintHelperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RTokenMintHelper> {
    return super.deploy(overrides || {}) as Promise<RTokenMintHelper>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RTokenMintHelper {
    return super.attach(address) as RTokenMintHelper;
  }
  override connect(signer: Signer): RTokenMintHelper__factory {
    return super.connect(signer) as RTokenMintHelper__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RTokenMintHelperInterface {
    return new utils.Interface(_abi) as RTokenMintHelperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RTokenMintHelper {
    return new Contract(address, _abi, signerOrProvider) as RTokenMintHelper;
  }
}
