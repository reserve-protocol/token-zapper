/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMaverickV2FactoryInterface extends utils.Interface {
  functions: {
    "claimProtocolFeeForPool(address,bool)": FunctionFragment;
    "claimProtocolFeeForPool(address)": FunctionFragment;
    "create(uint64,uint16,uint32,address,address,int32,uint8)": FunctionFragment;
    "create(uint64,uint64,uint16,uint32,address,address,int32,uint8)": FunctionFragment;
    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address,bool,bool)": FunctionFragment;
    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address)": FunctionFragment;
    "createPermissioned(uint64,uint16,uint32,address,address,int32,uint8,address)": FunctionFragment;
    "deployParameters()": FunctionFragment;
    "isFactoryPool(address)": FunctionFragment;
    "lookup(uint256,uint256)": FunctionFragment;
    "lookup(uint256,uint256,uint256,uint256,address,address,uint8)": FunctionFragment;
    "lookup(address,address,uint256,uint256)": FunctionFragment;
    "lookupPermissioned(address,address,address,uint256,uint256)": FunctionFragment;
    "lookupPermissioned(uint256,uint256)": FunctionFragment;
    "lookupPermissioned(uint256,uint256,uint256,uint256,address,address,uint8,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "poolByTokenCount(address,address,address)": FunctionFragment;
    "poolCount()": FunctionFragment;
    "poolPermissionedCount()": FunctionFragment;
    "protocolFeeRatioD3()": FunctionFragment;
    "protocolFeeReceiver()": FunctionFragment;
    "protocolLendingFeeRateD18()": FunctionFragment;
    "updateProtocolFeeRatioForPool(address)": FunctionFragment;
    "updateProtocolLendingFeeRateForPool(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimProtocolFeeForPool(address,bool)"
      | "claimProtocolFeeForPool(address)"
      | "create(uint64,uint16,uint32,address,address,int32,uint8)"
      | "create(uint64,uint64,uint16,uint32,address,address,int32,uint8)"
      | "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address,bool,bool)"
      | "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address)"
      | "createPermissioned(uint64,uint16,uint32,address,address,int32,uint8,address)"
      | "deployParameters"
      | "isFactoryPool"
      | "lookup(uint256,uint256)"
      | "lookup(uint256,uint256,uint256,uint256,address,address,uint8)"
      | "lookup(address,address,uint256,uint256)"
      | "lookupPermissioned(address,address,address,uint256,uint256)"
      | "lookupPermissioned(uint256,uint256)"
      | "lookupPermissioned(uint256,uint256,uint256,uint256,address,address,uint8,address)"
      | "owner"
      | "poolByTokenCount"
      | "poolCount"
      | "poolPermissionedCount"
      | "protocolFeeRatioD3"
      | "protocolFeeReceiver"
      | "protocolLendingFeeRateD18"
      | "updateProtocolFeeRatioForPool"
      | "updateProtocolLendingFeeRateForPool"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimProtocolFeeForPool(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimProtocolFeeForPool(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "create(uint64,uint16,uint32,address,address,int32,uint8)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "create(uint64,uint64,uint16,uint32,address,address,int32,uint8)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address,bool,bool)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createPermissioned(uint64,uint16,uint32,address,address,int32,uint8,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployParameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFactoryPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lookup(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lookup(uint256,uint256,uint256,uint256,address,address,uint8)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lookup(address,address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lookupPermissioned(address,address,address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lookupPermissioned(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lookupPermissioned(uint256,uint256,uint256,uint256,address,address,uint8,address)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolByTokenCount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "poolCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "poolPermissionedCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeRatioD3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolLendingFeeRateD18",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolFeeRatioForPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProtocolLendingFeeRateForPool",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimProtocolFeeForPool(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimProtocolFeeForPool(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create(uint64,uint16,uint32,address,address,int32,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create(uint64,uint64,uint16,uint32,address,address,int32,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPermissioned(uint64,uint16,uint32,address,address,int32,uint8,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFactoryPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lookup(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lookup(uint256,uint256,uint256,uint256,address,address,uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lookup(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lookupPermissioned(address,address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lookupPermissioned(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lookupPermissioned(uint256,uint256,uint256,uint256,address,address,uint8,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolByTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolPermissionedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeRatioD3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolLendingFeeRateD18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolFeeRatioForPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProtocolLendingFeeRateForPool",
    data: BytesLike
  ): Result;

  events: {
    "PoolCreated(address,uint8,uint256,uint256,uint256,uint256,int32,address,address,uint8,address)": EventFragment;
    "SetFactoryProtocolFeeRatio(uint8)": EventFragment;
    "SetFactoryProtocolFeeReceiver(address)": EventFragment;
    "SetFactoryProtocolLendingFeeRate(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFactoryProtocolFeeRatio"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetFactoryProtocolFeeReceiver"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SetFactoryProtocolLendingFeeRate"
  ): EventFragment;
}

export interface PoolCreatedEventObject {
  poolAddress: string;
  protocolFeeRatio: number;
  feeAIn: BigNumber;
  feeBIn: BigNumber;
  tickSpacing: BigNumber;
  lookback: BigNumber;
  activeTick: number;
  tokenA: string;
  tokenB: string;
  kinds: number;
  accessor: string;
}
export type PoolCreatedEvent = TypedEvent<
  [
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    number,
    string
  ],
  PoolCreatedEventObject
>;

export type PoolCreatedEventFilter = TypedEventFilter<PoolCreatedEvent>;

export interface SetFactoryProtocolFeeRatioEventObject {
  protocolFeeRatioD3: number;
}
export type SetFactoryProtocolFeeRatioEvent = TypedEvent<
  [number],
  SetFactoryProtocolFeeRatioEventObject
>;

export type SetFactoryProtocolFeeRatioEventFilter =
  TypedEventFilter<SetFactoryProtocolFeeRatioEvent>;

export interface SetFactoryProtocolFeeReceiverEventObject {
  receiver: string;
}
export type SetFactoryProtocolFeeReceiverEvent = TypedEvent<
  [string],
  SetFactoryProtocolFeeReceiverEventObject
>;

export type SetFactoryProtocolFeeReceiverEventFilter =
  TypedEventFilter<SetFactoryProtocolFeeReceiverEvent>;

export interface SetFactoryProtocolLendingFeeRateEventObject {
  lendingFeeRateD18: BigNumber;
}
export type SetFactoryProtocolLendingFeeRateEvent = TypedEvent<
  [BigNumber],
  SetFactoryProtocolLendingFeeRateEventObject
>;

export type SetFactoryProtocolLendingFeeRateEventFilter =
  TypedEventFilter<SetFactoryProtocolLendingFeeRateEvent>;

export interface IMaverickV2Factory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMaverickV2FactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "claimProtocolFeeForPool(address,bool)"(
      pool: PromiseOrValue<string>,
      isTokenA: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimProtocolFeeForPool(address)"(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "create(uint64,uint16,uint32,address,address,int32,uint8)"(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "create(uint64,uint64,uint16,uint32,address,address,int32,uint8)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address,bool,bool)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      permissionedLiquidity: PromiseOrValue<boolean>,
      permissionedSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "createPermissioned(uint64,uint16,uint32,address,address,int32,uint8,address)"(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        string
      ] & {
        feeAIn: BigNumber;
        feeBIn: BigNumber;
        lookback: number;
        activeTick: number;
        tokenAScale: BigNumber;
        tokenBScale: BigNumber;
        tokenA: string;
        tokenB: string;
        tickSpacing: number;
        options: number;
        accessor: string;
      }
    >;

    isFactoryPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "lookup(uint256,uint256)"(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    "lookup(uint256,uint256,uint256,uint256,address,address,uint8)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "lookup(address,address,uint256,uint256)"(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    "lookupPermissioned(address,address,address,uint256,uint256)"(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      accessor: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    "lookupPermissioned(uint256,uint256)"(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { pools: string[] }>;

    "lookupPermissioned(uint256,uint256,uint256,uint256,address,address,uint8,address)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      options: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolByTokenCount(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _poolCount: BigNumber }>;

    poolCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _poolCount: BigNumber }>;

    poolPermissionedCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _poolCount: BigNumber }>;

    protocolFeeRatioD3(overrides?: CallOverrides): Promise<[number]>;

    protocolFeeReceiver(overrides?: CallOverrides): Promise<[string]>;

    protocolLendingFeeRateD18(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateProtocolFeeRatioForPool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProtocolLendingFeeRateForPool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "claimProtocolFeeForPool(address,bool)"(
    pool: PromiseOrValue<string>,
    isTokenA: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimProtocolFeeForPool(address)"(
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "create(uint64,uint16,uint32,address,address,int32,uint8)"(
    fee: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    lookback: PromiseOrValue<BigNumberish>,
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    activeTick: PromiseOrValue<BigNumberish>,
    kinds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "create(uint64,uint64,uint16,uint32,address,address,int32,uint8)"(
    feeAIn: PromiseOrValue<BigNumberish>,
    feeBIn: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    lookback: PromiseOrValue<BigNumberish>,
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    activeTick: PromiseOrValue<BigNumberish>,
    kinds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address,bool,bool)"(
    feeAIn: PromiseOrValue<BigNumberish>,
    feeBIn: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    lookback: PromiseOrValue<BigNumberish>,
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    activeTick: PromiseOrValue<BigNumberish>,
    kinds: PromiseOrValue<BigNumberish>,
    accessor: PromiseOrValue<string>,
    permissionedLiquidity: PromiseOrValue<boolean>,
    permissionedSwap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address)"(
    feeAIn: PromiseOrValue<BigNumberish>,
    feeBIn: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    lookback: PromiseOrValue<BigNumberish>,
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    activeTick: PromiseOrValue<BigNumberish>,
    kinds: PromiseOrValue<BigNumberish>,
    accessor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "createPermissioned(uint64,uint16,uint32,address,address,int32,uint8,address)"(
    fee: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    lookback: PromiseOrValue<BigNumberish>,
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    activeTick: PromiseOrValue<BigNumberish>,
    kinds: PromiseOrValue<BigNumberish>,
    accessor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployParameters(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      number,
      number,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      number,
      string
    ] & {
      feeAIn: BigNumber;
      feeBIn: BigNumber;
      lookback: number;
      activeTick: number;
      tokenAScale: BigNumber;
      tokenBScale: BigNumber;
      tokenA: string;
      tokenB: string;
      tickSpacing: number;
      options: number;
      accessor: string;
    }
  >;

  isFactoryPool(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "lookup(uint256,uint256)"(
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "lookup(uint256,uint256,uint256,uint256,address,address,uint8)"(
    feeAIn: PromiseOrValue<BigNumberish>,
    feeBIn: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    lookback: PromiseOrValue<BigNumberish>,
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    kinds: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "lookup(address,address,uint256,uint256)"(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "lookupPermissioned(address,address,address,uint256,uint256)"(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    accessor: PromiseOrValue<string>,
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "lookupPermissioned(uint256,uint256)"(
    startIndex: PromiseOrValue<BigNumberish>,
    endIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "lookupPermissioned(uint256,uint256,uint256,uint256,address,address,uint8,address)"(
    feeAIn: PromiseOrValue<BigNumberish>,
    feeBIn: PromiseOrValue<BigNumberish>,
    tickSpacing: PromiseOrValue<BigNumberish>,
    lookback: PromiseOrValue<BigNumberish>,
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    options: PromiseOrValue<BigNumberish>,
    accessor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolByTokenCount(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    accessor: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolCount(overrides?: CallOverrides): Promise<BigNumber>;

  poolPermissionedCount(overrides?: CallOverrides): Promise<BigNumber>;

  protocolFeeRatioD3(overrides?: CallOverrides): Promise<number>;

  protocolFeeReceiver(overrides?: CallOverrides): Promise<string>;

  protocolLendingFeeRateD18(overrides?: CallOverrides): Promise<BigNumber>;

  updateProtocolFeeRatioForPool(
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProtocolLendingFeeRateForPool(
    pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "claimProtocolFeeForPool(address,bool)"(
      pool: PromiseOrValue<string>,
      isTokenA: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "claimProtocolFeeForPool(address)"(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "create(uint64,uint16,uint32,address,address,int32,uint8)"(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "create(uint64,uint64,uint16,uint32,address,address,int32,uint8)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address,bool,bool)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      permissionedLiquidity: PromiseOrValue<boolean>,
      permissionedSwap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "createPermissioned(uint64,uint16,uint32,address,address,int32,uint8,address)"(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployParameters(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        number,
        number,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        number,
        string
      ] & {
        feeAIn: BigNumber;
        feeBIn: BigNumber;
        lookback: number;
        activeTick: number;
        tokenAScale: BigNumber;
        tokenBScale: BigNumber;
        tokenA: string;
        tokenB: string;
        tickSpacing: number;
        options: number;
        accessor: string;
      }
    >;

    isFactoryPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "lookup(uint256,uint256)"(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "lookup(uint256,uint256,uint256,uint256,address,address,uint8)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "lookup(address,address,uint256,uint256)"(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "lookupPermissioned(address,address,address,uint256,uint256)"(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      accessor: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "lookupPermissioned(uint256,uint256)"(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "lookupPermissioned(uint256,uint256,uint256,uint256,address,address,uint8,address)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      options: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolByTokenCount(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    poolPermissionedCount(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRatioD3(overrides?: CallOverrides): Promise<number>;

    protocolFeeReceiver(overrides?: CallOverrides): Promise<string>;

    protocolLendingFeeRateD18(overrides?: CallOverrides): Promise<BigNumber>;

    updateProtocolFeeRatioForPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateProtocolLendingFeeRateForPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "PoolCreated(address,uint8,uint256,uint256,uint256,uint256,int32,address,address,uint8,address)"(
      poolAddress?: null,
      protocolFeeRatio?: null,
      feeAIn?: null,
      feeBIn?: null,
      tickSpacing?: null,
      lookback?: null,
      activeTick?: null,
      tokenA?: null,
      tokenB?: null,
      kinds?: null,
      accessor?: null
    ): PoolCreatedEventFilter;
    PoolCreated(
      poolAddress?: null,
      protocolFeeRatio?: null,
      feeAIn?: null,
      feeBIn?: null,
      tickSpacing?: null,
      lookback?: null,
      activeTick?: null,
      tokenA?: null,
      tokenB?: null,
      kinds?: null,
      accessor?: null
    ): PoolCreatedEventFilter;

    "SetFactoryProtocolFeeRatio(uint8)"(
      protocolFeeRatioD3?: null
    ): SetFactoryProtocolFeeRatioEventFilter;
    SetFactoryProtocolFeeRatio(
      protocolFeeRatioD3?: null
    ): SetFactoryProtocolFeeRatioEventFilter;

    "SetFactoryProtocolFeeReceiver(address)"(
      receiver?: null
    ): SetFactoryProtocolFeeReceiverEventFilter;
    SetFactoryProtocolFeeReceiver(
      receiver?: null
    ): SetFactoryProtocolFeeReceiverEventFilter;

    "SetFactoryProtocolLendingFeeRate(uint256)"(
      lendingFeeRateD18?: null
    ): SetFactoryProtocolLendingFeeRateEventFilter;
    SetFactoryProtocolLendingFeeRate(
      lendingFeeRateD18?: null
    ): SetFactoryProtocolLendingFeeRateEventFilter;
  };

  estimateGas: {
    "claimProtocolFeeForPool(address,bool)"(
      pool: PromiseOrValue<string>,
      isTokenA: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimProtocolFeeForPool(address)"(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "create(uint64,uint16,uint32,address,address,int32,uint8)"(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "create(uint64,uint64,uint16,uint32,address,address,int32,uint8)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address,bool,bool)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      permissionedLiquidity: PromiseOrValue<boolean>,
      permissionedSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "createPermissioned(uint64,uint16,uint32,address,address,int32,uint8,address)"(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployParameters(overrides?: CallOverrides): Promise<BigNumber>;

    isFactoryPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lookup(uint256,uint256)"(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lookup(uint256,uint256,uint256,uint256,address,address,uint8)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lookup(address,address,uint256,uint256)"(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lookupPermissioned(address,address,address,uint256,uint256)"(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      accessor: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lookupPermissioned(uint256,uint256)"(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lookupPermissioned(uint256,uint256,uint256,uint256,address,address,uint8,address)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      options: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolByTokenCount(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolCount(overrides?: CallOverrides): Promise<BigNumber>;

    poolPermissionedCount(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeRatioD3(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    protocolLendingFeeRateD18(overrides?: CallOverrides): Promise<BigNumber>;

    updateProtocolFeeRatioForPool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProtocolLendingFeeRateForPool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "claimProtocolFeeForPool(address,bool)"(
      pool: PromiseOrValue<string>,
      isTokenA: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimProtocolFeeForPool(address)"(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "create(uint64,uint16,uint32,address,address,int32,uint8)"(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "create(uint64,uint64,uint16,uint32,address,address,int32,uint8)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address,bool,bool)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      permissionedLiquidity: PromiseOrValue<boolean>,
      permissionedSwap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createPermissioned(uint64,uint64,uint16,uint32,address,address,int32,uint8,address)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "createPermissioned(uint64,uint16,uint32,address,address,int32,uint8,address)"(
      fee: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      activeTick: PromiseOrValue<BigNumberish>,
      kinds: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isFactoryPool(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lookup(uint256,uint256)"(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lookup(uint256,uint256,uint256,uint256,address,address,uint8)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      kinds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lookup(address,address,uint256,uint256)"(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lookupPermissioned(address,address,address,uint256,uint256)"(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      accessor: PromiseOrValue<string>,
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lookupPermissioned(uint256,uint256)"(
      startIndex: PromiseOrValue<BigNumberish>,
      endIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lookupPermissioned(uint256,uint256,uint256,uint256,address,address,uint8,address)"(
      feeAIn: PromiseOrValue<BigNumberish>,
      feeBIn: PromiseOrValue<BigNumberish>,
      tickSpacing: PromiseOrValue<BigNumberish>,
      lookback: PromiseOrValue<BigNumberish>,
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      options: PromiseOrValue<BigNumberish>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolByTokenCount(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      accessor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolPermissionedCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeRatioD3(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolFeeReceiver(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolLendingFeeRateD18(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateProtocolFeeRatioForPool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProtocolLendingFeeRateForPool(
      pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
