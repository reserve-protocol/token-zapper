/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        inputs: [
            {
                internalType: "contract IWrappedNative",
                name: "wrappedNative_",
                type: "address",
            },
            {
                internalType: "contract IPermit2",
                name: "permit2_",
                type: "address",
            },
            {
                internalType: "contract ZapperExecutor",
                name: "executor_",
                type: "address",
            },
        ],
        stateMutability: "nonpayable",
        type: "constructor",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "contract IERC20",
                        name: "tokenIn",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "amountIn",
                        type: "uint256",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "to",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes",
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct Call[]",
                        name: "commands",
                        type: "tuple[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amountOut",
                        type: "uint256",
                    },
                    {
                        internalType: "contract IERC20",
                        name: "tokenOut",
                        type: "address",
                    },
                    {
                        internalType: "contract IERC20[]",
                        name: "tokensUsedByZap",
                        type: "address[]",
                    },
                ],
                internalType: "struct ZapERC20Params",
                name: "params",
                type: "tuple",
            },
        ],
        name: "zapERC20",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256[]",
                        name: "dust",
                        type: "uint256[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amountOut",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsed",
                        type: "uint256",
                    },
                ],
                internalType: "struct ZapperOutput",
                name: "out",
                type: "tuple",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "contract IERC20",
                        name: "tokenIn",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "amountIn",
                        type: "uint256",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "to",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes",
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct Call[]",
                        name: "commands",
                        type: "tuple[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amountOut",
                        type: "uint256",
                    },
                    {
                        internalType: "contract IERC20",
                        name: "tokenOut",
                        type: "address",
                    },
                    {
                        internalType: "contract IERC20[]",
                        name: "tokensUsedByZap",
                        type: "address[]",
                    },
                ],
                internalType: "struct ZapERC20Params",
                name: "params",
                type: "tuple",
            },
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "token",
                                type: "address",
                            },
                            {
                                internalType: "uint256",
                                name: "amount",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct TokenPermissions",
                        name: "permitted",
                        type: "tuple",
                    },
                    {
                        internalType: "uint256",
                        name: "nonce",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "deadline",
                        type: "uint256",
                    },
                ],
                internalType: "struct PermitTransferFrom",
                name: "permit",
                type: "tuple",
            },
            {
                internalType: "bytes",
                name: "signature",
                type: "bytes",
            },
        ],
        name: "zapERC20WithPermit2",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256[]",
                        name: "dust",
                        type: "uint256[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amountOut",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsed",
                        type: "uint256",
                    },
                ],
                internalType: "struct ZapperOutput",
                name: "out",
                type: "tuple",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "contract IERC20",
                        name: "tokenIn",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "amountIn",
                        type: "uint256",
                    },
                    {
                        components: [
                            {
                                internalType: "address",
                                name: "to",
                                type: "address",
                            },
                            {
                                internalType: "bytes",
                                name: "data",
                                type: "bytes",
                            },
                            {
                                internalType: "uint256",
                                name: "value",
                                type: "uint256",
                            },
                        ],
                        internalType: "struct Call[]",
                        name: "commands",
                        type: "tuple[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amountOut",
                        type: "uint256",
                    },
                    {
                        internalType: "contract IERC20",
                        name: "tokenOut",
                        type: "address",
                    },
                    {
                        internalType: "contract IERC20[]",
                        name: "tokensUsedByZap",
                        type: "address[]",
                    },
                ],
                internalType: "struct ZapERC20Params",
                name: "params",
                type: "tuple",
            },
        ],
        name: "zapETH",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256[]",
                        name: "dust",
                        type: "uint256[]",
                    },
                    {
                        internalType: "uint256",
                        name: "amountOut",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "gasUsed",
                        type: "uint256",
                    },
                ],
                internalType: "struct ZapperOutput",
                name: "out",
                type: "tuple",
            },
        ],
        stateMutability: "payable",
        type: "function",
    },
    {
        stateMutability: "payable",
        type: "receive",
    },
];
const _bytecode = "";
const isSuperArgs = (xs) => xs.length > 1;
class Zapper__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(wrappedNative_, permit2_, executor_, overrides) {
        return super.deploy(wrappedNative_, permit2_, executor_, overrides || {});
    }
    getDeployTransaction(wrappedNative_, permit2_, executor_, overrides) {
        return super.getDeployTransaction(wrappedNative_, permit2_, executor_, overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
export { Zapper__factory };
//# sourceMappingURL=Zapper__factory.js.map