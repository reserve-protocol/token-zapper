{
  "address": "0x1bAD8D90b5CE307215f851A047044a731D796bCd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expectedB",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "encoding",
          "type": "bytes"
        }
      ],
      "name": "addLiquidityV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expected",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expected",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "encodedRouterCall",
          "type": "bytes"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expected",
          "type": "uint256"
        },
        {
          "internalType": "contract IAerodromeRouter",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "encoding",
          "type": "bytes"
        }
      ],
      "name": "exactInputSingleV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0d70b33cc1819185309d1a364e05ee94357c9fa1b751c7bdde2766d3fba79d83",
  "receipt": {
    "to": null,
    "from": "0xF2d98377d80DADf725bFb97E91357F1d81384De2",
    "contractAddress": "0x1bAD8D90b5CE307215f851A047044a731D796bCd",
    "transactionIndex": 55,
    "gasUsed": "1248896",
    "logsBloom": "0x
    "blockHash": "0x994ab53b2d4d32d697d849222819b164d63fd9556fe40d9afc8c16d9dbf160d7",
    "transactionHash": "0x0d70b33cc1819185309d1a364e05ee94357c9fa1b751c7bdde2766d3fba79d83",
    "logs": [],
    "blockNumber": 21710470,
    "cumulativeGasUsed": "10424065",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "3ec8b16061b8d4ec5b4b522683e30f3b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedB\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encoding\",\"type\":\"bytes\"}],\"name\":\"addLiquidityV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expected\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expected\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encodedRouterCall\",\"type\":\"bytes\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"contract IAerodromeRouter\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"encoding\",\"type\":\"bytes\"}],\"name\":\"exactInputSingleV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Aerodrome.sol\":\"SlipstreamRouterCall\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Aerodrome.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\ninterface IAerodromeRouter {\\n    struct Route {\\n        address from;\\n        address to;\\n        bool stable;\\n        address factory;\\n    }\\n\\n    error ETHTransferFailed();\\n    error Expired();\\n    error InsufficientAmount();\\n    error InsufficientAmountA();\\n    error InsufficientAmountB();\\n    error InsufficientAmountADesired();\\n    error InsufficientAmountBDesired();\\n    error InsufficientAmountAOptimal();\\n    error InsufficientLiquidity();\\n    error InsufficientOutputAmount();\\n    error InvalidAmountInForETHDeposit();\\n    error InvalidTokenInForETHDeposit();\\n    error InvalidPath();\\n    error InvalidRouteA();\\n    error InvalidRouteB();\\n    error OnlyWETH();\\n    error PoolDoesNotExist();\\n    error PoolFactoryDoesNotExist();\\n    error SameAddresses();\\n    error ZeroAddress();\\n\\n    /// @notice Address of FactoryRegistry.sol\\n    function factoryRegistry() external view returns (address);\\n\\n    /// @notice Address of Protocol PoolFactory.sol\\n    function defaultFactory() external view returns (address);\\n\\n    /// @dev Struct containing information necessary to zap in and out of pools\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           Stable or volatile pool\\n    /// @param factory          factory of pool\\n    /// @param amountOutMinA    Minimum amount expected from swap leg of zap via routesA\\n    /// @param amountOutMinB    Minimum amount expected from swap leg of zap via routesB\\n    /// @param amountAMin       Minimum amount of tokenA expected from liquidity leg of zap\\n    /// @param amountBMin       Minimum amount of tokenB expected from liquidity leg of zap\\n    struct Zap {\\n        address tokenA;\\n        address tokenB;\\n        bool stable;\\n        address factory;\\n        uint256 amountOutMinA;\\n        uint256 amountOutMinB;\\n        uint256 amountAMin;\\n        uint256 amountBMin;\\n    }\\n\\n    /// @notice Sort two tokens by which address value is less than the other\\n    /// @param tokenA   Address of token to sort\\n    /// @param tokenB   Address of token to sort\\n    /// @return token0  Lower address value between tokenA and tokenB\\n    /// @return token1  Higher address value between tokenA and tokenB\\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\\n\\n    /// @notice Calculate the address of a pool by its' factory.\\n    ///         Used by all Router functions containing a `Route[]` or `_factory` argument.\\n    ///         Reverts if _factory is not approved by the FactoryRegistry\\n    /// @dev Returns a randomly generated address for a nonexistent pool\\n    /// @param tokenA   Address of token to query\\n    /// @param tokenB   Address of token to query\\n    /// @param stable   True if pool is stable, false if volatile\\n    /// @param _factory Address of factory which created the pool\\n    function poolFor(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory\\n    ) external view returns (address pool);\\n\\n    /// @notice Fetch and sort the reserves for a pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param _factory     Address of PoolFactory for tokenA and tokenB\\n    /// @return reserveA    Amount of reserves of the sorted token A\\n    /// @return reserveB    Amount of reserves of the sorted token B\\n    function getReserves(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory\\n    ) external view returns (uint256 reserveA, uint256 reserveB);\\n\\n    /// @notice Perform chained getAmountOut calculations on any number of pools\\n    function getAmountsOut(uint256 amountIn, Route[] memory routes) external view returns (uint256[] memory amounts);\\n\\n    // **** ADD LIQUIDITY ****\\n\\n    /// @notice Quote the amount deposited into a Pool\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param _factory         Address of PoolFactory for tokenA and tokenB\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\n    /// @return amountA         Amount of tokenA to actually deposit\\n    /// @return amountB         Amount of tokenB to actually deposit\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\n    function quoteAddLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory,\\n        uint256 amountADesired,\\n        uint256 amountBDesired\\n    ) external view returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    /// @notice Quote the amount of liquidity removed from a Pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param _factory     Address of PoolFactory for tokenA and tokenB\\n    /// @param liquidity    Amount of liquidity to remove\\n    /// @return amountA     Amount of tokenA received\\n    /// @return amountB     Amount of tokenB received\\n    function quoteRemoveLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory,\\n        uint256 liquidity\\n    ) external view returns (uint256 amountA, uint256 amountB);\\n\\n    /// @notice Add liquidity of two tokens to a Pool\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param amountADesired   Amount of tokenA desired to deposit\\n    /// @param amountBDesired   Amount of tokenB desired to deposit\\n    /// @param amountAMin       Minimum amount of tokenA to deposit\\n    /// @param amountBMin       Minimum amount of tokenB to deposit\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountA         Amount of tokenA to actually deposit\\n    /// @return amountB         Amount of tokenB to actually deposit\\n    /// @return liquidity       Amount of liquidity token returned from deposit\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n\\n    /// @notice Add liquidity of a token and WETH (transferred as ETH) to a Pool\\n    /// @param token                .\\n    /// @param stable               True if pool is stable, false if volatile\\n    /// @param amountTokenDesired   Amount of token desired to deposit\\n    /// @param amountTokenMin       Minimum amount of token to deposit\\n    /// @param amountETHMin         Minimum amount of ETH to deposit\\n    /// @param to                   Recipient of liquidity token\\n    /// @param deadline             Deadline to add liquidity\\n    /// @return amountToken         Amount of token to actually deposit\\n    /// @return amountETH           Amount of tokenETH to actually deposit\\n    /// @return liquidity           Amount of liquidity token returned from deposit\\n    function addLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    // **** REMOVE LIQUIDITY ****\\n\\n    /// @notice Remove liquidity of two tokens from a Pool\\n    /// @param tokenA       .\\n    /// @param tokenB       .\\n    /// @param stable       True if pool is stable, false if volatile\\n    /// @param liquidity    Amount of liquidity to remove\\n    /// @param amountAMin   Minimum amount of tokenA to receive\\n    /// @param amountBMin   Minimum amount of tokenB to receive\\n    /// @param to           Recipient of tokens received\\n    /// @param deadline     Deadline to remove liquidity\\n    /// @return amountA     Amount of tokenA received\\n    /// @return amountB     Amount of tokenB received\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    /// @notice Remove liquidity of a token and WETH (returned as ETH) from a Pool\\n    /// @param token            .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param liquidity        Amount of liquidity to remove\\n    /// @param amountTokenMin   Minimum amount of token to receive\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountToken     Amount of token received\\n    /// @return amountETH       Amount of ETH received\\n    function removeLiquidityETH(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    /// @notice Remove liquidity of a fee-on-transfer token and WETH (returned as ETH) from a Pool\\n    /// @param token            .\\n    /// @param stable           True if pool is stable, false if volatile\\n    /// @param liquidity        Amount of liquidity to remove\\n    /// @param amountTokenMin   Minimum amount of token to receive\\n    /// @param amountETHMin     Minimum amount of ETH to receive\\n    /// @param to               Recipient of liquidity token\\n    /// @param deadline         Deadline to receive liquidity\\n    /// @return amountETH       Amount of ETH received\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        bool stable,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    // **** SWAP ****\\n\\n    /// @notice Swap one token for another\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /// @notice Swap ETH for a token\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    /// @notice Swap a token for WETH (returned as ETH)\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired ETH\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    /// @return amounts     Array of amounts returned per route\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    /// @notice Swap one token for another without slippage protection\\n    /// @return amounts     Array of amounts to swap  per route\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    function UNSAFE_swapExactTokensForTokens(\\n        uint256[] memory amounts,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory);\\n\\n    // **** SWAP (supporting fee-on-transfer tokens) ****\\n\\n    /// @notice Swap one token for another supporting fee-on-transfer tokens\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    /// @notice Swap ETH for a token supporting fee-on-transfer tokens\\n    /// @param amountOutMin Minimum amount of desired token received\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    /// @notice Swap a token for WETH (returned as ETH) supporting fee-on-transfer tokens\\n    /// @param amountIn     Amount of token in\\n    /// @param amountOutMin Minimum amount of desired ETH\\n    /// @param routes       Array of trade routes used in the swap\\n    /// @param to           Recipient of the tokens received\\n    /// @param deadline     Deadline to receive tokens\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Route[] calldata routes,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    /// @notice Zap a token A into a pool (B, C). (A can be equal to B or C).\\n    ///         Supports standard ERC20 tokens only (i.e. not fee-on-transfer tokens etc).\\n    ///         Slippage is required for the initial swap.\\n    ///         Additional slippage may be required when adding liquidity as the\\n    ///         price of the token may have changed.\\n    /// @param tokenIn      Token you are zapping in from (i.e. input token).\\n    /// @param amountInA    Amount of input token you wish to send down routesA\\n    /// @param amountInB    Amount of input token you wish to send down routesB\\n    /// @param zapInPool    Contains zap struct information. See Zap struct.\\n    /// @param routesA      Route used to convert input token to tokenA\\n    /// @param routesB      Route used to convert input token to tokenB\\n    /// @param to           Address you wish to mint liquidity to.\\n    /// @param stake        Auto-stake liquidity in corresponding gauge.\\n    /// @return liquidity   Amount of LP tokens created from zapping in.\\n    function zapIn(\\n        address tokenIn,\\n        uint256 amountInA,\\n        uint256 amountInB,\\n        Zap calldata zapInPool,\\n        Route[] calldata routesA,\\n        Route[] calldata routesB,\\n        address to,\\n        bool stake\\n    ) external payable returns (uint256 liquidity);\\n\\n    /// @notice Zap out a pool (B, C) into A.\\n    ///         Supports standard ERC20 tokens only (i.e. not fee-on-transfer tokens etc).\\n    ///         Slippage is required for the removal of liquidity.\\n    ///         Additional slippage may be required on the swap as the\\n    ///         price of the token may have changed.\\n    /// @param tokenOut     Token you are zapping out to (i.e. output token).\\n    /// @param liquidity    Amount of liquidity you wish to remove.\\n    /// @param zapOutPool   Contains zap struct information. See Zap struct.\\n    /// @param routesA      Route used to convert tokenA into output token.\\n    /// @param routesB      Route used to convert tokenB into output token.\\n    function zapOut(\\n        address tokenOut,\\n        uint256 liquidity,\\n        Zap calldata zapOutPool,\\n        Route[] calldata routesA,\\n        Route[] calldata routesB\\n    ) external;\\n\\n    /// @notice Used to generate params required for zapping in.\\n    ///         Zap in => remove liquidity then swap.\\n    ///         Apply slippage to expected swap values to account for changes in reserves in between.\\n    /// @dev Output token refers to the token you want to zap in from.\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           .\\n    /// @param _factory         .\\n    /// @param amountInA        Amount of input token you wish to send down routesA\\n    /// @param amountInB        Amount of input token you wish to send down routesB\\n    /// @param routesA          Route used to convert input token to tokenA\\n    /// @param routesB          Route used to convert input token to tokenB\\n    /// @return amountOutMinA   Minimum output expected from swapping input token to tokenA.\\n    /// @return amountOutMinB   Minimum output expected from swapping input token to tokenB.\\n    /// @return amountAMin      Minimum amount of tokenA expected from depositing liquidity.\\n    /// @return amountBMin      Minimum amount of tokenB expected from depositing liquidity.\\n    function generateZapInParams(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory,\\n        uint256 amountInA,\\n        uint256 amountInB,\\n        Route[] calldata routesA,\\n        Route[] calldata routesB\\n    ) external view returns (uint256 amountOutMinA, uint256 amountOutMinB, uint256 amountAMin, uint256 amountBMin);\\n\\n    /// @notice Used to generate params required for zapping out.\\n    ///         Zap out => swap then add liquidity.\\n    ///         Apply slippage to expected liquidity values to account for changes in reserves in between.\\n    /// @dev Output token refers to the token you want to zap out of.\\n    /// @param tokenA           .\\n    /// @param tokenB           .\\n    /// @param stable           .\\n    /// @param _factory         .\\n    /// @param liquidity        Amount of liquidity being zapped out of into a given output token.\\n    /// @param routesA          Route used to convert tokenA into output token.\\n    /// @param routesB          Route used to convert tokenB into output token.\\n    /// @return amountOutMinA   Minimum output expected from swapping tokenA into output token.\\n    /// @return amountOutMinB   Minimum output expected from swapping tokenB into output token.\\n    /// @return amountAMin      Minimum amount of tokenA expected from withdrawing liquidity.\\n    /// @return amountBMin      Minimum amount of tokenB expected from withdrawing liquidity.\\n    function generateZapOutParams(\\n        address tokenA,\\n        address tokenB,\\n        bool stable,\\n        address _factory,\\n        uint256 liquidity,\\n        Route[] calldata routesA,\\n        Route[] calldata routesB\\n    ) external view returns (uint256 amountOutMinA, uint256 amountOutMinB, uint256 amountAMin, uint256 amountBMin);\\n\\n    /// @notice Used by zapper to determine appropriate ratio of A to B to deposit liquidity. Assumes stable pool.\\n    /// @dev Returns stable liquidity ratio of B to (A + B).\\n    ///      E.g. if ratio is 0.4, it means there is more of A than there is of B.\\n    ///      Therefore you should deposit more of token A than B.\\n    /// @param tokenA   tokenA of stable pool you are zapping into.\\n    /// @param tokenB   tokenB of stable pool you are zapping into.\\n    /// @param factory  Factory that created stable pool.\\n    /// @return ratio   Ratio of token0 to token1 required to deposit into zap.\\n    function quoteStableLiquidityRatio(\\n        address tokenA,\\n        address tokenB,\\n        address factory\\n    ) external view returns (uint256 ratio);\\n}\\n\\ninterface IMixedRouteQuoterV1 {\\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\\n    /// @param amountIn The amount of the first token to swap\\n    /// @return amountOut The amount of the last token that would be received\\n    /// @return v3SqrtPriceX96AfterList List of the sqrt price after the swap for each v3 pool in the path, 0 for v2 pools\\n    /// @return v3InitializedTicksCrossedList List of the initialized ticks that the swap crossed for each v3 pool in the path, 0 for v2 pools\\n    /// @return v3SwapGasEstimate The estimate of the gas that the v3 swaps in the path consume\\n    function quoteExactInput(bytes memory path, uint256 amountIn)\\n        external\\n        returns (\\n            uint256 amountOut,\\n            uint160[] memory v3SqrtPriceX96AfterList,\\n            uint32[] memory v3InitializedTicksCrossedList,\\n            uint256 v3SwapGasEstimate\\n        );\\n\\n    struct QuoteExactInputSingleV3Params {\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amountIn;\\n        int24 tickSpacing;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    struct QuoteExactInputSingleV2Params {\\n        address tokenIn;\\n        address tokenOut;\\n        bool stable;\\n        uint256 amountIn;\\n    }\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// tickSpacing The tickSpacing of the token pool to consider for the pair\\n    /// amountIn The desired input amount\\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\\n    /// @return gasEstimate The estimate of the gas that the swap consumes\\n    function quoteExactInputSingleV3(QuoteExactInputSingleV3Params memory params)\\n        external\\n        returns (uint256 amountOut, uint160 sqrtPriceX96After, uint32 initializedTicksCrossed, uint256 gasEstimate);\\n\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single V2 pool\\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleV2Params`\\n    /// tokenIn The token being swapped in\\n    /// tokenOut The token being swapped out\\n    /// stable The boolean representing volatile (false) or stable (true)\\n    /// amountIn The desired input amount\\n    /// @return amountOut The amount of `tokenOut` that would be received\\n    function quoteExactInputSingleV2(QuoteExactInputSingleV2Params memory params)\\n        external\\n        returns (uint256 amountOut);\\n\\n    /// @dev ExactOutput swaps are not supported by this new Quoter which is specialized for supporting routes\\n    ///      crossing both V2 liquidity pairs and V3 pools.\\n    /// @deprecated quoteExactOutputSingle and exactOutput. Use QuoterV2 instead.\\n}\\n\\ninterface IAerodromeFactory {\\n    event SetFeeManager(address feeManager);\\n    event SetPauser(address pauser);\\n    event SetPauseState(bool state);\\n    event SetVoter(address voter);\\n    event PoolCreated(address indexed token0, address indexed token1, bool indexed stable, address pool, uint256);\\n    event SetCustomFee(address indexed pool, uint256 fee);\\n\\n    error FeeInvalid();\\n    error FeeTooHigh();\\n    error InvalidPool();\\n    error NotFeeManager();\\n    error NotPauser();\\n    error NotVoter();\\n    error PoolAlreadyExists();\\n    error SameAddress();\\n    error ZeroFee();\\n    error ZeroAddress();\\n\\n    /// @notice returns the number of pools created from this factory\\n    function allPoolsLength() external view returns (uint256);\\n\\n    /// @notice Is a valid pool created by this factory.\\n    /// @param .\\n    function isPool(address pool) external view returns (bool);\\n\\n    /// @notice Support for v3-style pools which wraps around getPool(tokenA,tokenB,stable)\\n    /// @dev fee is converted to stable boolean.\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param fee  1 if stable, 0 if volatile, else returns address(0)\\n    function getPool(address tokenA, address tokenB, int24 fee) external view returns (address);\\n\\n    /// @dev Only called once to set to Voter.sol - Voter does not have a function\\n    ///      to call this contract method, so once set it's immutable.\\n    ///      This also follows convention of setVoterAndDistributor() in VotingEscrow.sol\\n    /// @param _voter .\\n    function setVoter(address _voter) external;\\n\\n    function setPauser(address _pauser) external;\\n\\n    function setPauseState(bool _state) external;\\n\\n    function setFeeManager(address _feeManager) external;\\n\\n    /// @notice Set default fee for stable and volatile pools.\\n    /// @dev Throws if higher than maximum fee.\\n    ///      Throws if fee is zero.\\n    /// @param _stable Stable or volatile pool.\\n    /// @param _fee .\\n    function setFee(bool _stable, uint256 _fee) external;\\n\\n    /// @notice Set overriding fee for a pool from the default\\n    /// @dev A custom fee of zero means the default fee will be used.\\n    function setCustomFee(address _pool, uint256 _fee) external;\\n\\n    /// @notice Returns fee for a pool, as custom fees are possible.\\n    function getFee(address _pool, bool _stable) external view returns (uint256);\\n\\n    /// @notice Create a pool given two tokens and if they're stable/volatile\\n    /// @dev token order does not matter\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param stable .\\n    function createPool(address tokenA, address tokenB, bool stable) external returns (address pool);\\n\\n    /// @notice Support for v3-style pools which wraps around createPool(tokena,tokenB,stable)\\n    /// @dev fee is converted to stable boolean\\n    /// @dev token order does not matter\\n    /// @param tokenA .\\n    /// @param tokenB .\\n    /// @param fee 1 if stable, 0 if volatile, else revert\\n    function createPool(address tokenA, address tokenB, uint24 fee) external returns (address pool);\\n\\n    function isPaused() external view returns (bool);\\n\\n    function voter() external view returns (address);\\n\\n    function implementation() external view returns (address);\\n}\\n\\nstruct SwapLp {\\n  address lp;\\n  int24 poolType;\\n  address token0;\\n  address token1;\\n  address factory;\\n  uint256 poolFee;\\n}\\n\\ninterface IAerodromeSugar {\\n  function forSwaps(uint256 limit, uint256 offset) external view returns (SwapLp[]memory);\\n}\\n\\n\\n\\ninterface ISwapRouter {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        int24 tickSpacing;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n}\\ncontract SlipstreamRouterCall {\\n    function exactInputSingle(\\n        uint256 amountIn,\\n        uint256 _expected,\\n        address router,\\n        bytes calldata encodedRouterCall\\n    ) external returns (uint256) {\\n        (ISwapRouter.ExactInputSingleParams memory decodedCall) = abi.decode(\\n            encodedRouterCall,\\n            (ISwapRouter.ExactInputSingleParams)\\n        );\\n        decodedCall.amountIn = amountIn;\\n        decodedCall.amountOutMinimum = _expected;\\n        return ISwapRouter(router).exactInputSingle(decodedCall);\\n    }\\n\\n    function exactInput(\\n        uint256 amountIn,\\n        uint256 _expected,\\n        address router,\\n        address recipient,\\n        bytes memory path\\n    ) external returns (uint256) {\\n        ISwapRouter.ExactInputParams memory decodedCall = ISwapRouter.ExactInputParams({\\n            path: path,\\n            recipient: recipient,\\n            deadline: block.timestamp + 1000,\\n            amountIn: amountIn,\\n            amountOutMinimum: _expected\\n        });\\n        decodedCall.amountIn = amountIn;\\n        decodedCall.amountOutMinimum = _expected;\\n        return ISwapRouter(router).exactInput(decodedCall);\\n    }\\n\\n\\n    struct State {\\n        uint256 amountA;\\n        uint256 amountB;\\n        uint256 expectedA;\\n        uint256 expectedB;\\n\\n        address tokenA;\\n        address tokenB;\\n        bool stable;\\n        address dest;\\n    }\\n\\n    function addLiquidityV2(\\n        uint256 amountA,\\n        uint256 amountB,\\n        uint256 expectedA,\\n        uint256 expectedB,\\n        bytes memory encoding\\n    ) external returns (uint256 amountOut) {\\n        State memory state = State(amountA, amountB, expectedA, expectedB, address(0), address(0), false, address(0));\\n\\n        (address tokenA, address tokenB, bool stable, address dest, address router) = abi.decode(\\n            encoding,\\n            (address, address, bool, address, address)\\n        );\\n\\n        state.tokenA = tokenA;\\n        state.tokenB = tokenB;\\n        state.stable = stable;\\n        state.dest = dest;\\n        \\n        {\\n            (, , uint256 liquidity) = IAerodromeRouter(router).addLiquidity(\\n                state.tokenA,\\n                state.tokenB,\\n                state.stable,\\n                state.amountA,\\n                state.amountB,\\n                state.expectedA,\\n                state.expectedB,\\n                state.dest,\\n                block.timestamp + 1000\\n            );\\n\\n            return liquidity;\\n        }\\n    }\\n\\n\\n    function exactInputSingleV2(\\n        uint256 amountIn,\\n        uint256 expected,\\n        IAerodromeRouter router,\\n        address recipient,\\n        bytes memory encoding\\n    ) external returns (uint256 amountOut) {\\n        (address tokenIn, address tokenOut, bool stable, address factory) = abi.decode(\\n            encoding,\\n            (address, address, bool, address)\\n        );\\n        IAerodromeRouter.Route[] memory routes = new IAerodromeRouter.Route[](1);\\n\\n        routes[0] = IAerodromeRouter.Route({\\n            from: tokenIn,\\n            to: tokenOut,\\n            stable: stable,\\n            factory: factory\\n        });\\n        \\n        uint[] memory out = router.swapExactTokensForTokens(\\n            amountIn,\\n            expected,\\n            routes,\\n            recipient,\\n            block.timestamp + 1000\\n        );\\n\\n        return out[out.length - 1];\\n    }\\n}\",\"keccak256\":\"0xe60263f9a4aadda2480ed68151ab65963ae40f391106b5d4de0e4d7c8869d20b\",\"license\":\"BlueOak-1.0.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506115a6806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634d49dcf8146100515780636919e67414610081578063b908e456146100b1578063bdd613d3146100e1575b600080fd5b61006b6004803603810190610066919061094f565b610111565b60405161007891906109f5565b60405180910390f35b61009b60048036038101906100969190610a70565b6102e5565b6040516100a891906109f5565b60405180910390f35b6100cb60048036038101906100c69190610af8565b610395565b6040516100d891906109f5565b60405180910390f35b6100fb60048036038101906100f69190610b8f565b6105cc565b60405161010891906109f5565b60405180910390f35b60008060008060008580602001905181019061012d9190610c9c565b93509350935093506000600167ffffffffffffffff81111561015257610151610824565b5b60405190808252806020026020018201604052801561018b57816020015b6101786106b7565b8152602001906001900390816101705790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184151581526020018373ffffffffffffffffffffffffffffffffffffffff168152508160008151811061020757610206610d03565b5b602002602001018190525060008973ffffffffffffffffffffffffffffffffffffffff1663cac88ea98d8d858d6103e8426102429190610d61565b6040518663ffffffff1660e01b8152600401610262959493929190610ec6565b6000604051808303816000875af1158015610281573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102aa9190610ff8565b905080600182516102bb9190611041565b815181106102cc576102cb610d03565b5b6020026020010151965050505050505095945050505050565b60008083838101906102f791906111a9565b9050868160a0018181525050858160c00181815250508473ffffffffffffffffffffffffffffffffffffffff1663a026383e826040518263ffffffff1660e01b815260040161034691906112a6565b6020604051808303816000875af1158015610365573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038991906112c2565b91505095945050505050565b600080604051806101000160405280888152602001878152602001868152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060008060008060008780602001905181019061043891906112ef565b9450945094509450945084866080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838660a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828660c0019015159081151581525050818660e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008173ffffffffffffffffffffffffffffffffffffffff16635a47ddc388608001518960a001518a60c001518b600001518c602001518d604001518e606001518f60e001516103e84261054e9190610d61565b6040518a63ffffffff1660e01b815260040161057299989796959493929190611379565b6060604051808303816000875af1158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190611406565b925050508097505050505050505095945050505050565b6000806040518060a001604052808481526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016103e84261060a9190610d61565b815260200188815260200187815250905086816060018181525050858160800181815250508473ffffffffffffffffffffffffffffffffffffffff1663c04b8d59826040518263ffffffff1660e01b8152600401610668919061154e565b6020604051808303816000875af1158015610687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ab91906112c2565b91505095945050505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61074a81610737565b811461075557600080fd5b50565b60008135905061076781610741565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107988261076d565b9050919050565b60006107aa8261078d565b9050919050565b6107ba8161079f565b81146107c557600080fd5b50565b6000813590506107d7816107b1565b92915050565b6107e68161078d565b81146107f157600080fd5b50565b600081359050610803816107dd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61085c82610813565b810181811067ffffffffffffffff8211171561087b5761087a610824565b5b80604052505050565b600061088e610723565b905061089a8282610853565b919050565b600067ffffffffffffffff8211156108ba576108b9610824565b5b6108c382610813565b9050602081019050919050565b82818337600083830152505050565b60006108f26108ed8461089f565b610884565b90508281526020810184848401111561090e5761090d61080e565b5b6109198482856108d0565b509392505050565b600082601f83011261093657610935610809565b5b81356109468482602086016108df565b91505092915050565b600080600080600060a0868803121561096b5761096a61072d565b5b600061097988828901610758565b955050602061098a88828901610758565b945050604061099b888289016107c8565b93505060606109ac888289016107f4565b925050608086013567ffffffffffffffff8111156109cd576109cc610732565b5b6109d988828901610921565b9150509295509295909350565b6109ef81610737565b82525050565b6000602082019050610a0a60008301846109e6565b92915050565b600080fd5b600080fd5b60008083601f840112610a3057610a2f610809565b5b8235905067ffffffffffffffff811115610a4d57610a4c610a10565b5b602083019150836001820283011115610a6957610a68610a15565b5b9250929050565b600080600080600060808688031215610a8c57610a8b61072d565b5b6000610a9a88828901610758565b9550506020610aab88828901610758565b9450506040610abc888289016107f4565b935050606086013567ffffffffffffffff811115610add57610adc610732565b5b610ae988828901610a1a565b92509250509295509295909350565b600080600080600060a08688031215610b1457610b1361072d565b5b6000610b2288828901610758565b9550506020610b3388828901610758565b9450506040610b4488828901610758565b9350506060610b5588828901610758565b925050608086013567ffffffffffffffff811115610b7657610b75610732565b5b610b8288828901610921565b9150509295509295909350565b600080600080600060a08688031215610bab57610baa61072d565b5b6000610bb988828901610758565b9550506020610bca88828901610758565b9450506040610bdb888289016107f4565b9350506060610bec888289016107f4565b925050608086013567ffffffffffffffff811115610c0d57610c0c610732565b5b610c1988828901610921565b9150509295509295909350565b6000610c318261076d565b9050919050565b610c4181610c26565b8114610c4c57600080fd5b50565b600081519050610c5e81610c38565b92915050565b60008115159050919050565b610c7981610c64565b8114610c8457600080fd5b50565b600081519050610c9681610c70565b92915050565b60008060008060808587031215610cb657610cb561072d565b5b6000610cc487828801610c4f565b9450506020610cd587828801610c4f565b9350506040610ce687828801610c87565b9250506060610cf787828801610c4f565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6c82610737565b9150610d7783610737565b9250828201905080821115610d8f57610d8e610d32565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610dca8161078d565b82525050565b610dd981610c64565b82525050565b608082016000820151610df56000850182610dc1565b506020820151610e086020850182610dc1565b506040820151610e1b6040850182610dd0565b506060820151610e2e6060850182610dc1565b50505050565b6000610e408383610ddf565b60808301905092915050565b6000602082019050919050565b6000610e6482610d95565b610e6e8185610da0565b9350610e7983610db1565b8060005b83811015610eaa578151610e918882610e34565b9750610e9c83610e4c565b925050600181019050610e7d565b5085935050505092915050565b610ec08161078d565b82525050565b600060a082019050610edb60008301886109e6565b610ee860208301876109e6565b8181036040830152610efa8186610e59565b9050610f096060830185610eb7565b610f1660808301846109e6565b9695505050505050565b600067ffffffffffffffff821115610f3b57610f3a610824565b5b602082029050602081019050919050565b600081519050610f5b81610741565b92915050565b6000610f74610f6f84610f20565b610884565b90508083825260208201905060208402830185811115610f9757610f96610a15565b5b835b81811015610fc05780610fac8882610f4c565b845260208401935050602081019050610f99565b5050509392505050565b600082601f830112610fdf57610fde610809565b5b8151610fef848260208601610f61565b91505092915050565b60006020828403121561100e5761100d61072d565b5b600082015167ffffffffffffffff81111561102c5761102b610732565b5b61103884828501610fca565b91505092915050565b600061104c82610737565b915061105783610737565b925082820390508181111561106f5761106e610d32565b5b92915050565b600080fd5b60008160020b9050919050565b6110908161107a565b811461109b57600080fd5b50565b6000813590506110ad81611087565b92915050565b6110bc8161076d565b81146110c757600080fd5b50565b6000813590506110d9816110b3565b92915050565b600061010082840312156110f6576110f5611075565b5b611101610100610884565b90506000611111848285016107f4565b6000830152506020611125848285016107f4565b60208301525060406111398482850161109e565b604083015250606061114d848285016107f4565b606083015250608061116184828501610758565b60808301525060a061117584828501610758565b60a08301525060c061118984828501610758565b60c08301525060e061119d848285016110ca565b60e08301525092915050565b600061010082840312156111c0576111bf61072d565b5b60006111ce848285016110df565b91505092915050565b6111e08161107a565b82525050565b6111ef81610737565b82525050565b6111fe8161076d565b82525050565b6101008201600082015161121b6000850182610dc1565b50602082015161122e6020850182610dc1565b50604082015161124160408501826111d7565b5060608201516112546060850182610dc1565b50608082015161126760808501826111e6565b5060a082015161127a60a08501826111e6565b5060c082015161128d60c08501826111e6565b5060e08201516112a060e08501826111f5565b50505050565b6000610100820190506112bc6000830184611204565b92915050565b6000602082840312156112d8576112d761072d565b5b60006112e684828501610f4c565b91505092915050565b600080600080600060a0868803121561130b5761130a61072d565b5b600061131988828901610c4f565b955050602061132a88828901610c4f565b945050604061133b88828901610c87565b935050606061134c88828901610c4f565b925050608061135d88828901610c4f565b9150509295509295909350565b61137381610c64565b82525050565b60006101208201905061138f600083018c610eb7565b61139c602083018b610eb7565b6113a9604083018a61136a565b6113b660608301896109e6565b6113c360808301886109e6565b6113d060a08301876109e6565b6113dd60c08301866109e6565b6113ea60e0830185610eb7565b6113f86101008301846109e6565b9a9950505050505050505050565b60008060006060848603121561141f5761141e61072d565b5b600061142d86828701610f4c565b935050602061143e86828701610f4c565b925050604061144f86828701610f4c565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611493578082015181840152602081019050611478565b60008484015250505050565b60006114aa82611459565b6114b48185611464565b93506114c4818560208601611475565b6114cd81610813565b840191505092915050565b600060a08301600083015184820360008601526114f5828261149f565b915050602083015161150a6020860182610dc1565b50604083015161151d60408601826111e6565b50606083015161153060608601826111e6565b50608083015161154360808601826111e6565b508091505092915050565b6000602082019050818103600083015261156881846114d8565b90509291505056fea2646970667358221220f67bb506341a97f698937b499f4fed562659fe82bf6d4e5ee0e1fc9aacd21cd264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80634d49dcf8146100515780636919e67414610081578063b908e456146100b1578063bdd613d3146100e1575b600080fd5b61006b6004803603810190610066919061094f565b610111565b60405161007891906109f5565b60405180910390f35b61009b60048036038101906100969190610a70565b6102e5565b6040516100a891906109f5565b60405180910390f35b6100cb60048036038101906100c69190610af8565b610395565b6040516100d891906109f5565b60405180910390f35b6100fb60048036038101906100f69190610b8f565b6105cc565b60405161010891906109f5565b60405180910390f35b60008060008060008580602001905181019061012d9190610c9c565b93509350935093506000600167ffffffffffffffff81111561015257610151610824565b5b60405190808252806020026020018201604052801561018b57816020015b6101786106b7565b8152602001906001900390816101705790505b50905060405180608001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184151581526020018373ffffffffffffffffffffffffffffffffffffffff168152508160008151811061020757610206610d03565b5b602002602001018190525060008973ffffffffffffffffffffffffffffffffffffffff1663cac88ea98d8d858d6103e8426102429190610d61565b6040518663ffffffff1660e01b8152600401610262959493929190610ec6565b6000604051808303816000875af1158015610281573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102aa9190610ff8565b905080600182516102bb9190611041565b815181106102cc576102cb610d03565b5b6020026020010151965050505050505095945050505050565b60008083838101906102f791906111a9565b9050868160a0018181525050858160c00181815250508473ffffffffffffffffffffffffffffffffffffffff1663a026383e826040518263ffffffff1660e01b815260040161034691906112a6565b6020604051808303816000875af1158015610365573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038991906112c2565b91505095945050505050565b600080604051806101000160405280888152602001878152602001868152602001858152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff16815250905060008060008060008780602001905181019061043891906112ef565b9450945094509450945084866080019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050838660a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050828660c0019015159081151581525050818660e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060008173ffffffffffffffffffffffffffffffffffffffff16635a47ddc388608001518960a001518a60c001518b600001518c602001518d604001518e606001518f60e001516103e84261054e9190610d61565b6040518a63ffffffff1660e01b815260040161057299989796959493929190611379565b6060604051808303816000875af1158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190611406565b925050508097505050505050505095945050505050565b6000806040518060a001604052808481526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016103e84261060a9190610d61565b815260200188815260200187815250905086816060018181525050858160800181815250508473ffffffffffffffffffffffffffffffffffffffff1663c04b8d59826040518263ffffffff1660e01b8152600401610668919061154e565b6020604051808303816000875af1158015610687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ab91906112c2565b91505095945050505050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61074a81610737565b811461075557600080fd5b50565b60008135905061076781610741565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107988261076d565b9050919050565b60006107aa8261078d565b9050919050565b6107ba8161079f565b81146107c557600080fd5b50565b6000813590506107d7816107b1565b92915050565b6107e68161078d565b81146107f157600080fd5b50565b600081359050610803816107dd565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61085c82610813565b810181811067ffffffffffffffff8211171561087b5761087a610824565b5b80604052505050565b600061088e610723565b905061089a8282610853565b919050565b600067ffffffffffffffff8211156108ba576108b9610824565b5b6108c382610813565b9050602081019050919050565b82818337600083830152505050565b60006108f26108ed8461089f565b610884565b90508281526020810184848401111561090e5761090d61080e565b5b6109198482856108d0565b509392505050565b600082601f83011261093657610935610809565b5b81356109468482602086016108df565b91505092915050565b600080600080600060a0868803121561096b5761096a61072d565b5b600061097988828901610758565b955050602061098a88828901610758565b945050604061099b888289016107c8565b93505060606109ac888289016107f4565b925050608086013567ffffffffffffffff8111156109cd576109cc610732565b5b6109d988828901610921565b9150509295509295909350565b6109ef81610737565b82525050565b6000602082019050610a0a60008301846109e6565b92915050565b600080fd5b600080fd5b60008083601f840112610a3057610a2f610809565b5b8235905067ffffffffffffffff811115610a4d57610a4c610a10565b5b602083019150836001820283011115610a6957610a68610a15565b5b9250929050565b600080600080600060808688031215610a8c57610a8b61072d565b5b6000610a9a88828901610758565b9550506020610aab88828901610758565b9450506040610abc888289016107f4565b935050606086013567ffffffffffffffff811115610add57610adc610732565b5b610ae988828901610a1a565b92509250509295509295909350565b600080600080600060a08688031215610b1457610b1361072d565b5b6000610b2288828901610758565b9550506020610b3388828901610758565b9450506040610b4488828901610758565b9350506060610b5588828901610758565b925050608086013567ffffffffffffffff811115610b7657610b75610732565b5b610b8288828901610921565b9150509295509295909350565b600080600080600060a08688031215610bab57610baa61072d565b5b6000610bb988828901610758565b9550506020610bca88828901610758565b9450506040610bdb888289016107f4565b9350506060610bec888289016107f4565b925050608086013567ffffffffffffffff811115610c0d57610c0c610732565b5b610c1988828901610921565b9150509295509295909350565b6000610c318261076d565b9050919050565b610c4181610c26565b8114610c4c57600080fd5b50565b600081519050610c5e81610c38565b92915050565b60008115159050919050565b610c7981610c64565b8114610c8457600080fd5b50565b600081519050610c9681610c70565b92915050565b60008060008060808587031215610cb657610cb561072d565b5b6000610cc487828801610c4f565b9450506020610cd587828801610c4f565b9350506040610ce687828801610c87565b9250506060610cf787828801610c4f565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6c82610737565b9150610d7783610737565b9250828201905080821115610d8f57610d8e610d32565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610dca8161078d565b82525050565b610dd981610c64565b82525050565b608082016000820151610df56000850182610dc1565b506020820151610e086020850182610dc1565b506040820151610e1b6040850182610dd0565b506060820151610e2e6060850182610dc1565b50505050565b6000610e408383610ddf565b60808301905092915050565b6000602082019050919050565b6000610e6482610d95565b610e6e8185610da0565b9350610e7983610db1565b8060005b83811015610eaa578151610e918882610e34565b9750610e9c83610e4c565b925050600181019050610e7d565b5085935050505092915050565b610ec08161078d565b82525050565b600060a082019050610edb60008301886109e6565b610ee860208301876109e6565b8181036040830152610efa8186610e59565b9050610f096060830185610eb7565b610f1660808301846109e6565b9695505050505050565b600067ffffffffffffffff821115610f3b57610f3a610824565b5b602082029050602081019050919050565b600081519050610f5b81610741565b92915050565b6000610f74610f6f84610f20565b610884565b90508083825260208201905060208402830185811115610f9757610f96610a15565b5b835b81811015610fc05780610fac8882610f4c565b845260208401935050602081019050610f99565b5050509392505050565b600082601f830112610fdf57610fde610809565b5b8151610fef848260208601610f61565b91505092915050565b60006020828403121561100e5761100d61072d565b5b600082015167ffffffffffffffff81111561102c5761102b610732565b5b61103884828501610fca565b91505092915050565b600061104c82610737565b915061105783610737565b925082820390508181111561106f5761106e610d32565b5b92915050565b600080fd5b60008160020b9050919050565b6110908161107a565b811461109b57600080fd5b50565b6000813590506110ad81611087565b92915050565b6110bc8161076d565b81146110c757600080fd5b50565b6000813590506110d9816110b3565b92915050565b600061010082840312156110f6576110f5611075565b5b611101610100610884565b90506000611111848285016107f4565b6000830152506020611125848285016107f4565b60208301525060406111398482850161109e565b604083015250606061114d848285016107f4565b606083015250608061116184828501610758565b60808301525060a061117584828501610758565b60a08301525060c061118984828501610758565b60c08301525060e061119d848285016110ca565b60e08301525092915050565b600061010082840312156111c0576111bf61072d565b5b60006111ce848285016110df565b91505092915050565b6111e08161107a565b82525050565b6111ef81610737565b82525050565b6111fe8161076d565b82525050565b6101008201600082015161121b6000850182610dc1565b50602082015161122e6020850182610dc1565b50604082015161124160408501826111d7565b5060608201516112546060850182610dc1565b50608082015161126760808501826111e6565b5060a082015161127a60a08501826111e6565b5060c082015161128d60c08501826111e6565b5060e08201516112a060e08501826111f5565b50505050565b6000610100820190506112bc6000830184611204565b92915050565b6000602082840312156112d8576112d761072d565b5b60006112e684828501610f4c565b91505092915050565b600080600080600060a0868803121561130b5761130a61072d565b5b600061131988828901610c4f565b955050602061132a88828901610c4f565b945050604061133b88828901610c87565b935050606061134c88828901610c4f565b925050608061135d88828901610c4f565b9150509295509295909350565b61137381610c64565b82525050565b60006101208201905061138f600083018c610eb7565b61139c602083018b610eb7565b6113a9604083018a61136a565b6113b660608301896109e6565b6113c360808301886109e6565b6113d060a08301876109e6565b6113dd60c08301866109e6565b6113ea60e0830185610eb7565b6113f86101008301846109e6565b9a9950505050505050505050565b60008060006060848603121561141f5761141e61072d565b5b600061142d86828701610f4c565b935050602061143e86828701610f4c565b925050604061144f86828701610f4c565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b83811015611493578082015181840152602081019050611478565b60008484015250505050565b60006114aa82611459565b6114b48185611464565b93506114c4818560208601611475565b6114cd81610813565b840191505092915050565b600060a08301600083015184820360008601526114f5828261149f565b915050602083015161150a6020860182610dc1565b50604083015161151d60408601826111e6565b50606083015161153060608601826111e6565b50608083015161154360808601826111e6565b508091505092915050565b6000602082019050818103600083015261156881846114d8565b90509291505056fea2646970667358221220f67bb506341a97f698937b499f4fed562659fe82bf6d4e5ee0e1fc9aacd21cd264736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}