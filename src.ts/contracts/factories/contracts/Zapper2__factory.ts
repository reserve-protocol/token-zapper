/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Zapper2, Zapper2Interface } from "../../contracts/Zapper2";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWrappedNative",
        name: "wrappedNative_",
        type: "address",
      },
      {
        internalType: "contract ZapperExecutor",
        name: "executor_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct ZapParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zap",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct ZapParams",
        name: "params",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "deployer",
            type: "address",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "address[]",
                name: "assets",
                type: "address[]",
              },
              {
                internalType: "uint256[]",
                name: "amounts",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "initialShares",
                type: "uint256",
              },
            ],
            internalType: "struct IFolio.FolioBasicDetails",
            name: "basicDetails",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "auctionDelay",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "auctionLength",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "recipient",
                    type: "address",
                  },
                  {
                    internalType: "uint96",
                    name: "portion",
                    type: "uint96",
                  },
                ],
                internalType: "struct IFolio.FeeRecipient[]",
                name: "feeRecipients",
                type: "tuple[]",
              },
              {
                internalType: "uint256",
                name: "tvlFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "mintFee",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "mandate",
                type: "string",
              },
            ],
            internalType: "struct IFolio.FolioAdditionalDetails",
            name: "additionalDetails",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "existingTradeProposers",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "tradeLaunchers",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "vibesOfficers",
                type: "address[]",
              },
            ],
            internalType: "struct GovRoles",
            name: "govRoles",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isGoverned",
            type: "bool",
          },
          {
            internalType: "contract IVotes",
            name: "stToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint48",
                name: "votingDelay",
                type: "uint48",
              },
              {
                internalType: "uint32",
                name: "votingPeriod",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "proposalThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "quorumPercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timelockDelay",
                type: "uint256",
              },
              {
                internalType: "address[]",
                name: "guardians",
                type: "address[]",
              },
            ],
            internalType: "struct IGovernanceDeployer.GovParams",
            name: "ownerGovParams",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint48",
                name: "votingDelay",
                type: "uint48",
              },
              {
                internalType: "uint32",
                name: "votingPeriod",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "proposalThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "quorumPercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timelockDelay",
                type: "uint256",
              },
              {
                internalType: "address[]",
                name: "guardians",
                type: "address[]",
              },
            ],
            internalType: "struct IGovernanceDeployer.GovParams",
            name: "tradingGovParams",
            type: "tuple",
          },
        ],
        internalType: "struct DeployFolioConfig",
        name: "config",
        type: "tuple",
      },
    ],
    name: "zapDeploy",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "out",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
        ],
        internalType: "struct ZapERC20Params",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zapERC20",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
        ],
        internalType: "struct ZapERC20Params",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zapETH",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
        ],
        internalType: "struct ZapERC20Params",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zapToETH",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "";

type Zapper2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Zapper2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Zapper2__factory extends ContractFactory {
  constructor(...args: Zapper2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    wrappedNative_: PromiseOrValue<string>,
    executor_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Zapper2> {
    return super.deploy(
      wrappedNative_,
      executor_,
      overrides || {}
    ) as Promise<Zapper2>;
  }
  override getDeployTransaction(
    wrappedNative_: PromiseOrValue<string>,
    executor_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      wrappedNative_,
      executor_,
      overrides || {}
    );
  }
  override attach(address: string): Zapper2 {
    return super.attach(address) as Zapper2;
  }
  override connect(signer: Signer): Zapper2__factory {
    return super.connect(signer) as Zapper2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Zapper2Interface {
    return new utils.Interface(_abi) as Zapper2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Zapper2 {
    return new Contract(address, _abi, signerOrProvider) as Zapper2;
  }
}
