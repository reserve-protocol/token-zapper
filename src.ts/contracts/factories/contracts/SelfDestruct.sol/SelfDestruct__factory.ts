/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  SelfDestruct,
  SelfDestructInterface,
} from "../../../contracts/SelfDestruct.sol/SelfDestruct";

const _abi = [
  {
    inputs: [],
    name: "destroy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060848061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806383197ef014602d575b600080fd5b60336035565b005b3373ffffffffffffffffffffffffffffffffffffffff16fffea26469706673582212201c851d10770fdbba267962bb1b483df8a6aba15a609758859ee580e4947e208564736f6c63430008110033";

type SelfDestructConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SelfDestructConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SelfDestruct__factory extends ContractFactory {
  constructor(...args: SelfDestructConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SelfDestruct> {
    return super.deploy(overrides || {}) as Promise<SelfDestruct>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SelfDestruct {
    return super.attach(address) as SelfDestruct;
  }
  override connect(signer: Signer): SelfDestruct__factory {
    return super.connect(signer) as SelfDestruct__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SelfDestructInterface {
    return new utils.Interface(_abi) as SelfDestructInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SelfDestruct {
    return new Contract(address, _abi, signerOrProvider) as SelfDestruct;
  }
}
