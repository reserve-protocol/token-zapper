/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IMaverickV2PoolLens {
  export type AddParamsSpecificationStruct = {
    slippageFactorD18: PromiseOrValue<BigNumberish>;
    numberOfPriceBreaksPerSide: PromiseOrValue<BigNumberish>;
    targetAmount: PromiseOrValue<BigNumberish>;
    targetIsA: PromiseOrValue<boolean>;
  };

  export type AddParamsSpecificationStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    boolean
  ] & {
    slippageFactorD18: BigNumber;
    numberOfPriceBreaksPerSide: BigNumber;
    targetAmount: BigNumber;
    targetIsA: boolean;
  };

  export type AddParamsViewInputsStruct = {
    pool: PromiseOrValue<string>;
    kind: PromiseOrValue<BigNumberish>;
    ticks: PromiseOrValue<BigNumberish>[];
    relativeLiquidityAmounts: PromiseOrValue<BigNumberish>[];
    addSpec: IMaverickV2PoolLens.AddParamsSpecificationStruct;
  };

  export type AddParamsViewInputsStructOutput = [
    string,
    number,
    number[],
    BigNumber[],
    IMaverickV2PoolLens.AddParamsSpecificationStructOutput
  ] & {
    pool: string;
    kind: number;
    ticks: number[];
    relativeLiquidityAmounts: BigNumber[];
    addSpec: IMaverickV2PoolLens.AddParamsSpecificationStructOutput;
  };

  export type TickDeltasStruct = {
    deltaAOut: PromiseOrValue<BigNumberish>;
    deltaBOut: PromiseOrValue<BigNumberish>;
    deltaAs: PromiseOrValue<BigNumberish>[];
    deltaBs: PromiseOrValue<BigNumberish>[];
  };

  export type TickDeltasStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber[],
    BigNumber[]
  ] & {
    deltaAOut: BigNumber;
    deltaBOut: BigNumber;
    deltaAs: BigNumber[];
    deltaBs: BigNumber[];
  };

  export type BoostedPositionSpecificationStruct = {
    pool: PromiseOrValue<string>;
    binIds: PromiseOrValue<BigNumberish>[];
    ratios: PromiseOrValue<BigNumberish>[];
    kind: PromiseOrValue<BigNumberish>;
  };

  export type BoostedPositionSpecificationStructOutput = [
    string,
    number[],
    BigNumber[],
    number
  ] & { pool: string; binIds: number[]; ratios: BigNumber[]; kind: number };

  export type CreateAndAddParamsViewInputsStruct = {
    feeAIn: PromiseOrValue<BigNumberish>;
    feeBIn: PromiseOrValue<BigNumberish>;
    tickSpacing: PromiseOrValue<BigNumberish>;
    lookback: PromiseOrValue<BigNumberish>;
    tokenA: PromiseOrValue<string>;
    tokenB: PromiseOrValue<string>;
    activeTick: PromiseOrValue<BigNumberish>;
    kinds: PromiseOrValue<BigNumberish>;
    initialTargetB: PromiseOrValue<BigNumberish>;
    sqrtPrice: PromiseOrValue<BigNumberish>;
    kind: PromiseOrValue<BigNumberish>;
    ticks: PromiseOrValue<BigNumberish>[];
    relativeLiquidityAmounts: PromiseOrValue<BigNumberish>[];
    targetAmount: PromiseOrValue<BigNumberish>;
    targetIsA: PromiseOrValue<boolean>;
  };

  export type CreateAndAddParamsViewInputsStructOutput = [
    BigNumber,
    BigNumber,
    number,
    number,
    string,
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    number,
    number[],
    BigNumber[],
    BigNumber,
    boolean
  ] & {
    feeAIn: BigNumber;
    feeBIn: BigNumber;
    tickSpacing: number;
    lookback: number;
    tokenA: string;
    tokenB: string;
    activeTick: number;
    kinds: number;
    initialTargetB: BigNumber;
    sqrtPrice: BigNumber;
    kind: number;
    ticks: number[];
    relativeLiquidityAmounts: BigNumber[];
    targetAmount: BigNumber;
    targetIsA: boolean;
  };

  export type CreateAndAddParamsInputsStruct = {
    feeAIn: PromiseOrValue<BigNumberish>;
    feeBIn: PromiseOrValue<BigNumberish>;
    tickSpacing: PromiseOrValue<BigNumberish>;
    lookback: PromiseOrValue<BigNumberish>;
    tokenA: PromiseOrValue<string>;
    tokenB: PromiseOrValue<string>;
    activeTick: PromiseOrValue<BigNumberish>;
    kinds: PromiseOrValue<BigNumberish>;
    donateParams: IMaverickV2Pool.AddLiquidityParamsStruct;
    swapAmount: PromiseOrValue<BigNumberish>;
    addParams: IMaverickV2Pool.AddLiquidityParamsStruct;
    packedAddParams: PromiseOrValue<BytesLike>[];
    deltaAOut: PromiseOrValue<BigNumberish>;
    deltaBOut: PromiseOrValue<BigNumberish>;
    preAddReserveA: PromiseOrValue<BigNumberish>;
    preAddReserveB: PromiseOrValue<BigNumberish>;
  };

  export type CreateAndAddParamsInputsStructOutput = [
    BigNumber,
    BigNumber,
    number,
    number,
    string,
    string,
    number,
    number,
    IMaverickV2Pool.AddLiquidityParamsStructOutput,
    BigNumber,
    IMaverickV2Pool.AddLiquidityParamsStructOutput,
    string[],
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    feeAIn: BigNumber;
    feeBIn: BigNumber;
    tickSpacing: number;
    lookback: number;
    tokenA: string;
    tokenB: string;
    activeTick: number;
    kinds: number;
    donateParams: IMaverickV2Pool.AddLiquidityParamsStructOutput;
    swapAmount: BigNumber;
    addParams: IMaverickV2Pool.AddLiquidityParamsStructOutput;
    packedAddParams: string[];
    deltaAOut: BigNumber;
    deltaBOut: BigNumber;
    preAddReserveA: BigNumber;
    preAddReserveB: BigNumber;
  };

  export type BinPositionKindsStruct = {
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
  };

  export type BinPositionKindsStructOutput = [
    [BigNumber, BigNumber, BigNumber, BigNumber]
  ] & { values: [BigNumber, BigNumber, BigNumber, BigNumber] };

  export type ReservesStruct = {
    amountA: PromiseOrValue<BigNumberish>;
    amountB: PromiseOrValue<BigNumberish>;
  };

  export type ReservesStructOutput = [BigNumber, BigNumber] & {
    amountA: BigNumber;
    amountB: BigNumber;
  };

  export type PoolStateStruct = {
    tickStateMapping: IMaverickV2Pool.TickStateStruct[];
    binStateMapping: IMaverickV2Pool.BinStateStruct[];
    binIdByTickKindMapping: IMaverickV2PoolLens.BinPositionKindsStruct[];
    state: IMaverickV2Pool.StateStruct;
    protocolFees: IMaverickV2PoolLens.ReservesStruct;
  };

  export type PoolStateStructOutput = [
    IMaverickV2Pool.TickStateStructOutput[],
    IMaverickV2Pool.BinStateStructOutput[],
    IMaverickV2PoolLens.BinPositionKindsStructOutput[],
    IMaverickV2Pool.StateStructOutput,
    IMaverickV2PoolLens.ReservesStructOutput
  ] & {
    tickStateMapping: IMaverickV2Pool.TickStateStructOutput[];
    binStateMapping: IMaverickV2Pool.BinStateStructOutput[];
    binIdByTickKindMapping: IMaverickV2PoolLens.BinPositionKindsStructOutput[];
    state: IMaverickV2Pool.StateStructOutput;
    protocolFees: IMaverickV2PoolLens.ReservesStructOutput;
  };
}

export declare namespace IMaverickV2Pool {
  export type AddLiquidityParamsStruct = {
    kind: PromiseOrValue<BigNumberish>;
    ticks: PromiseOrValue<BigNumberish>[];
    amounts: PromiseOrValue<BigNumberish>[];
  };

  export type AddLiquidityParamsStructOutput = [
    number,
    number[],
    BigNumber[]
  ] & { kind: number; ticks: number[]; amounts: BigNumber[] };

  export type TickStateStruct = {
    reserveA: PromiseOrValue<BigNumberish>;
    reserveB: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    binIdsByTick: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ];
  };

  export type TickStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    [number, number, number, number]
  ] & {
    reserveA: BigNumber;
    reserveB: BigNumber;
    totalSupply: BigNumber;
    binIdsByTick: [number, number, number, number];
  };

  export type BinStateStruct = {
    mergeBinBalance: PromiseOrValue<BigNumberish>;
    tickBalance: PromiseOrValue<BigNumberish>;
    totalSupply: PromiseOrValue<BigNumberish>;
    kind: PromiseOrValue<BigNumberish>;
    tick: PromiseOrValue<BigNumberish>;
    mergeId: PromiseOrValue<BigNumberish>;
  };

  export type BinStateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    number
  ] & {
    mergeBinBalance: BigNumber;
    tickBalance: BigNumber;
    totalSupply: BigNumber;
    kind: number;
    tick: number;
    mergeId: number;
  };

  export type StateStruct = {
    reserveA: PromiseOrValue<BigNumberish>;
    reserveB: PromiseOrValue<BigNumberish>;
    lastTwaD8: PromiseOrValue<BigNumberish>;
    lastLogPriceD8: PromiseOrValue<BigNumberish>;
    lastTimestamp: PromiseOrValue<BigNumberish>;
    activeTick: PromiseOrValue<BigNumberish>;
    isLocked: PromiseOrValue<boolean>;
    binCounter: PromiseOrValue<BigNumberish>;
    protocolFeeRatioD3: PromiseOrValue<BigNumberish>;
  };

  export type StateStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    boolean,
    number,
    number
  ] & {
    reserveA: BigNumber;
    reserveB: BigNumber;
    lastTwaD8: BigNumber;
    lastLogPriceD8: BigNumber;
    lastTimestamp: number;
    activeTick: number;
    isLocked: boolean;
    binCounter: number;
    protocolFeeRatioD3: number;
  };
}

export interface IMaverickV2PoolLensInterface extends utils.Interface {
  functions: {
    "getAddLiquidityParams((address,uint8,int32[],uint128[],(uint256,uint256,uint256,bool)))": FunctionFragment;
    "getCreateBoostedPositionParams((address,uint32[],uint128[],uint8),(uint256,uint256,uint256,bool))": FunctionFragment;
    "getCreatePoolAtPriceAndAddLiquidityParams((uint64,uint64,uint16,uint32,address,address,int32,uint8,uint256,uint256,uint8,int32[],uint128[],uint256,bool),address)": FunctionFragment;
    "getFullPoolState(address,uint32,uint32)": FunctionFragment;
    "getPoolPrice(address)": FunctionFragment;
    "getPoolSqrtPrice(address)": FunctionFragment;
    "getTickSqrtPriceAndL(address,int32)": FunctionFragment;
    "getTicks(address,int32,int32)": FunctionFragment;
    "getTicksAroundActive(address,int32)": FunctionFragment;
    "getTicksAroundActiveWLiquidity(address,int32)": FunctionFragment;
    "tokenScales(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getAddLiquidityParams"
      | "getCreateBoostedPositionParams"
      | "getCreatePoolAtPriceAndAddLiquidityParams"
      | "getFullPoolState"
      | "getPoolPrice"
      | "getPoolSqrtPrice"
      | "getTickSqrtPriceAndL"
      | "getTicks"
      | "getTicksAroundActive"
      | "getTicksAroundActiveWLiquidity"
      | "tokenScales"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAddLiquidityParams",
    values: [IMaverickV2PoolLens.AddParamsViewInputsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreateBoostedPositionParams",
    values: [
      IMaverickV2PoolLens.BoostedPositionSpecificationStruct,
      IMaverickV2PoolLens.AddParamsSpecificationStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatePoolAtPriceAndAddLiquidityParams",
    values: [
      IMaverickV2PoolLens.CreateAndAddParamsViewInputsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFullPoolState",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolSqrtPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTickSqrtPriceAndL",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicks",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicksAroundActive",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTicksAroundActiveWLiquidity",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenScales",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAddLiquidityParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreateBoostedPositionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatePoolAtPriceAndAddLiquidityParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFullPoolState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolSqrtPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTickSqrtPriceAndL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTicks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTicksAroundActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTicksAroundActiveWLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenScales",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMaverickV2PoolLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMaverickV2PoolLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAddLiquidityParams(
      params: IMaverickV2PoolLens.AddParamsViewInputsStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        BigNumber[],
        IMaverickV2Pool.AddLiquidityParamsStructOutput[],
        IMaverickV2PoolLens.TickDeltasStructOutput[]
      ] & {
        packedSqrtPriceBreaks: string;
        packedArgs: string[];
        sqrtPriceBreaks: BigNumber[];
        addParams: IMaverickV2Pool.AddLiquidityParamsStructOutput[];
        tickDeltas: IMaverickV2PoolLens.TickDeltasStructOutput[];
      }
    >;

    getCreateBoostedPositionParams(
      bpSpec: IMaverickV2PoolLens.BoostedPositionSpecificationStruct,
      addSpec: IMaverickV2PoolLens.AddParamsSpecificationStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        BigNumber[],
        IMaverickV2Pool.AddLiquidityParamsStructOutput[],
        IMaverickV2PoolLens.TickDeltasStructOutput[]
      ] & {
        packedSqrtPriceBreaks: string;
        packedArgs: string[];
        sqrtPriceBreaks: BigNumber[];
        addParams: IMaverickV2Pool.AddLiquidityParamsStructOutput[];
        tickDeltas: IMaverickV2PoolLens.TickDeltasStructOutput[];
      }
    >;

    getCreatePoolAtPriceAndAddLiquidityParams(
      params: IMaverickV2PoolLens.CreateAndAddParamsViewInputsStruct,
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IMaverickV2PoolLens.CreateAndAddParamsInputsStructOutput] & {
        output: IMaverickV2PoolLens.CreateAndAddParamsInputsStructOutput;
      }
    >;

    getFullPoolState(
      pool: PromiseOrValue<string>,
      binStart: PromiseOrValue<BigNumberish>,
      binEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [IMaverickV2PoolLens.PoolStateStructOutput] & {
        poolState: IMaverickV2PoolLens.PoolStateStructOutput;
      }
    >;

    getPoolPrice(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getPoolSqrtPrice(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sqrtPrice: BigNumber }>;

    getTickSqrtPriceAndL(
      pool: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { sqrtPrice: BigNumber; liquidity: BigNumber }
    >;

    getTicks(
      pool: PromiseOrValue<string>,
      tickStart: PromiseOrValue<BigNumberish>,
      tickEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], IMaverickV2Pool.TickStateStructOutput[]] & {
        ticks: number[];
        tickStates: IMaverickV2Pool.TickStateStructOutput[];
      }
    >;

    getTicksAroundActive(
      pool: PromiseOrValue<string>,
      tickRadius: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], IMaverickV2Pool.TickStateStructOutput[]] & {
        ticks: number[];
        tickStates: IMaverickV2Pool.TickStateStructOutput[];
      }
    >;

    getTicksAroundActiveWLiquidity(
      pool: PromiseOrValue<string>,
      tickRadius: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number[],
        IMaverickV2Pool.TickStateStructOutput[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        IMaverickV2Pool.StateStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        ticks: number[];
        tickStates: IMaverickV2Pool.TickStateStructOutput[];
        liquidities: BigNumber[];
        sqrtLowerTickPrices: BigNumber[];
        sqrtUpperTickPrices: BigNumber[];
        poolState: IMaverickV2Pool.StateStructOutput;
        sqrtPrice: BigNumber;
        feeAIn: BigNumber;
        feeBIn: BigNumber;
      }
    >;

    tokenScales(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAScale: BigNumber;
        tokenBScale: BigNumber;
      }
    >;
  };

  getAddLiquidityParams(
    params: IMaverickV2PoolLens.AddParamsViewInputsStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string[],
      BigNumber[],
      IMaverickV2Pool.AddLiquidityParamsStructOutput[],
      IMaverickV2PoolLens.TickDeltasStructOutput[]
    ] & {
      packedSqrtPriceBreaks: string;
      packedArgs: string[];
      sqrtPriceBreaks: BigNumber[];
      addParams: IMaverickV2Pool.AddLiquidityParamsStructOutput[];
      tickDeltas: IMaverickV2PoolLens.TickDeltasStructOutput[];
    }
  >;

  getCreateBoostedPositionParams(
    bpSpec: IMaverickV2PoolLens.BoostedPositionSpecificationStruct,
    addSpec: IMaverickV2PoolLens.AddParamsSpecificationStruct,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string[],
      BigNumber[],
      IMaverickV2Pool.AddLiquidityParamsStructOutput[],
      IMaverickV2PoolLens.TickDeltasStructOutput[]
    ] & {
      packedSqrtPriceBreaks: string;
      packedArgs: string[];
      sqrtPriceBreaks: BigNumber[];
      addParams: IMaverickV2Pool.AddLiquidityParamsStructOutput[];
      tickDeltas: IMaverickV2PoolLens.TickDeltasStructOutput[];
    }
  >;

  getCreatePoolAtPriceAndAddLiquidityParams(
    params: IMaverickV2PoolLens.CreateAndAddParamsViewInputsStruct,
    factory: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMaverickV2PoolLens.CreateAndAddParamsInputsStructOutput>;

  getFullPoolState(
    pool: PromiseOrValue<string>,
    binStart: PromiseOrValue<BigNumberish>,
    binEnd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IMaverickV2PoolLens.PoolStateStructOutput>;

  getPoolPrice(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolSqrtPrice(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTickSqrtPriceAndL(
    pool: PromiseOrValue<string>,
    tick: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { sqrtPrice: BigNumber; liquidity: BigNumber }
  >;

  getTicks(
    pool: PromiseOrValue<string>,
    tickStart: PromiseOrValue<BigNumberish>,
    tickEnd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number[], IMaverickV2Pool.TickStateStructOutput[]] & {
      ticks: number[];
      tickStates: IMaverickV2Pool.TickStateStructOutput[];
    }
  >;

  getTicksAroundActive(
    pool: PromiseOrValue<string>,
    tickRadius: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number[], IMaverickV2Pool.TickStateStructOutput[]] & {
      ticks: number[];
      tickStates: IMaverickV2Pool.TickStateStructOutput[];
    }
  >;

  getTicksAroundActiveWLiquidity(
    pool: PromiseOrValue<string>,
    tickRadius: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number[],
      IMaverickV2Pool.TickStateStructOutput[],
      BigNumber[],
      BigNumber[],
      BigNumber[],
      IMaverickV2Pool.StateStructOutput,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      ticks: number[];
      tickStates: IMaverickV2Pool.TickStateStructOutput[];
      liquidities: BigNumber[];
      sqrtLowerTickPrices: BigNumber[];
      sqrtUpperTickPrices: BigNumber[];
      poolState: IMaverickV2Pool.StateStructOutput;
      sqrtPrice: BigNumber;
      feeAIn: BigNumber;
      feeBIn: BigNumber;
    }
  >;

  tokenScales(
    pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { tokenAScale: BigNumber; tokenBScale: BigNumber }
  >;

  callStatic: {
    getAddLiquidityParams(
      params: IMaverickV2PoolLens.AddParamsViewInputsStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        BigNumber[],
        IMaverickV2Pool.AddLiquidityParamsStructOutput[],
        IMaverickV2PoolLens.TickDeltasStructOutput[]
      ] & {
        packedSqrtPriceBreaks: string;
        packedArgs: string[];
        sqrtPriceBreaks: BigNumber[];
        addParams: IMaverickV2Pool.AddLiquidityParamsStructOutput[];
        tickDeltas: IMaverickV2PoolLens.TickDeltasStructOutput[];
      }
    >;

    getCreateBoostedPositionParams(
      bpSpec: IMaverickV2PoolLens.BoostedPositionSpecificationStruct,
      addSpec: IMaverickV2PoolLens.AddParamsSpecificationStruct,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string[],
        BigNumber[],
        IMaverickV2Pool.AddLiquidityParamsStructOutput[],
        IMaverickV2PoolLens.TickDeltasStructOutput[]
      ] & {
        packedSqrtPriceBreaks: string;
        packedArgs: string[];
        sqrtPriceBreaks: BigNumber[];
        addParams: IMaverickV2Pool.AddLiquidityParamsStructOutput[];
        tickDeltas: IMaverickV2PoolLens.TickDeltasStructOutput[];
      }
    >;

    getCreatePoolAtPriceAndAddLiquidityParams(
      params: IMaverickV2PoolLens.CreateAndAddParamsViewInputsStruct,
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMaverickV2PoolLens.CreateAndAddParamsInputsStructOutput>;

    getFullPoolState(
      pool: PromiseOrValue<string>,
      binStart: PromiseOrValue<BigNumberish>,
      binEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IMaverickV2PoolLens.PoolStateStructOutput>;

    getPoolPrice(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolSqrtPrice(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTickSqrtPriceAndL(
      pool: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { sqrtPrice: BigNumber; liquidity: BigNumber }
    >;

    getTicks(
      pool: PromiseOrValue<string>,
      tickStart: PromiseOrValue<BigNumberish>,
      tickEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], IMaverickV2Pool.TickStateStructOutput[]] & {
        ticks: number[];
        tickStates: IMaverickV2Pool.TickStateStructOutput[];
      }
    >;

    getTicksAroundActive(
      pool: PromiseOrValue<string>,
      tickRadius: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number[], IMaverickV2Pool.TickStateStructOutput[]] & {
        ticks: number[];
        tickStates: IMaverickV2Pool.TickStateStructOutput[];
      }
    >;

    getTicksAroundActiveWLiquidity(
      pool: PromiseOrValue<string>,
      tickRadius: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number[],
        IMaverickV2Pool.TickStateStructOutput[],
        BigNumber[],
        BigNumber[],
        BigNumber[],
        IMaverickV2Pool.StateStructOutput,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        ticks: number[];
        tickStates: IMaverickV2Pool.TickStateStructOutput[];
        liquidities: BigNumber[];
        sqrtLowerTickPrices: BigNumber[];
        sqrtUpperTickPrices: BigNumber[];
        poolState: IMaverickV2Pool.StateStructOutput;
        sqrtPrice: BigNumber;
        feeAIn: BigNumber;
        feeBIn: BigNumber;
      }
    >;

    tokenScales(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        tokenAScale: BigNumber;
        tokenBScale: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getAddLiquidityParams(
      params: IMaverickV2PoolLens.AddParamsViewInputsStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreateBoostedPositionParams(
      bpSpec: IMaverickV2PoolLens.BoostedPositionSpecificationStruct,
      addSpec: IMaverickV2PoolLens.AddParamsSpecificationStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatePoolAtPriceAndAddLiquidityParams(
      params: IMaverickV2PoolLens.CreateAndAddParamsViewInputsStruct,
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFullPoolState(
      pool: PromiseOrValue<string>,
      binStart: PromiseOrValue<BigNumberish>,
      binEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolPrice(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolSqrtPrice(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTickSqrtPriceAndL(
      pool: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicks(
      pool: PromiseOrValue<string>,
      tickStart: PromiseOrValue<BigNumberish>,
      tickEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicksAroundActive(
      pool: PromiseOrValue<string>,
      tickRadius: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTicksAroundActiveWLiquidity(
      pool: PromiseOrValue<string>,
      tickRadius: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenScales(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddLiquidityParams(
      params: IMaverickV2PoolLens.AddParamsViewInputsStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreateBoostedPositionParams(
      bpSpec: IMaverickV2PoolLens.BoostedPositionSpecificationStruct,
      addSpec: IMaverickV2PoolLens.AddParamsSpecificationStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatePoolAtPriceAndAddLiquidityParams(
      params: IMaverickV2PoolLens.CreateAndAddParamsViewInputsStruct,
      factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFullPoolState(
      pool: PromiseOrValue<string>,
      binStart: PromiseOrValue<BigNumberish>,
      binEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolPrice(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolSqrtPrice(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTickSqrtPriceAndL(
      pool: PromiseOrValue<string>,
      tick: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicks(
      pool: PromiseOrValue<string>,
      tickStart: PromiseOrValue<BigNumberish>,
      tickEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicksAroundActive(
      pool: PromiseOrValue<string>,
      tickRadius: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTicksAroundActiveWLiquidity(
      pool: PromiseOrValue<string>,
      tickRadius: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenScales(
      pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
