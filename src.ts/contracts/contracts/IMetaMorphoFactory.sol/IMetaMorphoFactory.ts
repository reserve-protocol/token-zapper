/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IMetaMorphoFactoryInterface extends utils.Interface {
  functions: {
    "MORPHO()": FunctionFragment;
    "createMetaMorpho(address,uint256,address,string,string,bytes32)": FunctionFragment;
    "isMetaMorpho(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "MORPHO" | "createMetaMorpho" | "isMetaMorpho"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "MORPHO", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createMetaMorpho",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isMetaMorpho",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "MORPHO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createMetaMorpho",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMetaMorpho",
    data: BytesLike
  ): Result;

  events: {
    "AccrueInterest(uint256,uint256)": EventFragment;
    "CreateMetaMorpho(address,address,address,uint256,address,string,string,bytes32)": EventFragment;
    "ReallocateSupply(address,bytes32,uint256,uint256)": EventFragment;
    "ReallocateWithdraw(address,bytes32,uint256,uint256)": EventFragment;
    "RevokePendingCap(address,bytes32)": EventFragment;
    "RevokePendingGuardian(address)": EventFragment;
    "RevokePendingMarketRemoval(address,bytes32)": EventFragment;
    "RevokePendingTimelock(address)": EventFragment;
    "SetCap(address,bytes32,uint256)": EventFragment;
    "SetCurator(address)": EventFragment;
    "SetFee(address,uint256)": EventFragment;
    "SetFeeRecipient(address)": EventFragment;
    "SetGuardian(address,address)": EventFragment;
    "SetIsAllocator(address,bool)": EventFragment;
    "SetSkimRecipient(address)": EventFragment;
    "SetSupplyQueue(address,bytes32[])": EventFragment;
    "SetTimelock(address,uint256)": EventFragment;
    "SetWithdrawQueue(address,bytes32[])": EventFragment;
    "Skim(address,address,uint256)": EventFragment;
    "SubmitCap(address,bytes32,uint256)": EventFragment;
    "SubmitGuardian(address)": EventFragment;
    "SubmitMarketRemoval(address,bytes32)": EventFragment;
    "SubmitTimelock(uint256)": EventFragment;
    "UpdateLastTotalAssets(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AccrueInterest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CreateMetaMorpho"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReallocateSupply"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReallocateWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokePendingCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokePendingGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokePendingMarketRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokePendingTimelock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCurator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetIsAllocator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSkimRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSupplyQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTimelock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWithdrawQueue"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Skim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitCap"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitGuardian"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitMarketRemoval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitTimelock"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateLastTotalAssets"): EventFragment;
}

export interface AccrueInterestEventObject {
  newTotalAssets: BigNumber;
  feeShares: BigNumber;
}
export type AccrueInterestEvent = TypedEvent<
  [BigNumber, BigNumber],
  AccrueInterestEventObject
>;

export type AccrueInterestEventFilter = TypedEventFilter<AccrueInterestEvent>;

export interface CreateMetaMorphoEventObject {
  metaMorpho: string;
  caller: string;
  initialOwner: string;
  initialTimelock: BigNumber;
  asset: string;
  name: string;
  symbol: string;
  salt: string;
}
export type CreateMetaMorphoEvent = TypedEvent<
  [string, string, string, BigNumber, string, string, string, string],
  CreateMetaMorphoEventObject
>;

export type CreateMetaMorphoEventFilter =
  TypedEventFilter<CreateMetaMorphoEvent>;

export interface ReallocateSupplyEventObject {
  caller: string;
  id: string;
  suppliedAssets: BigNumber;
  suppliedShares: BigNumber;
}
export type ReallocateSupplyEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ReallocateSupplyEventObject
>;

export type ReallocateSupplyEventFilter =
  TypedEventFilter<ReallocateSupplyEvent>;

export interface ReallocateWithdrawEventObject {
  caller: string;
  id: string;
  withdrawnAssets: BigNumber;
  withdrawnShares: BigNumber;
}
export type ReallocateWithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ReallocateWithdrawEventObject
>;

export type ReallocateWithdrawEventFilter =
  TypedEventFilter<ReallocateWithdrawEvent>;

export interface RevokePendingCapEventObject {
  caller: string;
  id: string;
}
export type RevokePendingCapEvent = TypedEvent<
  [string, string],
  RevokePendingCapEventObject
>;

export type RevokePendingCapEventFilter =
  TypedEventFilter<RevokePendingCapEvent>;

export interface RevokePendingGuardianEventObject {
  caller: string;
}
export type RevokePendingGuardianEvent = TypedEvent<
  [string],
  RevokePendingGuardianEventObject
>;

export type RevokePendingGuardianEventFilter =
  TypedEventFilter<RevokePendingGuardianEvent>;

export interface RevokePendingMarketRemovalEventObject {
  caller: string;
  id: string;
}
export type RevokePendingMarketRemovalEvent = TypedEvent<
  [string, string],
  RevokePendingMarketRemovalEventObject
>;

export type RevokePendingMarketRemovalEventFilter =
  TypedEventFilter<RevokePendingMarketRemovalEvent>;

export interface RevokePendingTimelockEventObject {
  caller: string;
}
export type RevokePendingTimelockEvent = TypedEvent<
  [string],
  RevokePendingTimelockEventObject
>;

export type RevokePendingTimelockEventFilter =
  TypedEventFilter<RevokePendingTimelockEvent>;

export interface SetCapEventObject {
  caller: string;
  id: string;
  cap: BigNumber;
}
export type SetCapEvent = TypedEvent<
  [string, string, BigNumber],
  SetCapEventObject
>;

export type SetCapEventFilter = TypedEventFilter<SetCapEvent>;

export interface SetCuratorEventObject {
  newCurator: string;
}
export type SetCuratorEvent = TypedEvent<[string], SetCuratorEventObject>;

export type SetCuratorEventFilter = TypedEventFilter<SetCuratorEvent>;

export interface SetFeeEventObject {
  caller: string;
  newFee: BigNumber;
}
export type SetFeeEvent = TypedEvent<[string, BigNumber], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetFeeRecipientEventObject {
  newFeeRecipient: string;
}
export type SetFeeRecipientEvent = TypedEvent<
  [string],
  SetFeeRecipientEventObject
>;

export type SetFeeRecipientEventFilter = TypedEventFilter<SetFeeRecipientEvent>;

export interface SetGuardianEventObject {
  caller: string;
  guardian: string;
}
export type SetGuardianEvent = TypedEvent<
  [string, string],
  SetGuardianEventObject
>;

export type SetGuardianEventFilter = TypedEventFilter<SetGuardianEvent>;

export interface SetIsAllocatorEventObject {
  allocator: string;
  isAllocator: boolean;
}
export type SetIsAllocatorEvent = TypedEvent<
  [string, boolean],
  SetIsAllocatorEventObject
>;

export type SetIsAllocatorEventFilter = TypedEventFilter<SetIsAllocatorEvent>;

export interface SetSkimRecipientEventObject {
  newSkimRecipient: string;
}
export type SetSkimRecipientEvent = TypedEvent<
  [string],
  SetSkimRecipientEventObject
>;

export type SetSkimRecipientEventFilter =
  TypedEventFilter<SetSkimRecipientEvent>;

export interface SetSupplyQueueEventObject {
  caller: string;
  newSupplyQueue: string[];
}
export type SetSupplyQueueEvent = TypedEvent<
  [string, string[]],
  SetSupplyQueueEventObject
>;

export type SetSupplyQueueEventFilter = TypedEventFilter<SetSupplyQueueEvent>;

export interface SetTimelockEventObject {
  caller: string;
  newTimelock: BigNumber;
}
export type SetTimelockEvent = TypedEvent<
  [string, BigNumber],
  SetTimelockEventObject
>;

export type SetTimelockEventFilter = TypedEventFilter<SetTimelockEvent>;

export interface SetWithdrawQueueEventObject {
  caller: string;
  newWithdrawQueue: string[];
}
export type SetWithdrawQueueEvent = TypedEvent<
  [string, string[]],
  SetWithdrawQueueEventObject
>;

export type SetWithdrawQueueEventFilter =
  TypedEventFilter<SetWithdrawQueueEvent>;

export interface SkimEventObject {
  caller: string;
  token: string;
  amount: BigNumber;
}
export type SkimEvent = TypedEvent<
  [string, string, BigNumber],
  SkimEventObject
>;

export type SkimEventFilter = TypedEventFilter<SkimEvent>;

export interface SubmitCapEventObject {
  caller: string;
  id: string;
  cap: BigNumber;
}
export type SubmitCapEvent = TypedEvent<
  [string, string, BigNumber],
  SubmitCapEventObject
>;

export type SubmitCapEventFilter = TypedEventFilter<SubmitCapEvent>;

export interface SubmitGuardianEventObject {
  newGuardian: string;
}
export type SubmitGuardianEvent = TypedEvent<
  [string],
  SubmitGuardianEventObject
>;

export type SubmitGuardianEventFilter = TypedEventFilter<SubmitGuardianEvent>;

export interface SubmitMarketRemovalEventObject {
  caller: string;
  id: string;
}
export type SubmitMarketRemovalEvent = TypedEvent<
  [string, string],
  SubmitMarketRemovalEventObject
>;

export type SubmitMarketRemovalEventFilter =
  TypedEventFilter<SubmitMarketRemovalEvent>;

export interface SubmitTimelockEventObject {
  newTimelock: BigNumber;
}
export type SubmitTimelockEvent = TypedEvent<
  [BigNumber],
  SubmitTimelockEventObject
>;

export type SubmitTimelockEventFilter = TypedEventFilter<SubmitTimelockEvent>;

export interface UpdateLastTotalAssetsEventObject {
  updatedTotalAssets: BigNumber;
}
export type UpdateLastTotalAssetsEvent = TypedEvent<
  [BigNumber],
  UpdateLastTotalAssetsEventObject
>;

export type UpdateLastTotalAssetsEventFilter =
  TypedEventFilter<UpdateLastTotalAssetsEvent>;

export interface IMetaMorphoFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMetaMorphoFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MORPHO(overrides?: CallOverrides): Promise<[string]>;

    createMetaMorpho(
      initialOwner: PromiseOrValue<string>,
      initialTimelock: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isMetaMorpho(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  MORPHO(overrides?: CallOverrides): Promise<string>;

  createMetaMorpho(
    initialOwner: PromiseOrValue<string>,
    initialTimelock: PromiseOrValue<BigNumberish>,
    asset: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isMetaMorpho(
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    MORPHO(overrides?: CallOverrides): Promise<string>;

    createMetaMorpho(
      initialOwner: PromiseOrValue<string>,
      initialTimelock: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isMetaMorpho(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "AccrueInterest(uint256,uint256)"(
      newTotalAssets?: null,
      feeShares?: null
    ): AccrueInterestEventFilter;
    AccrueInterest(
      newTotalAssets?: null,
      feeShares?: null
    ): AccrueInterestEventFilter;

    "CreateMetaMorpho(address,address,address,uint256,address,string,string,bytes32)"(
      metaMorpho?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      initialOwner?: null,
      initialTimelock?: null,
      asset?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      salt?: null
    ): CreateMetaMorphoEventFilter;
    CreateMetaMorpho(
      metaMorpho?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null,
      initialOwner?: null,
      initialTimelock?: null,
      asset?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      salt?: null
    ): CreateMetaMorphoEventFilter;

    "ReallocateSupply(address,bytes32,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null,
      suppliedAssets?: null,
      suppliedShares?: null
    ): ReallocateSupplyEventFilter;
    ReallocateSupply(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null,
      suppliedAssets?: null,
      suppliedShares?: null
    ): ReallocateSupplyEventFilter;

    "ReallocateWithdraw(address,bytes32,uint256,uint256)"(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null,
      withdrawnAssets?: null,
      withdrawnShares?: null
    ): ReallocateWithdrawEventFilter;
    ReallocateWithdraw(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null,
      withdrawnAssets?: null,
      withdrawnShares?: null
    ): ReallocateWithdrawEventFilter;

    "RevokePendingCap(address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null
    ): RevokePendingCapEventFilter;
    RevokePendingCap(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null
    ): RevokePendingCapEventFilter;

    "RevokePendingGuardian(address)"(
      caller?: PromiseOrValue<string> | null
    ): RevokePendingGuardianEventFilter;
    RevokePendingGuardian(
      caller?: PromiseOrValue<string> | null
    ): RevokePendingGuardianEventFilter;

    "RevokePendingMarketRemoval(address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null
    ): RevokePendingMarketRemovalEventFilter;
    RevokePendingMarketRemoval(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null
    ): RevokePendingMarketRemovalEventFilter;

    "RevokePendingTimelock(address)"(
      caller?: PromiseOrValue<string> | null
    ): RevokePendingTimelockEventFilter;
    RevokePendingTimelock(
      caller?: PromiseOrValue<string> | null
    ): RevokePendingTimelockEventFilter;

    "SetCap(address,bytes32,uint256)"(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null,
      cap?: null
    ): SetCapEventFilter;
    SetCap(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null,
      cap?: null
    ): SetCapEventFilter;

    "SetCurator(address)"(
      newCurator?: PromiseOrValue<string> | null
    ): SetCuratorEventFilter;
    SetCurator(
      newCurator?: PromiseOrValue<string> | null
    ): SetCuratorEventFilter;

    "SetFee(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      newFee?: null
    ): SetFeeEventFilter;
    SetFee(
      caller?: PromiseOrValue<string> | null,
      newFee?: null
    ): SetFeeEventFilter;

    "SetFeeRecipient(address)"(
      newFeeRecipient?: PromiseOrValue<string> | null
    ): SetFeeRecipientEventFilter;
    SetFeeRecipient(
      newFeeRecipient?: PromiseOrValue<string> | null
    ): SetFeeRecipientEventFilter;

    "SetGuardian(address,address)"(
      caller?: PromiseOrValue<string> | null,
      guardian?: PromiseOrValue<string> | null
    ): SetGuardianEventFilter;
    SetGuardian(
      caller?: PromiseOrValue<string> | null,
      guardian?: PromiseOrValue<string> | null
    ): SetGuardianEventFilter;

    "SetIsAllocator(address,bool)"(
      allocator?: PromiseOrValue<string> | null,
      isAllocator?: null
    ): SetIsAllocatorEventFilter;
    SetIsAllocator(
      allocator?: PromiseOrValue<string> | null,
      isAllocator?: null
    ): SetIsAllocatorEventFilter;

    "SetSkimRecipient(address)"(
      newSkimRecipient?: PromiseOrValue<string> | null
    ): SetSkimRecipientEventFilter;
    SetSkimRecipient(
      newSkimRecipient?: PromiseOrValue<string> | null
    ): SetSkimRecipientEventFilter;

    "SetSupplyQueue(address,bytes32[])"(
      caller?: PromiseOrValue<string> | null,
      newSupplyQueue?: null
    ): SetSupplyQueueEventFilter;
    SetSupplyQueue(
      caller?: PromiseOrValue<string> | null,
      newSupplyQueue?: null
    ): SetSupplyQueueEventFilter;

    "SetTimelock(address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      newTimelock?: null
    ): SetTimelockEventFilter;
    SetTimelock(
      caller?: PromiseOrValue<string> | null,
      newTimelock?: null
    ): SetTimelockEventFilter;

    "SetWithdrawQueue(address,bytes32[])"(
      caller?: PromiseOrValue<string> | null,
      newWithdrawQueue?: null
    ): SetWithdrawQueueEventFilter;
    SetWithdrawQueue(
      caller?: PromiseOrValue<string> | null,
      newWithdrawQueue?: null
    ): SetWithdrawQueueEventFilter;

    "Skim(address,address,uint256)"(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): SkimEventFilter;
    Skim(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): SkimEventFilter;

    "SubmitCap(address,bytes32,uint256)"(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null,
      cap?: null
    ): SubmitCapEventFilter;
    SubmitCap(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null,
      cap?: null
    ): SubmitCapEventFilter;

    "SubmitGuardian(address)"(
      newGuardian?: PromiseOrValue<string> | null
    ): SubmitGuardianEventFilter;
    SubmitGuardian(
      newGuardian?: PromiseOrValue<string> | null
    ): SubmitGuardianEventFilter;

    "SubmitMarketRemoval(address,bytes32)"(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null
    ): SubmitMarketRemovalEventFilter;
    SubmitMarketRemoval(
      caller?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BytesLike> | null
    ): SubmitMarketRemovalEventFilter;

    "SubmitTimelock(uint256)"(newTimelock?: null): SubmitTimelockEventFilter;
    SubmitTimelock(newTimelock?: null): SubmitTimelockEventFilter;

    "UpdateLastTotalAssets(uint256)"(
      updatedTotalAssets?: null
    ): UpdateLastTotalAssetsEventFilter;
    UpdateLastTotalAssets(
      updatedTotalAssets?: null
    ): UpdateLastTotalAssetsEventFilter;
  };

  estimateGas: {
    MORPHO(overrides?: CallOverrides): Promise<BigNumber>;

    createMetaMorpho(
      initialOwner: PromiseOrValue<string>,
      initialTimelock: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isMetaMorpho(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MORPHO(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createMetaMorpho(
      initialOwner: PromiseOrValue<string>,
      initialTimelock: PromiseOrValue<BigNumberish>,
      asset: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isMetaMorpho(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
