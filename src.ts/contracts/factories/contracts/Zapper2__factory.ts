/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Zapper2, Zapper2Interface } from "../../contracts/Zapper2";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IWrappedNative",
        name: "wrappedNative_",
        type: "address",
      },
      {
        internalType: "contract ZapperExecutor",
        name: "executor_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct ZapParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zap",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "tokenOut",
            type: "address",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
        ],
        internalType: "struct ZapParams",
        name: "params",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "deployer",
            type: "address",
          },
          {
            components: [
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
              {
                internalType: "string",
                name: "symbol",
                type: "string",
              },
              {
                internalType: "address[]",
                name: "assets",
                type: "address[]",
              },
              {
                internalType: "uint256[]",
                name: "amounts",
                type: "uint256[]",
              },
              {
                internalType: "uint256",
                name: "initialShares",
                type: "uint256",
              },
            ],
            internalType: "struct IFolio.FolioBasicDetails",
            name: "basicDetails",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "auctionDelay",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "auctionLength",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "address",
                    name: "recipient",
                    type: "address",
                  },
                  {
                    internalType: "uint96",
                    name: "portion",
                    type: "uint96",
                  },
                ],
                internalType: "struct IFolio.FeeRecipient[]",
                name: "feeRecipients",
                type: "tuple[]",
              },
              {
                internalType: "uint256",
                name: "tvlFee",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "mintFee",
                type: "uint256",
              },
              {
                internalType: "string",
                name: "mandate",
                type: "string",
              },
            ],
            internalType: "struct IFolio.FolioAdditionalDetails",
            name: "additionalDetails",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address[]",
                name: "existingTradeProposers",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "tradeLaunchers",
                type: "address[]",
              },
              {
                internalType: "address[]",
                name: "vibesOfficers",
                type: "address[]",
              },
            ],
            internalType: "struct GovRoles",
            name: "govRoles",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "isGoverned",
            type: "bool",
          },
          {
            internalType: "contract IVotes",
            name: "stToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint48",
                name: "votingDelay",
                type: "uint48",
              },
              {
                internalType: "uint32",
                name: "votingPeriod",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "proposalThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "quorumPercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timelockDelay",
                type: "uint256",
              },
              {
                internalType: "address[]",
                name: "guardians",
                type: "address[]",
              },
            ],
            internalType: "struct IGovernanceDeployer.GovParams",
            name: "ownerGovParams",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint48",
                name: "votingDelay",
                type: "uint48",
              },
              {
                internalType: "uint32",
                name: "votingPeriod",
                type: "uint32",
              },
              {
                internalType: "uint256",
                name: "proposalThreshold",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "quorumPercent",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timelockDelay",
                type: "uint256",
              },
              {
                internalType: "address[]",
                name: "guardians",
                type: "address[]",
              },
            ],
            internalType: "struct IGovernanceDeployer.GovParams",
            name: "tradingGovParams",
            type: "tuple",
          },
        ],
        internalType: "struct DeployFolioConfig",
        name: "config",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "nonce",
        type: "bytes32",
      },
    ],
    name: "zapDeploy",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "out",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
        ],
        internalType: "struct ZapERC20Params",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zapERC20",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
        ],
        internalType: "struct ZapERC20Params",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zapETH",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "contract IERC20",
            name: "tokenIn",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amountIn",
            type: "uint256",
          },
          {
            internalType: "bytes32[]",
            name: "commands",
            type: "bytes32[]",
          },
          {
            internalType: "bytes[]",
            name: "state",
            type: "bytes[]",
          },
          {
            internalType: "contract IERC20[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "tokenOut",
            type: "address",
          },
        ],
        internalType: "struct ZapERC20Params",
        name: "params",
        type: "tuple",
      },
    ],
    name: "zapToETH",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "dust",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "amountOut",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "gasUsed",
            type: "uint256",
          },
        ],
        internalType: "struct ZapperOutput",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60c06040523480156200001157600080fd5b50604051620033df380380620033df833981810160405281019062000037919062000186565b60016000819055508173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050620001cd565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e182620000b4565b9050919050565b6000620000f582620000d4565b9050919050565b6200010781620000e8565b81146200011357600080fd5b50565b6000815190506200012781620000fc565b92915050565b60006200013a82620000b4565b9050919050565b60006200014e826200012d565b9050919050565b620001608162000141565b81146200016c57600080fd5b50565b600081519050620001808162000155565b92915050565b60008060408385031215620001a0576200019f620000af565b5b6000620001b08582860162000116565b9250506020620001c3858286016200016f565b9150509250929050565b60805160a0516131d06200020f60003960008181610189015281816101b101528181610716015261073c0152600081816104e0015261056401526131d06000f3fe60806040526004361061004e5760003560e01c80633d471cd81461005a5780633e86ff701461008a5780638e0a8e9d146100ba578063ceba504d146100f7578063dd074ea01461012757610055565b3661005557005b600080fd5b610074600480360381019061006f9190610ec1565b610157565b6040516100819190611064565b60405180910390f35b6100a4600480360381019061009f9190611086565b610329565b6040516100b19190611064565b60405180910390f35b3480156100c657600080fd5b506100e160048036038101906100dc91906110ee565b61038f565b6040516100ee9190611064565b60405180910390f35b610111600480360381019061010c91906110ee565b6103b7565b60405161011e9190611064565b60405180910390f35b610141600480360381019061013c91906110ee565b6103df565b60405161014e9190611064565b60405180910390f35b61015f610e11565b610167610407565b60005a90506101ad8560000160208101906101829190611195565b86602001357f0000000000000000000000000000000000000000000000000000000000000000610456565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f95641628780604001906101fb91906111d1565b89806060019061020b9190611234565b8b806080019061021b9190611297565b8c8e60e001602081019061022f9190611195565b8d6040518a63ffffffff1660e01b8152600401610254999897969594939291906120fe565b6000604051808303816000875af1158015610273573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061029c9190612354565b90508060200151836020018181525050806000015183600001819052508560a00135836020015111610303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102fa906123fa565b60405180910390fd5b5a8261030f9190612449565b8360400181815250505050610322610590565b9392505050565b610331610e11565b610339610407565b60005a905061037f8361034b906128a8565b6103798560c00160208101906103619190611195565b8660e00160208101906103749190611195565b61059a565b83610671565b91505061038a610590565b919050565b610397610e11565b61039f610407565b6103a8826108ce565b90506103b2610590565b919050565b6103bf610e11565b6103c7610407565b6103d0826108ce565b90506103da610590565b919050565b6103e7610e11565b6103ef610407565b6103f8826108ce565b9050610402610590565b919050565b60026000540361044c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044390612907565b60405180910390fd5b6002600081905550565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461049b5761049683338385610a6e565b61058b565b813410156104de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d590612973565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561054657600080fd5b505af115801561055a573d6000803e3d6000fd5b505050505061058a7f00000000000000000000000000000000000000000000000000000000000000008284610af7565b5b505050565b6001600081905550565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610650578273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016106089190612993565b602060405180830381865afa158015610625573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064991906129ae565b905061066b565b8173ffffffffffffffffffffffffffffffffffffffff163190505b92915050565b610679610e11565b60008460200151036106c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b790612a27565b60405180910390fd5b60008460a0015103610707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fe90612a93565b60405180910390fd5b61073a846000015185602001517f0000000000000000000000000000000000000000000000000000000000000000610456565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166308c4b4988560400151866060015187608001516040518463ffffffff1660e01b81526004016107a393929190612d05565b6000604051808303816000875af11580156107c2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906107eb9190612da9565b600001518160000181905250600061080b8560c001518660e0015161059a565b905083811161084f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084690612e3e565b60405180910390fd5b6000848261085d9190612449565b90508560a001518110156108a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089d906123fa565b60405180910390fd5b808360200181815250505a846108bc9190612449565b83604001818152505050509392505050565b6108d6610e11565b60005a905060006040518061010001604052808560000160208101906108fc9190612e5e565b73ffffffffffffffffffffffffffffffffffffffff1681526020018560200135815260200185806040019061093191906111d1565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018580606001906109869190611234565b906109919190612e8b565b81526020018580608001906109a69190611297565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018560a0013581526020018560c0016020810190610a089190612e5e565b73ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152509050610a6581610a5f8660c0016020810190610a599190612e5e565b3361059a565b84610671565b92505050919050565b610af1846323b872dd60e01b858585604051602401610a8f93929190612eaf565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b7d565b50505050565b610b788363a9059cbb60e01b8484604051602401610b16929190612ee6565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610b7d565b505050565b6000610bdf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610c449092919063ffffffff16565b9050600081511115610c3f5780806020019051810190610bff9190612f24565b610c3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3590612fc3565b60405180910390fd5b5b505050565b6060610c538484600085610c5c565b90509392505050565b606082471015610ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9890613055565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610cca91906130b1565b60006040518083038185875af1925050503d8060008114610d07576040519150601f19603f3d011682016040523d82523d6000602084013e610d0c565b606091505b5091509150610d1d87838387610d29565b92505050949350505050565b60608315610d8b576000835103610d8357610d4385610d9e565b610d82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7990613114565b60405180910390fd5b5b829050610d96565b610d958383610dc1565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610dd45781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e089190613178565b60405180910390fd5b60405180606001604052806060815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b60006101008284031215610e6257610e61610e46565b5b81905092915050565b60006101208284031215610e8257610e81610e46565b5b81905092915050565b6000819050919050565b610e9e81610e8b565b8114610ea957600080fd5b50565b600081359050610ebb81610e95565b92915050565b600080600060608486031215610eda57610ed9610e3c565b5b600084013567ffffffffffffffff811115610ef857610ef7610e41565b5b610f0486828701610e4b565b935050602084013567ffffffffffffffff811115610f2557610f24610e41565b5b610f3186828701610e6b565b9250506040610f4286828701610eac565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610f8b81610f78565b82525050565b6000610f9d8383610f82565b60208301905092915050565b6000602082019050919050565b6000610fc182610f4c565b610fcb8185610f57565b9350610fd683610f68565b8060005b83811015611007578151610fee8882610f91565b9750610ff983610fa9565b925050600181019050610fda565b5085935050505092915050565b600060608301600083015184820360008601526110318282610fb6565b91505060208301516110466020860182610f82565b5060408301516110596040860182610f82565b508091505092915050565b6000602082019050818103600083015261107e8184611014565b905092915050565b60006020828403121561109c5761109b610e3c565b5b600082013567ffffffffffffffff8111156110ba576110b9610e41565b5b6110c684828501610e4b565b91505092915050565b600060e082840312156110e5576110e4610e46565b5b81905092915050565b60006020828403121561110457611103610e3c565b5b600082013567ffffffffffffffff81111561112257611121610e41565b5b61112e848285016110cf565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061116282611137565b9050919050565b61117281611157565b811461117d57600080fd5b50565b60008135905061118f81611169565b92915050565b6000602082840312156111ab576111aa610e3c565b5b60006111b984828501611180565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126111ee576111ed6111c2565b5b80840192508235915067ffffffffffffffff8211156112105761120f6111c7565b5b60208301925060208202360383131561122c5761122b6111cc565b5b509250929050565b60008083356001602003843603038112611251576112506111c2565b5b80840192508235915067ffffffffffffffff821115611273576112726111c7565b5b60208301925060208202360383131561128f5761128e6111cc565b5b509250929050565b600080833560016020038436030381126112b4576112b36111c2565b5b80840192508235915067ffffffffffffffff8211156112d6576112d56111c7565b5b6020830192506020820236038313156112f2576112f16111cc565b5b509250929050565b600082825260208201905092915050565b600080fd5b82818337505050565b600061132583856112fa565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156113585761135761130b565b5b602083029250611369838584611310565b82840190509392505050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b60006113cd8385611390565b93506113da8385846113a1565b6113e3836113b0565b840190509392505050565b60006113fb8484846113c1565b90509392505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126114305761142f61140e565b5b83810192508235915060208301925067ffffffffffffffff82111561145857611457611404565b5b60018202360383131561146e5761146d611409565b5b509250929050565b6000602082019050919050565b600061148f8385611375565b9350836020840285016114a184611386565b8060005b878110156114e75784840389526114bc8284611413565b6114c78682846113ee565b95506114d284611476565b935060208b019a5050506001810190506114a5565b50829750879450505050509392505050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b600061153961153461152f84611137565b611514565b611137565b9050919050565b600061154b8261151e565b9050919050565b600061155d82611540565b9050919050565b61156d81611552565b82525050565b600061157f8383611564565b60208301905092915050565b600061159682611157565b9050919050565b6115a68161158b565b81146115b157600080fd5b50565b6000813590506115c38161159d565b92915050565b60006115d860208401846115b4565b905092915050565b6000602082019050919050565b60006115f983856114f9565b93506116048261150a565b8060005b8581101561163d5761161a82846115c9565b6116248882611573565b975061162f836115e0565b925050600181019050611608565b5085925050509392505050565b60006116596020840184611180565b905092915050565b61166a81611157565b82525050565b60008235600160a00383360303811261168c5761168b61140e565b5b82810191505092915050565b600080833560016020038436030381126116b5576116b461140e565b5b83810192508235915060208301925067ffffffffffffffff8211156116dd576116dc611404565b5b6001820236038313156116f3576116f2611409565b5b509250929050565b600082825260208201905092915050565b600061171883856116fb565b93506117258385846113a1565b61172e836113b0565b840190509392505050565b600080833560016020038436030381126117565761175561140e565b5b83810192508235915060208301925067ffffffffffffffff82111561177e5761177d611404565b5b60208202360383131561179457611793611409565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006117c38383611661565b60208301905092915050565b6000602082019050919050565b60006117e8838561179c565b93506117f3826117ad565b8060005b8581101561182c57611809828461164a565b61181388826117b7565b975061181e836117cf565b9250506001810190506117f7565b5085925050509392505050565b600080833560016020038436030381126118565761185561140e565b5b83810192508235915060208301925067ffffffffffffffff82111561187e5761187d611404565b5b60208202360383131561189457611893611409565b5b509250929050565b60006118a88385610f57565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156118db576118da61130b565b5b6020830292506118ec838584611310565b82840190509392505050565b61190181610f78565b811461190c57600080fd5b50565b60008135905061191e816118f8565b92915050565b6000611933602084018461190f565b905092915050565b600060a0830161194e6000840184611698565b858303600087015261196183828461170c565b925050506119726020840184611698565b858303602087015261198583828461170c565b925050506119966040840184611739565b85830360408701526119a98382846117dc565b925050506119ba6060840184611839565b85830360608701526119cd83828461189c565b925050506119de6080840184611924565b6119eb6080860182610f82565b508091505092915050565b60008235600160c003833603038112611a1257611a1161140e565b5b82810191505092915050565b60008083356001602003843603038112611a3b57611a3a61140e565b5b83810192508235915060208301925067ffffffffffffffff821115611a6357611a62611404565b5b604082023603831315611a7957611a78611409565b5b509250929050565b600082825260208201905092915050565b6000819050919050565b60006bffffffffffffffffffffffff82169050919050565b611abd81611a9c565b8114611ac857600080fd5b50565b600081359050611ada81611ab4565b92915050565b6000611aef6020840184611acb565b905092915050565b611b0081611a9c565b82525050565b60408201611b17600083018361164a565b611b246000850182611661565b50611b326020830183611ae0565b611b3f6020850182611af7565b50505050565b6000611b518383611b06565b60408301905092915050565b600082905092915050565b6000604082019050919050565b6000611b818385611a81565b9350611b8c82611a92565b8060005b85811015611bc557611ba28284611b5d565b611bac8882611b45565b9750611bb783611b68565b925050600181019050611b90565b5085925050509392505050565b600060c08301611be56000840184611924565b611bf26000860182610f82565b50611c006020840184611924565b611c0d6020860182610f82565b50611c1b6040840184611a1e565b8583036040870152611c2e838284611b75565b92505050611c3f6060840184611924565b611c4c6060860182610f82565b50611c5a6080840184611924565b611c676080860182610f82565b50611c7560a0840184611698565b85830360a0870152611c8883828461170c565b925050508091505092915050565b600082356001606003833603038112611cb257611cb161140e565b5b82810191505092915050565b600060608301611cd16000840184611739565b8583036000870152611ce48382846117dc565b92505050611cf56020840184611739565b8583036020870152611d088382846117dc565b92505050611d196040840184611739565b8583036040870152611d2c8382846117dc565b925050508091505092915050565b60008115159050919050565b611d4f81611d3a565b8114611d5a57600080fd5b50565b600081359050611d6c81611d46565b92915050565b6000611d816020840184611d5d565b905092915050565b611d9281611d3a565b82525050565b6000611da382611157565b9050919050565b611db381611d98565b8114611dbe57600080fd5b50565b600081359050611dd081611daa565b92915050565b6000611de56020840184611dc1565b905092915050565b6000611df882611540565b9050919050565b611e0881611ded565b82525050565b60008235600160c003833603038112611e2a57611e2961140e565b5b82810191505092915050565b600065ffffffffffff82169050919050565b611e5181611e36565b8114611e5c57600080fd5b50565b600081359050611e6e81611e48565b92915050565b6000611e836020840184611e5f565b905092915050565b611e9481611e36565b82525050565b600063ffffffff82169050919050565b611eb381611e9a565b8114611ebe57600080fd5b50565b600081359050611ed081611eaa565b92915050565b6000611ee56020840184611ec1565b905092915050565b611ef681611e9a565b82525050565b600060c08301611f0f6000840184611e74565b611f1c6000860182611e8b565b50611f2a6020840184611ed6565b611f376020860182611eed565b50611f456040840184611924565b611f526040860182610f82565b50611f606060840184611924565b611f6d6060860182610f82565b50611f7b6080840184611924565b611f886080860182610f82565b50611f9660a0840184611739565b85830360a0870152611fa98382846117dc565b925050508091505092915050565b60006101208301611fcb600084018461164a565b611fd86000860182611661565b50611fe66020840184611670565b8482036020860152611ff8828261193b565b91505061200860408401846119f6565b848203604086015261201a8282611bd2565b91505061202a6060840184611c96565b848203606086015261203c8282611cbe565b91505061204c6080840184611d72565b6120596080860182611d89565b5061206760a0840184611dd6565b61207460a0860182611dff565b5061208260c084018461164a565b61208f60c0860182611661565b5061209d60e0840184611e0e565b84820360e08601526120af8282611efc565b9150506120c0610100840184611e0e565b8482036101008601526120d38282611efc565b9150508091505092915050565b6120e981611157565b82525050565b6120f881610e8b565b82525050565b600060c0820190508181036000830152612119818b8d611319565b9050818103602083015261212e81898b611483565b905081810360408301526121438187896115ed565b905081810360608301526121578186611fb7565b905061216660808301856120e0565b61217360a08301846120ef565b9a9950505050505050505050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121be826113b0565b810181811067ffffffffffffffff821117156121dd576121dc612186565b5b80604052505050565b60006121f0610e32565b90506121fc82826121b5565b919050565b600080fd5b600080fd5b600067ffffffffffffffff82111561222657612225612186565b5b602082029050602081019050919050565b600080fd5b60008151905061224b816118f8565b92915050565b600061226461225f8461220b565b6121e6565b9050808382526020820190506020840283018581111561228757612286612237565b5b835b818110156122b0578061229c888261223c565b845260208401935050602081019050612289565b5050509392505050565b600082601f8301126122cf576122ce612206565b5b81516122df848260208601612251565b91505092915050565b6000604082840312156122fe576122fd612181565b5b61230860406121e6565b9050600082015167ffffffffffffffff81111561232857612327612201565b5b612334848285016122ba565b60008301525060206123488482850161223c565b60208301525092915050565b60006020828403121561236a57612369610e3c565b5b600082015167ffffffffffffffff81111561238857612387610e41565b5b612394848285016122e8565b91505092915050565b600082825260208201905092915050565b7f494e53554646494349454e545f4f555400000000000000000000000000000000600082015250565b60006123e460108361239d565b91506123ef826123ae565b602082019050919050565b60006020820190508181036000830152612413816123d7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061245482610f78565b915061245f83610f78565b92508282039050818111156124775761247661241a565b5b92915050565b600067ffffffffffffffff82111561249857612497612186565b5b602082029050602081019050919050565b60006124bc6124b78461247d565b6121e6565b905080838252602082019050602084028301858111156124df576124de612237565b5b835b8181101561250857806124f48882610eac565b8452602084019350506020810190506124e1565b5050509392505050565b600082601f83011261252757612526612206565b5b81356125378482602086016124a9565b91505092915050565b600067ffffffffffffffff82111561255b5761255a612186565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff82111561258c5761258b612186565b5b612595826113b0565b9050602081019050919050565b60006125b56125b084612571565b6121e6565b9050828152602081018484840111156125d1576125d061256c565b5b6125dc8482856113a1565b509392505050565b600082601f8301126125f9576125f8612206565b5b81356126098482602086016125a2565b91505092915050565b600061262561262084612540565b6121e6565b9050808382526020820190506020840283018581111561264857612647612237565b5b835b8181101561268f57803567ffffffffffffffff81111561266d5761266c612206565b5b80860161267a89826125e4565b8552602085019450505060208101905061264a565b5050509392505050565b600082601f8301126126ae576126ad612206565b5b81356126be848260208601612612565b91505092915050565b600067ffffffffffffffff8211156126e2576126e1612186565b5b602082029050602081019050919050565b6000612706612701846126c7565b6121e6565b9050808382526020820190506020840283018581111561272957612728612237565b5b835b81811015612752578061273e88826115b4565b84526020840193505060208101905061272b565b5050509392505050565b600082601f83011261277157612770612206565b5b81356127818482602086016126f3565b91505092915050565b600061010082840312156127a1576127a0612181565b5b6127ac6101006121e6565b905060006127bc84828501611180565b60008301525060206127d08482850161190f565b602083015250604082013567ffffffffffffffff8111156127f4576127f3612201565b5b61280084828501612512565b604083015250606082013567ffffffffffffffff81111561282457612823612201565b5b61283084828501612699565b606083015250608082013567ffffffffffffffff81111561285457612853612201565b5b6128608482850161275c565b60808301525060a06128748482850161190f565b60a08301525060c061288884828501611180565b60c08301525060e061289c84828501611180565b60e08301525092915050565b60006128b4368361278a565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006128f1601f8361239d565b91506128fc826128bb565b602082019050919050565b60006020820190508181036000830152612920816128e4565b9050919050565b7f494e53554646494349454e545f45544800000000000000000000000000000000600082015250565b600061295d60108361239d565b915061296882612927565b602082019050919050565b6000602082019050818103600083015261298c81612950565b9050919050565b60006020820190506129a860008301846120e0565b92915050565b6000602082840312156129c4576129c3610e3c565b5b60006129d28482850161223c565b91505092915050565b7f494e56414c49445f494e5055545f414d4f554e54000000000000000000000000600082015250565b6000612a1160148361239d565b9150612a1c826129db565b602082019050919050565b60006020820190508181036000830152612a4081612a04565b9050919050565b7f494e56414c49445f4f55545055545f414d4f554e540000000000000000000000600082015250565b6000612a7d60158361239d565b9150612a8882612a47565b602082019050919050565b60006020820190508181036000830152612aac81612a70565b9050919050565b600081519050919050565b6000819050602082019050919050565b612ad781610e8b565b82525050565b6000612ae98383612ace565b60208301905092915050565b6000602082019050919050565b6000612b0d82612ab3565b612b1781856112fa565b9350612b2283612abe565b8060005b83811015612b53578151612b3a8882612add565b9750612b4583612af5565b925050600181019050612b26565b5085935050505092915050565b600081519050919050565b6000819050602082019050919050565b600081519050919050565b60005b83811015612ba4578082015181840152602081019050612b89565b60008484015250505050565b6000612bbb82612b7b565b612bc58185611390565b9350612bd5818560208601612b86565b612bde816113b0565b840191505092915050565b6000612bf58383612bb0565b905092915050565b6000602082019050919050565b6000612c1582612b60565b612c1f8185611375565b935083602082028501612c3185612b6b565b8060005b85811015612c6d5784840389528151612c4e8582612be9565b9450612c5983612bfd565b925060208a01995050600181019050612c35565b50829750879550505050505092915050565b600081519050919050565b6000819050602082019050919050565b6000602082019050919050565b6000612cb282612c7f565b612cbc81856114f9565b9350612cc783612c8a565b8060005b83811015612cf8578151612cdf8882611573565b9750612cea83612c9a565b925050600181019050612ccb565b5085935050505092915050565b60006060820190508181036000830152612d1f8186612b02565b90508181036020830152612d338185612c0a565b90508181036040830152612d478184612ca7565b9050949350505050565b600060208284031215612d6757612d66612181565b5b612d7160206121e6565b9050600082015167ffffffffffffffff811115612d9157612d90612201565b5b612d9d848285016122ba565b60008301525092915050565b600060208284031215612dbf57612dbe610e3c565b5b600082015167ffffffffffffffff811115612ddd57612ddc610e41565b5b612de984828501612d51565b91505092915050565b7f494e56414c49445f4e45575f42414c414e434500000000000000000000000000600082015250565b6000612e2860138361239d565b9150612e3382612df2565b602082019050919050565b60006020820190508181036000830152612e5781612e1b565b9050919050565b600060208284031215612e7457612e73610e3c565b5b6000612e82848285016115b4565b91505092915050565b6000612e98368484612612565b905092915050565b612ea981610f78565b82525050565b6000606082019050612ec460008301866120e0565b612ed160208301856120e0565b612ede6040830184612ea0565b949350505050565b6000604082019050612efb60008301856120e0565b612f086020830184612ea0565b9392505050565b600081519050612f1e81611d46565b92915050565b600060208284031215612f3a57612f39610e3c565b5b6000612f4884828501612f0f565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612fad602a8361239d565b9150612fb882612f51565b604082019050919050565b60006020820190508181036000830152612fdc81612fa0565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061303f60268361239d565b915061304a82612fe3565b604082019050919050565b6000602082019050818103600083015261306e81613032565b9050919050565b600081905092915050565b600061308b82612b7b565b6130958185613075565b93506130a5818560208601612b86565b80840191505092915050565b60006130bd8284613080565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006130fe601d8361239d565b9150613109826130c8565b602082019050919050565b6000602082019050818103600083015261312d816130f1565b9050919050565b600081519050919050565b600061314a82613134565b613154818561239d565b9350613164818560208601612b86565b61316d816113b0565b840191505092915050565b60006020820190508181036000830152613192818461313f565b90509291505056fea26469706673582212201ac9f2f3b1f1e948be8d3770b3086fbbc719099e80b259b4af8966b5bc229a3464736f6c63430008110033";

type Zapper2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Zapper2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Zapper2__factory extends ContractFactory {
  constructor(...args: Zapper2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    wrappedNative_: PromiseOrValue<string>,
    executor_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Zapper2> {
    return super.deploy(
      wrappedNative_,
      executor_,
      overrides || {}
    ) as Promise<Zapper2>;
  }
  override getDeployTransaction(
    wrappedNative_: PromiseOrValue<string>,
    executor_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      wrappedNative_,
      executor_,
      overrides || {}
    );
  }
  override attach(address: string): Zapper2 {
    return super.attach(address) as Zapper2;
  }
  override connect(signer: Signer): Zapper2__factory {
    return super.connect(signer) as Zapper2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Zapper2Interface {
    return new utils.Interface(_abi) as Zapper2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Zapper2 {
    return new Contract(address, _abi, signerOrProvider) as Zapper2;
  }
}
