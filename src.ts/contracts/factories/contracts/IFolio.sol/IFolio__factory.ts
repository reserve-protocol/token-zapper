/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  IFolio,
  IFolioInterface,
} from "../../../contracts/IFolio.sol/IFolio";

const _abi = [
  {
    inputs: [],
    name: "Folio__BadFeeTotal",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__BasketModificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__EmptyAssets",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__ExcessiveBid",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__FeeRecipientInvalidAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__FeeRecipientInvalidFeeShare",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__FolioFeeTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__FolioFeeTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__FolioKilled",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InsufficientBid",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidArrayLengths",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidAsset",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
    ],
    name: "Folio__InvalidAssetAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidAuctionLength",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidBuyLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidPrices",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidSellLimit",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidTradeDelay",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidTradeId",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidTradeTTL",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__InvalidTradeTokens",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__MintingFeeTooHigh",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__SlippageExceeded",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__TooManyFeeRecipients",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__TradeCannotBeOpened",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__TradeCannotBeOpenedPermissionlesslyYet",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__TradeCollision",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__TradeNotOngoing",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__TradeTimeout",
    type: "error",
  },
  {
    inputs: [],
    name: "Folio__Unauthorized",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newAuctionLength",
        type: "uint256",
      },
    ],
    name: "AuctionLengthSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "BasketTokenAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "BasketTokenRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sellAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "buyAmount",
        type: "uint256",
      },
    ],
    name: "Bid",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint96",
        name: "portion",
        type: "uint96",
      },
    ],
    name: "FeeRecipientSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "feeAnnually",
        type: "uint256",
      },
    ],
    name: "FolioFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [],
    name: "FolioKilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newFee",
        type: "uint256",
      },
    ],
    name: "MintingFeeSet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sellLimitSpot",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sellLimitLow",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sellLimitHigh",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "buyLimitSpot",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "buyLimitLow",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "buyLimitHigh",
        type: "uint256",
      },
    ],
    name: "TradeApproved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newTradeDelay",
        type: "uint256",
      },
    ],
    name: "TradeDelaySet",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
    ],
    name: "TradeKilled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "tradeId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "endPrice",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "sellLimit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "buyLimit",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "TradeOpened",
    type: "event",
  },
  {
    inputs: [],
    name: "distributeFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IFolio__factory {
  static readonly abi = _abi;
  static createInterface(): IFolioInterface {
    return new utils.Interface(_abi) as IFolioInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IFolio {
    return new Contract(address, _abi, signerOrProvider) as IFolio;
  }
}
