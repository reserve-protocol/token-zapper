/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type TokenQuantityStruct = {
  token: PromiseOrValue<string>;
  quantity: PromiseOrValue<BigNumberish>;
};

export type TokenQuantityStructOutput = [string, BigNumber] & {
  token: string;
  quantity: BigNumber;
};

export type MultiZapParamsStruct = {
  inputs: TokenQuantityStruct[];
  commands: PromiseOrValue<BytesLike>[];
  state: PromiseOrValue<BytesLike>[];
  tokens: PromiseOrValue<string>[];
  amountOut: PromiseOrValue<BigNumberish>;
  tokenOut: PromiseOrValue<string>;
  recipient: PromiseOrValue<string>;
};

export type MultiZapParamsStructOutput = [
  TokenQuantityStructOutput[],
  string[],
  string[],
  string[],
  BigNumber,
  string,
  string
] & {
  inputs: TokenQuantityStructOutput[];
  commands: string[];
  state: string[];
  tokens: string[];
  amountOut: BigNumber;
  tokenOut: string;
  recipient: string;
};

export type ZapperOutputStruct = {
  dust: PromiseOrValue<BigNumberish>[];
  amountOut: PromiseOrValue<BigNumberish>;
  gasUsed: PromiseOrValue<BigNumberish>;
};

export type ZapperOutputStructOutput = [BigNumber[], BigNumber, BigNumber] & {
  dust: BigNumber[];
  amountOut: BigNumber;
  gasUsed: BigNumber;
};

export interface NTo1ZapperInterface extends utils.Interface {
  functions: {
    "zap(((address,uint256)[],bytes32[],bytes[],address[],uint256,address,address))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "zap"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "zap",
    values: [MultiZapParamsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "zap", data: BytesLike): Result;

  events: {};
}

export interface NTo1Zapper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NTo1ZapperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    zap(
      params: MultiZapParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  zap(
    params: MultiZapParamsStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    zap(
      params: MultiZapParamsStruct,
      overrides?: CallOverrides
    ): Promise<ZapperOutputStructOutput>;
  };

  filters: {};

  estimateGas: {
    zap(
      params: MultiZapParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    zap(
      params: MultiZapParamsStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
