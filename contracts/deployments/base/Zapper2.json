{
  "address": "0xCe7cb4178B1EF36Cc5ecb72750E8d475568516c1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWrappedNative",
          "name": "wrappedNative_",
          "type": "address"
        },
        {
          "internalType": "contract ZapperExecutor",
          "name": "executor_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct ZapParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "zap",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZapperOutput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            }
          ],
          "internalType": "struct ZapParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "zapDeploy",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZapperOutput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct ZapERC20Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "zapERC20",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZapperOutput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct ZapERC20Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "zapETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZapperOutput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "commands",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes[]",
              "name": "state",
              "type": "bytes[]"
            },
            {
              "internalType": "contract IERC20[]",
              "name": "tokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "contract IERC20",
              "name": "tokenOut",
              "type": "address"
            }
          ],
          "internalType": "struct ZapERC20Params",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "zapToETH",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "dust",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "amountOut",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasUsed",
              "type": "uint256"
            }
          ],
          "internalType": "struct ZapperOutput",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9c98a06117ba50b5e01c477d35e3b5b6baab2265a4b929590c6925104bba7b3d",
  "receipt": {
    "to": null,
    "from": "0xF2d98377d80DADf725bFb97E91357F1d81384De2",
    "contractAddress": "0xCe7cb4178B1EF36Cc5ecb72750E8d475568516c1",
    "transactionIndex": 60,
    "gasUsed": "1989449",
    "logsBloom": "0x
    "blockHash": "0x175aeffd638f32034acae58635913dcb187da81229fce066003fbbf44ecfa30d",
    "transactionHash": "0x9c98a06117ba50b5e01c477d35e3b5b6baab2265a4b929590c6925104bba7b3d",
    "logs": [],
    "blockNumber": 25351403,
    "cumulativeGasUsed": "13072253",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4200000000000000000000000000000000000006",
    "0x9702a1934929557ee94a0BF446F29106a71b52F3"
  ],
  "numDeployments": 1,
  "solcInputHash": "704d79ce9d8f5032ebf99bc1ba56203d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWrappedNative\",\"name\":\"wrappedNative_\",\"type\":\"address\"},{\"internalType\":\"contract ZapperExecutor\",\"name\":\"executor_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ZapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"zap\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"internalType\":\"struct ZapParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"zapDeploy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct ZapERC20Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"zapERC20\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct ZapERC20Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"zapETH\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"commands\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"state\",\"type\":\"bytes[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"internalType\":\"struct ZapERC20Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"zapToETH\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"dust\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct ZapperOutput\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Zapper2.sol\":\"Zapper2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/metatx/ERC2771Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder) {\\n        _trustedForwarder = trustedForwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual override returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb6a3e264c7fc4ec11d244561232b0f49dbccc75ce3d14e5f0181cf134fa6db29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IRTokenZapper.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nstruct Call {\\n    address to;\\n    bytes data;\\n    uint256 value;\\n}\\n\\nstruct ZapERC20Params {\\n    // Token to zap\\n    IERC20 tokenIn;\\n    // Total amount to zap / pull from user\\n    uint256 amountIn;\\n    \\n    // Weiroll code to execute to produce 'amountOut' of 'tokenOut'\\n    bytes32[] commands;\\n    bytes[] state;\\n    IERC20[] tokens;\\n\\n    // RTokens the user requested\\n    uint256 amountOut;\\n    // RToken to issue\\n    IERC20 tokenOut;\\n}\\n\\n\\nstruct ZapParams {\\n    // Token to zap\\n    address tokenIn;\\n    // Total amount to zap / pull from user\\n    uint256 amountIn;\\n    \\n    // Weiroll code to execute to produce 'amountOut' of 'tokenOut'\\n    bytes32[] commands;\\n    bytes[] state;\\n    IERC20[] tokens;\\n\\n    // RTokens the user requested\\n    uint256 amountOut;\\n    // RToken to issue\\n    address tokenOut;\\n\\n    address recipient;\\n}\\n\\ninterface FacadeRead {\\n    function maxIssuable(RToken rToken, address account) external returns (uint256);\\n}\\n\\ninterface RToken {\\n    function issueTo(address recipient, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdf6aa6e822729c52e7400271ef771238570e4bf71bc79a2bd584f76fa8bbc58e\",\"license\":\"BlueOak-1.0.0\"},\"contracts/IWrappedNative.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\ninterface IWrappedNative {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\n\",\"keccak256\":\"0x21560ed054ebaca77f878af42ef8f8929195083066ff9996a973a0afb99332bb\",\"license\":\"BlueOak-1.0.0\"},\"contracts/PreventTampering.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nabstract contract PreventTampering {\\n    modifier revertOnCodeHashChange() {\\n        bytes32 hashBefore;\\n        assembly {\\n            hashBefore := extcodehash(address())\\n        }\\n        _;\\n        bytes32 hashPostExecution;\\n        assembly {\\n            hashPostExecution := extcodehash(address())\\n        }\\n        require(hashPostExecution == hashBefore, \\\"PreventTampering: Code has changed\\\");\\n    }\\n}\\n\\n\\ncontract SelfDestruct {\\n    function destroy() external {\\n        selfdestruct(payable(msg.sender));\\n    }\\n    function doNothing() external {}\\n}\\n\\ncontract TestPreventTampering is PreventTampering {\\n    function shouldNotRevert() external {\\n        SelfDestruct selfDestruct = new SelfDestruct();\\n        address(selfDestruct).delegatecall(abi.encodeWithSelector(selfDestruct.destroy.selector));\\n    }\\n    function shouldRevert() revertOnCodeHashChange() external {\\n        SelfDestruct selfDestruct = new SelfDestruct();\\n        address(selfDestruct).delegatecall(abi.encodeWithSelector(selfDestruct.destroy.selector));\\n    }\\n    function markedRevertOnCodeHashChangeDontRevert() revertOnCodeHashChange() external {\\n        SelfDestruct selfDestruct = new SelfDestruct();\\n        address(selfDestruct).delegatecall(abi.encodeWithSelector(selfDestruct.doNothing.selector));\\n    }\\n}\",\"keccak256\":\"0x3f2fd9ccbff5fa8c5700e4c422e0e348c10ff3c4426335dc106226c57236af03\",\"license\":\"BlueOak-1.0.0\"},\"contracts/Zapper2.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ERC2771Context } from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\n\\nimport { IWrappedNative } from \\\"./IWrappedNative.sol\\\";\\nimport { VM } from \\\"./weiroll/VM.sol\\\";\\nimport { PreventTampering } from \\\"./PreventTampering.sol\\\";\\n\\nimport { ZapParams, ZapERC20Params } from \\\"./IRTokenZapper.sol\\\";\\nimport { ZapperExecutor } from \\\"./ZapperExecutor.sol\\\";\\nstruct ZapperOutput {\\n    uint256[] dust;\\n    uint256 amountOut;\\n    uint256 gasUsed;\\n}\\n\\ncontract Zapper2 is ReentrancyGuard {\\n    IWrappedNative internal immutable wrappedNative;\\n    ZapperExecutor internal immutable zapperExecutor;\\n\\n    constructor(\\n        IWrappedNative wrappedNative_,\\n        ZapperExecutor executor_\\n    ) {\\n        wrappedNative = wrappedNative_;\\n        zapperExecutor = executor_;\\n    }\\n\\n    receive() external payable {}\\n\\n    function zap(ZapParams calldata params) external payable nonReentrant returns (ZapperOutput memory) {\\n        uint256 startGas = gasleft();\\n        return zapInner(params, balanceOf(params.tokenOut, params.recipient), startGas);\\n    }\\n    function zapDeploy(ZapParams calldata params) external payable nonReentrant returns (ZapperOutput memory) {\\n        uint256 startGas = gasleft();\\n\\n        // Validate that the address is free\\n        validateTokenOut(params.tokenOut);\\n\\n        return zapInner(params, 0, startGas);\\n    }\\n    function validateTokenOut(address tokenOut) private {\\n        uint256 codeSizeTokenOut = 0;\\n        assembly {\\n            codeSizeTokenOut := extcodesize(tokenOut)\\n        }\\n        require(codeSizeTokenOut == 0, \\\"RETRY\\\");\\n    }\\n\\n    function zapInner(ZapParams memory params, uint256 initialBalance, uint256 startGas) private returns (ZapperOutput memory out) {\\n        require(params.amountIn != 0, \\\"INVALID_INPUT_AMOUNT\\\");\\n        require(params.amountOut != 0, \\\"INVALID_OUTPUT_AMOUNT\\\");\\n\\n        pullFundsFromSender(params.tokenIn, params.amountIn, address(zapperExecutor));\\n        // STEP 1: Execute\\n        out.dust = zapperExecutor.execute(\\n            params.commands,\\n            params.state,\\n            params.tokens\\n        ).dust;\\n\\n        // STEP 2: Verify that the user has gotten the tokens they requested\\n        uint256 newBalance = balanceOf(params.tokenOut, params.recipient);\\n        require(newBalance > initialBalance, \\\"INVALID_NEW_BALANCE\\\");\\n        uint256 difference = newBalance - initialBalance;\\n        require(difference >= params.amountOut, \\\"INSUFFICIENT_OUT\\\");\\n\\n        out.amountOut = difference;\\n        out.gasUsed = startGas - gasleft();\\n    }\\n\\n    function pullFundsFromSender(\\n        address token,\\n        uint256 amount,\\n        address to\\n    ) private {\\n        if (token != address(0)) {\\n            SafeERC20.safeTransferFrom(IERC20(token), msg.sender, to, amount);\\n        } else {\\n            require(msg.value >= amount, \\\"INSUFFICIENT_ETH\\\");\\n            wrappedNative.deposit{ value: amount }();\\n            SafeERC20.safeTransfer(IERC20(address(wrappedNative)), to, amount);\\n        }   \\n    }\\n\\n\\n    function balanceOf(address token, address account) private view returns (uint256) {\\n        if (token != address(0)) {\\n            // Check if token address contains bytecode\\n            return IERC20(token).balanceOf(account);\\n        } else {\\n            return account.balance;\\n        }\\n    }\\n\\n\\n    /** Stubs for old interface  */\\n    function translateOldStyleZap(ZapERC20Params calldata params) private returns (ZapperOutput memory) {\\n        uint256 startGas = gasleft();\\n        ZapParams memory zapParams = ZapParams({\\n            tokenIn: address(params.tokenIn),\\n            amountIn: params.amountIn,\\n            commands: params.commands,\\n            state: params.state,\\n            tokens: params.tokens,\\n            amountOut: params.amountOut,\\n            tokenOut: address(params.tokenOut),\\n            recipient: msg.sender\\n        });\\n\\n        return zapInner(zapParams, balanceOf(address(params.tokenOut), msg.sender), startGas);\\n    }\\n\\n    function zapERC20(ZapERC20Params calldata params) external  nonReentrant returns (ZapperOutput memory) {\\n        return translateOldStyleZap(params);\\n    }\\n    function zapETH(ZapERC20Params calldata params) external payable nonReentrant returns (ZapperOutput memory) {\\n        return translateOldStyleZap(params);\\n    }\\n    function zapToETH(ZapERC20Params calldata params) external payable nonReentrant returns (ZapperOutput memory) {\\n        return translateOldStyleZap(params);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x97a73db32de6ae530ec0c94bed9e621372db2b860669ddee16c7f5b9cce17d01\",\"license\":\"BlueOak-1.0.0\"},\"contracts/ZapperExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BlueOak-1.0.0\\npragma solidity 0.8.17;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { FacadeRead, RToken } from \\\"./IRTokenZapper.sol\\\";\\nimport { VM } from \\\"./weiroll/VM.sol\\\";\\nimport { PreventTampering } from \\\"./PreventTampering.sol\\\";\\n\\nstruct ExecuteOutput {\\n  uint256[] dust;\\n}\\ncontract ZapperExecutor is VM, PreventTampering {\\n  receive() external payable {}\\n\\n  function add(\\n      uint256 a,\\n      uint256 b\\n  ) external pure returns (uint256) {\\n      return a + b;\\n  }\\n  function sub(\\n      uint256 a,\\n      uint256 b\\n  ) external pure returns (uint256) {\\n      return a - b;\\n  }\\n  function fpMul(\\n      uint256 a,\\n      uint256 b,\\n      uint256 scale\\n  ) external pure returns (uint256) {\\n      return (a * b) / scale;\\n  }\\n  function assertLarger(\\n      uint256 a,\\n      uint256 b\\n  ) external pure returns (bool) {\\n      require(a > b, \\\"!ASSERT_GT\\\");\\n      return true;\\n  }\\n  function assertEqual(\\n      uint256 a,\\n      uint256 b\\n  ) external pure returns (bool) {\\n      require(a == b, \\\"!ASSERT_EQ\\\");\\n      return true;\\n  }\\n\\n\\n  /** @dev Main endpoint to call\\n   * @param commands - Weiroll code to execute\\n   * @param state - Intiaial Weiroll state to use\\n   * @param tokens - All tokens used by the Zap in order to calculate dust\\n   */\\n  function execute(\\n      bytes32[] calldata commands,\\n      bytes[] memory state,\\n      IERC20[] memory tokens\\n  )\\n      revertOnCodeHashChange\\n      public\\n      payable\\n      returns (ExecuteOutput memory out)\\n  {\\n      _execute(commands, state);\\n      out.dust = new uint256[](tokens.length);\\n      for(uint256 i; i < tokens.length; i++) {\\n          out.dust[i] = tokens[i].balanceOf(address(this));\\n      }\\n  }\\n\\n  /** @dev Workaround for weiroll not supporting a way to make untyped calls.\\n    * @param to - Address to call\\n    * @param value - Amount of ETH to send\\n    * @param data - Data to send\\n   */\\n  function rawCall(\\n      address to,\\n      uint256 value,\\n      bytes calldata data\\n  ) external returns (bool success, bytes memory out) {\\n      require(msg.sender == address(this), \\\"ZapperExecutor: Only callable by Zapper\\\");\\n      (success, out) = to.call{value: value}(data);\\n  }\\n\\n  /**   @dev Utility for minting max amount of rToken.\\n             Should only be used off-chain to calculate the exact\\n             amount of an rToken that can be minted\\n      * @param token - rToken to mint\\n      * @param recipient - Recipient of the rToken\\n   */\\n  function mintMaxRToken(\\n      FacadeRead facade,\\n      RToken token,\\n      address recipient\\n  ) external {\\n      uint256 maxIssueableAmount = facade.maxIssuable(token, address(this));\\n      token.issueTo(recipient, maxIssueableAmount);\\n  }\\n}\\n\",\"keccak256\":\"0xeb45943ee7d5f593e4d1dd91e0f7c866bfea2c4f13a3a5e0d65a353db635945e\",\"license\":\"BlueOak-1.0.0\"},\"contracts/weiroll/CommandBuilder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nlibrary CommandBuilder {\\n\\n    uint256 constant IDX_VARIABLE_LENGTH = 0x80;\\n    uint256 constant IDX_VALUE_MASK = 0x7f;\\n    uint256 constant IDX_END_OF_ARGS = 0xff;\\n    uint256 constant IDX_USE_STATE = 0xfe;\\n\\n    function buildInputs(\\n        bytes[] memory state,\\n        bytes4 selector,\\n        bytes32 indices\\n    ) internal view returns (bytes memory ret) {\\n        uint256 count; // Number of bytes in whole ABI encoded message\\n        uint256 free; // Pointer to first free byte in tail part of message\\n        bytes memory stateData; // Optionally encode the current state if the call requires it\\n\\n        uint256 idx;\\n\\n        // Determine the length of the encoded data\\n        for (uint256 i; i < 32;) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    if (stateData.length == 0) {\\n                        stateData = abi.encode(state);\\n                    }\\n                    count += stateData.length;\\n                } else {\\n                    // Add the size of the value, rounded up to the next word boundary, plus space for pointer and length\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n                    require(\\n                        arglen % 32 == 0,\\n                        \\\"Dynamic state variables must be a multiple of 32 bytes\\\"\\n                    );\\n                    count += arglen + 32;\\n                }\\n            } else {\\n                require(\\n                    state[idx & IDX_VALUE_MASK].length == 32,\\n                    \\\"Static state variables must be 32 bytes\\\"\\n                );\\n                count += 32;\\n            }\\n            unchecked{free += 32;}\\n            unchecked{++i;}\\n        }\\n\\n        // Encode it\\n        ret = new bytes(count + 4);\\n        assembly {\\n            mstore(add(ret, 32), selector)\\n        }\\n        count = 0;\\n        for (uint256 i; i < 32;) {\\n            idx = uint8(indices[i]);\\n            if (idx == IDX_END_OF_ARGS) break;\\n\\n            if (idx & IDX_VARIABLE_LENGTH != 0) {\\n                if (idx == IDX_USE_STATE) {\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(stateData, 32, ret, free + 4, stateData.length - 32);\\n                    free += stateData.length - 32;\\n                } else {\\n                    uint256 arglen = state[idx & IDX_VALUE_MASK].length;\\n\\n                    // Variable length data; put a pointer in the slot and write the data at the end\\n                    assembly {\\n                        mstore(add(add(ret, 36), count), free)\\n                    }\\n                    memcpy(\\n                        state[idx & IDX_VALUE_MASK],\\n                        0,\\n                        ret,\\n                        free + 4,\\n                        arglen\\n                    );\\n                    free += arglen;\\n                }\\n            } else {\\n                // Fixed length data; write it directly\\n                bytes memory statevar = state[idx & IDX_VALUE_MASK];\\n                assembly {\\n                    mstore(add(add(ret, 36), count), mload(add(statevar, 32)))\\n                }\\n            }\\n            unchecked{count += 32;}\\n            unchecked{++i;}\\n        }\\n    }\\n\\n    function writeOutputs(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view returns (bytes[] memory) {\\n        uint256 idx = uint8(index);\\n        if (idx == IDX_END_OF_ARGS) return state;\\n\\n        if (idx & IDX_VARIABLE_LENGTH != 0) {\\n            if (idx == IDX_USE_STATE) {\\n                state = abi.decode(output, (bytes[]));\\n            } else {\\n                // Check the first field is 0x20 (because we have only a single return value)\\n                uint256 argptr;\\n                assembly {\\n                    argptr := mload(add(output, 32))\\n                }\\n                require(\\n                    argptr == 32,\\n                    \\\"Only one return value permitted (variable)\\\"\\n                );\\n\\n                assembly {\\n                    // Overwrite the first word of the return data with the length - 32\\n                    mstore(add(output, 32), sub(mload(output), 32))\\n                    // Insert a pointer to the return data, starting at the second word, into state\\n                    mstore(\\n                        add(add(state, 32), mul(and(idx, IDX_VALUE_MASK), 32)),\\n                        add(output, 32)\\n                    )\\n                }\\n            }\\n        } else {\\n            require(output.length >= 32, \\\"Return at least 32 bytes\\\");\\n            // Single word\\n            // require(\\n            //     output.length == 32,\\n            //     \\\"Only one return value permitted (static)\\\"\\n            // );\\n\\n            // There are rare instances of contracts whoes ABI indicate a single word return returning more than 1 word\\n            // returndata buffers containing a single word of data.\\n            if (output.length > 32) {\\n                // Truncate returndata to proper size\\n                bytes memory newOutput = new bytes(32);\\n                memcpy(output, 0, newOutput, 0, output.length);\\n                output = newOutput;\\n            }\\n\\n            state[idx & IDX_VALUE_MASK] = output;\\n        }\\n\\n        return state;\\n    }\\n\\n    function writeTuple(\\n        bytes[] memory state,\\n        bytes1 index,\\n        bytes memory output\\n    ) internal view {\\n        uint256 idx = uint256(uint8(index));\\n        if (idx == IDX_END_OF_ARGS) return;\\n\\n        bytes memory entry = state[idx] = new bytes(output.length + 32);\\n        memcpy(output, 0, entry, 32, output.length);\\n        assembly {\\n            let l := mload(output)\\n            mstore(add(entry, 32), l)\\n        }\\n    }\\n\\n    function memcpy(\\n        bytes memory src,\\n        uint256 srcidx,\\n        bytes memory dest,\\n        uint256 destidx,\\n        uint256 len\\n    ) internal view {\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    4,\\n                    add(add(src, 32), srcidx),\\n                    len,\\n                    add(add(dest, 32), destidx),\\n                    len\\n                )\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a4c8144e65ff02cebab947a9d2e8f93a29a47ddd2d8e0be3efae9eb6501baec\",\"license\":\"MIT\"},\"contracts/weiroll/VM.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"./CommandBuilder.sol\\\";\\n\\n\\nabstract contract VM {\\n    using CommandBuilder for bytes[];\\n\\n    uint256 constant FLAG_CT_DELEGATECALL = 0x00;\\n    uint256 constant FLAG_CT_CALL = 0x01;\\n    uint256 constant FLAG_CT_STATICCALL = 0x02;\\n    uint256 constant FLAG_CT_VALUECALL = 0x03;\\n    uint256 constant FLAG_CT_MASK = 0x03;\\n    uint256 constant FLAG_EXTENDED_COMMAND = 0x80;\\n    uint256 constant FLAG_TUPLE_RETURN = 0x40;\\n\\n    uint256 constant SHORT_COMMAND_FILL = 0x000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    address immutable self;\\n\\n    error ExecutionFailed(\\n        uint256 command_index,\\n        address target,\\n        string message\\n    );\\n\\n    constructor() {\\n        self = address(this);\\n    }\\n\\n    // function callExtension(\\n    //     bytes memory data\\n    // ) virtual internal returns (bool success, bytes memory outdata);\\n\\n    function _execute(bytes32[] calldata commands, bytes[] memory state)\\n      internal returns (bytes[] memory)\\n    {\\n        bytes32 command;\\n        uint256 flags;\\n        bytes32 indices;\\n\\n        bool success;\\n        bytes memory outdata;\\n\\n        uint256 commandsLength = commands.length;\\n        for (uint256 i; i < commandsLength;) {\\n            command = commands[i];\\n            flags = uint256(uint8(bytes1(command << 32)));\\n\\n            if (flags & FLAG_EXTENDED_COMMAND != 0) {\\n                indices = commands[i++];\\n            } else {\\n                indices = bytes32(uint256(command << 40) | SHORT_COMMAND_FILL);\\n            }\\n\\n            if (flags & FLAG_CT_MASK == FLAG_CT_DELEGATECALL) {\\n                (success, outdata) = address(uint160(uint256(command))).delegatecall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_CALL) {\\n                    (success, outdata) = address(uint160(uint256(command))).call( // target\\n                        // inputs\\n                        state.buildInputs(\\n                            //selector\\n                            bytes4(command),\\n                            indices\\n                        )\\n                    );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_STATICCALL) {\\n                (success, outdata) = address(uint160(uint256(command))).staticcall( // target\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        indices\\n                    )\\n                );\\n            } else if (flags & FLAG_CT_MASK == FLAG_CT_VALUECALL) {\\n                uint256 calleth;\\n                bytes memory v = state[uint8(bytes1(indices))];\\n                require(v.length == 32, \\\"_execute: value call has no value indicated.\\\");\\n                assembly {\\n                    calleth := mload(add(v, 0x20))\\n                }\\n                (success, outdata) = address(uint160(uint256(command))).call{ // target\\n                    value: calleth\\n                }(\\n                    // inputs\\n                    state.buildInputs(\\n                        //selector\\n                        bytes4(command),\\n                        bytes32(uint256(indices << 8) | CommandBuilder.IDX_END_OF_ARGS)\\n                    )\\n                );\\n            } else {\\n                revert(\\\"Invalid calltype\\\");\\n            }\\n\\n            if (!success) {\\n                if (outdata.length > 0) {\\n                    assembly {\\n                        outdata := add(outdata, 68)\\n                    }\\n                }\\n                revert ExecutionFailed({\\n                    command_index: i,\\n                    target: address(uint160(uint256(command))),\\n                    message: string(outdata)\\n                });\\n            }\\n\\n            if (flags & FLAG_TUPLE_RETURN != 0) {\\n                state.writeTuple(bytes1(command << 88), outdata);\\n            } else {\\n                state = state.writeOutputs(bytes1(command << 88), outdata);\\n            }\\n            unchecked{++i;}\\n        }\\n        return state;\\n    }\\n}\\n\",\"keccak256\":\"0xd7d97f7093a7495046de45bef3d72fbe8df6b10d328121dfc178b2d12b1bccbb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061004e5760003560e01c80630ea3694c1461005a5780633e86ff701461008a5780638e0a8e9d146100ba578063ceba504d146100f7578063dd074ea01461012757610055565b3661005557005b600080fd5b610074600480360381019061006f9190610d3b565b610157565b6040516100819190610e9c565b60405180910390f35b6100a4600480360381019061009f9190610d3b565b6101ac565b6040516100b19190610e9c565b60405180910390f35b3480156100c657600080fd5b506100e160048036038101906100dc9190610edd565b610212565b6040516100ee9190610e9c565b60405180910390f35b610111600480360381019061010c9190610edd565b61023a565b60405161011e9190610e9c565b60405180910390f35b610141600480360381019061013c9190610edd565b610262565b60405161014e9190610e9c565b60405180910390f35b61015f610ce1565b61016761028a565b60005a90506101878360c00160208101906101829190610f84565b6102d9565b61019c836101949061152b565b600083610326565b9150506101a7610583565b919050565b6101b4610ce1565b6101bc61028a565b60005a9050610202836101ce9061152b565b6101fc8560c00160208101906101e49190610f84565b8660e00160208101906101f79190610f84565b61058d565b83610326565b91505061020d610583565b919050565b61021a610ce1565b61022261028a565b61022b82610664565b9050610235610583565b919050565b610242610ce1565b61024a61028a565b61025382610664565b905061025d610583565b919050565b61026a610ce1565b61027261028a565b61027b82610664565b9050610285610583565b919050565b6002600054036102cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c69061159b565b60405180910390fd5b6002600081905550565b6000813b905060008114610322576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031990611607565b60405180910390fd5b5050565b61032e610ce1565b6000846020015103610375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036c90611673565b60405180910390fd5b60008460a00151036103bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b3906116df565b60405180910390fd5b6103ef846000015185602001517f0000000000000000000000000000000000000000000000000000000000000000610804565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166308c4b4988560400151866060015187608001516040518463ffffffff1660e01b815260040161045893929190611a0c565b6000604051808303816000875af1158015610477573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104a09190611b88565b60000151816000018190525060006104c08560c001518660e0015161058d565b9050838111610504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fb90611c1d565b60405180910390fd5b600084826105129190611c6c565b90508560a0015181101561055b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055290611cec565b60405180910390fd5b808360200181815250505a846105719190611c6c565b83604001818152505050509392505050565b6001600081905550565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610643578273ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016105fb9190611d1b565b602060405180830381865afa158015610618573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063c9190611d36565b905061065e565b8173ffffffffffffffffffffffffffffffffffffffff163190505b92915050565b61066c610ce1565b60005a905060006040518061010001604052808560000160208101906106929190611d63565b73ffffffffffffffffffffffffffffffffffffffff168152602001856020013581526020018580604001906106c79190611d9f565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050815260200185806060019061071c9190611e02565b906107279190611e65565b815260200185806080019061073c9190611e7a565b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018560a0013581526020018560c001602081019061079e9190611d63565b73ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681525090506107fb816107f58660c00160208101906107ef9190611d63565b3361058d565b84610326565b92505050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610849576108448333838561093e565b610939565b8134101561088c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088390611f29565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b1580156108f457600080fd5b505af1158015610908573d6000803e3d6000fd5b50505050506109387f000000000000000000000000000000000000000000000000000000000000000082846109c7565b5b505050565b6109c1846323b872dd60e01b85858560405160240161095f93929190611f58565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a4d565b50505050565b610a488363a9059cbb60e01b84846040516024016109e6929190611f8f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a4d565b505050565b6000610aaf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610b149092919063ffffffff16565b9050600081511115610b0f5780806020019051810190610acf9190611ff0565b610b0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b059061208f565b60405180910390fd5b5b505050565b6060610b238484600085610b2c565b90509392505050565b606082471015610b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6890612121565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b9a919061217d565b60006040518083038185875af1925050503d8060008114610bd7576040519150601f19603f3d011682016040523d82523d6000602084013e610bdc565b606091505b5091509150610bed87838387610bf9565b92505050949350505050565b60608315610c5b576000835103610c5357610c1385610c6e565b610c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c49906121e0565b60405180910390fd5b5b829050610c66565b610c658383610c91565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115610ca45781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd89190612244565b60405180910390fd5b60405180606001604052806060815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b60006101008284031215610d3257610d31610d16565b5b81905092915050565b600060208284031215610d5157610d50610d0c565b5b600082013567ffffffffffffffff811115610d6f57610d6e610d11565b5b610d7b84828501610d1b565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b610dc381610db0565b82525050565b6000610dd58383610dba565b60208301905092915050565b6000602082019050919050565b6000610df982610d84565b610e038185610d8f565b9350610e0e83610da0565b8060005b83811015610e3f578151610e268882610dc9565b9750610e3183610de1565b925050600181019050610e12565b5085935050505092915050565b60006060830160008301518482036000860152610e698282610dee565b9150506020830151610e7e6020860182610dba565b506040830151610e916040860182610dba565b508091505092915050565b60006020820190508181036000830152610eb68184610e4c565b905092915050565b600060e08284031215610ed457610ed3610d16565b5b81905092915050565b600060208284031215610ef357610ef2610d0c565b5b600082013567ffffffffffffffff811115610f1157610f10610d11565b5b610f1d84828501610ebe565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f5182610f26565b9050919050565b610f6181610f46565b8114610f6c57600080fd5b50565b600081359050610f7e81610f58565b92915050565b600060208284031215610f9a57610f99610d0c565b5b6000610fa884828501610f6f565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610fff82610fb6565b810181811067ffffffffffffffff8211171561101e5761101d610fc7565b5b80604052505050565b6000611031610d02565b905061103d8282610ff6565b919050565b600080fd5b61105081610db0565b811461105b57600080fd5b50565b60008135905061106d81611047565b92915050565b600080fd5b600067ffffffffffffffff82111561109357611092610fc7565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b6110bc816110a9565b81146110c757600080fd5b50565b6000813590506110d9816110b3565b92915050565b60006110f26110ed84611078565b611027565b90508083825260208201905060208402830185811115611115576111146110a4565b5b835b8181101561113e578061112a88826110ca565b845260208401935050602081019050611117565b5050509392505050565b600082601f83011261115d5761115c611073565b5b813561116d8482602086016110df565b91505092915050565b600067ffffffffffffffff82111561119157611190610fc7565b5b602082029050602081019050919050565b600080fd5b600067ffffffffffffffff8211156111c2576111c1610fc7565b5b6111cb82610fb6565b9050602081019050919050565b82818337600083830152505050565b60006111fa6111f5846111a7565b611027565b905082815260208101848484011115611216576112156111a2565b5b6112218482856111d8565b509392505050565b600082601f83011261123e5761123d611073565b5b813561124e8482602086016111e7565b91505092915050565b600061126a61126584611176565b611027565b9050808382526020820190506020840283018581111561128d5761128c6110a4565b5b835b818110156112d457803567ffffffffffffffff8111156112b2576112b1611073565b5b8086016112bf8982611229565b8552602085019450505060208101905061128f565b5050509392505050565b600082601f8301126112f3576112f2611073565b5b8135611303848260208601611257565b91505092915050565b600067ffffffffffffffff82111561132757611326610fc7565b5b602082029050602081019050919050565b600061134382610f46565b9050919050565b61135381611338565b811461135e57600080fd5b50565b6000813590506113708161134a565b92915050565b60006113896113848461130c565b611027565b905080838252602082019050602084028301858111156113ac576113ab6110a4565b5b835b818110156113d557806113c18882611361565b8452602084019350506020810190506113ae565b5050509392505050565b600082601f8301126113f4576113f3611073565b5b8135611404848260208601611376565b91505092915050565b6000610100828403121561142457611423610fb1565b5b61142f610100611027565b9050600061143f84828501610f6f565b60008301525060206114538482850161105e565b602083015250604082013567ffffffffffffffff81111561147757611476611042565b5b61148384828501611148565b604083015250606082013567ffffffffffffffff8111156114a7576114a6611042565b5b6114b3848285016112de565b606083015250608082013567ffffffffffffffff8111156114d7576114d6611042565b5b6114e3848285016113df565b60808301525060a06114f78482850161105e565b60a08301525060c061150b84828501610f6f565b60c08301525060e061151f84828501610f6f565b60e08301525092915050565b6000611537368361140d565b9050919050565b600082825260208201905092915050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611585601f8361153e565b91506115908261154f565b602082019050919050565b600060208201905081810360008301526115b481611578565b9050919050565b7f5245545259000000000000000000000000000000000000000000000000000000600082015250565b60006115f160058361153e565b91506115fc826115bb565b602082019050919050565b60006020820190508181036000830152611620816115e4565b9050919050565b7f494e56414c49445f494e5055545f414d4f554e54000000000000000000000000600082015250565b600061165d60148361153e565b915061166882611627565b602082019050919050565b6000602082019050818103600083015261168c81611650565b9050919050565b7f494e56414c49445f4f55545055545f414d4f554e540000000000000000000000600082015250565b60006116c960158361153e565b91506116d482611693565b602082019050919050565b600060208201905081810360008301526116f8816116bc565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611734816110a9565b82525050565b6000611746838361172b565b60208301905092915050565b6000602082019050919050565b600061176a826116ff565b611774818561170a565b935061177f8361171b565b8060005b838110156117b0578151611797888261173a565b97506117a283611752565b925050600181019050611783565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611823578082015181840152602081019050611808565b60008484015250505050565b600061183a826117e9565b61184481856117f4565b9350611854818560208601611805565b61185d81610fb6565b840191505092915050565b6000611874838361182f565b905092915050565b6000602082019050919050565b6000611894826117bd565b61189e81856117c8565b9350836020820285016118b0856117d9565b8060005b858110156118ec57848403895281516118cd8582611868565b94506118d88361187c565b925060208a019950506001810190506118b4565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b600061194f61194a61194584610f26565b61192a565b610f26565b9050919050565b600061196182611934565b9050919050565b600061197382611956565b9050919050565b61198381611968565b82525050565b6000611995838361197a565b60208301905092915050565b6000602082019050919050565b60006119b9826118fe565b6119c38185611909565b93506119ce8361191a565b8060005b838110156119ff5781516119e68882611989565b97506119f1836119a1565b9250506001810190506119d2565b5085935050505092915050565b60006060820190508181036000830152611a26818661175f565b90508181036020830152611a3a8185611889565b90508181036040830152611a4e81846119ae565b9050949350505050565b600067ffffffffffffffff821115611a7357611a72610fc7565b5b602082029050602081019050919050565b600081519050611a9381611047565b92915050565b6000611aac611aa784611a58565b611027565b90508083825260208201905060208402830185811115611acf57611ace6110a4565b5b835b81811015611af85780611ae48882611a84565b845260208401935050602081019050611ad1565b5050509392505050565b600082601f830112611b1757611b16611073565b5b8151611b27848260208601611a99565b91505092915050565b600060208284031215611b4657611b45610fb1565b5b611b506020611027565b9050600082015167ffffffffffffffff811115611b7057611b6f611042565b5b611b7c84828501611b02565b60008301525092915050565b600060208284031215611b9e57611b9d610d0c565b5b600082015167ffffffffffffffff811115611bbc57611bbb610d11565b5b611bc884828501611b30565b91505092915050565b7f494e56414c49445f4e45575f42414c414e434500000000000000000000000000600082015250565b6000611c0760138361153e565b9150611c1282611bd1565b602082019050919050565b60006020820190508181036000830152611c3681611bfa565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c7782610db0565b9150611c8283610db0565b9250828203905081811115611c9a57611c99611c3d565b5b92915050565b7f494e53554646494349454e545f4f555400000000000000000000000000000000600082015250565b6000611cd660108361153e565b9150611ce182611ca0565b602082019050919050565b60006020820190508181036000830152611d0581611cc9565b9050919050565b611d1581610f46565b82525050565b6000602082019050611d306000830184611d0c565b92915050565b600060208284031215611d4c57611d4b610d0c565b5b6000611d5a84828501611a84565b91505092915050565b600060208284031215611d7957611d78610d0c565b5b6000611d8784828501611361565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611dbc57611dbb611d90565b5b80840192508235915067ffffffffffffffff821115611dde57611ddd611d95565b5b602083019250602082023603831315611dfa57611df9611d9a565b5b509250929050565b60008083356001602003843603038112611e1f57611e1e611d90565b5b80840192508235915067ffffffffffffffff821115611e4157611e40611d95565b5b602083019250602082023603831315611e5d57611e5c611d9a565b5b509250929050565b6000611e72368484611257565b905092915050565b60008083356001602003843603038112611e9757611e96611d90565b5b80840192508235915067ffffffffffffffff821115611eb957611eb8611d95565b5b602083019250602082023603831315611ed557611ed4611d9a565b5b509250929050565b7f494e53554646494349454e545f45544800000000000000000000000000000000600082015250565b6000611f1360108361153e565b9150611f1e82611edd565b602082019050919050565b60006020820190508181036000830152611f4281611f06565b9050919050565b611f5281610db0565b82525050565b6000606082019050611f6d6000830186611d0c565b611f7a6020830185611d0c565b611f876040830184611f49565b949350505050565b6000604082019050611fa46000830185611d0c565b611fb16020830184611f49565b9392505050565b60008115159050919050565b611fcd81611fb8565b8114611fd857600080fd5b50565b600081519050611fea81611fc4565b92915050565b60006020828403121561200657612005610d0c565b5b600061201484828501611fdb565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612079602a8361153e565b91506120848261201d565b604082019050919050565b600060208201905081810360008301526120a88161206c565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061210b60268361153e565b9150612116826120af565b604082019050919050565b6000602082019050818103600083015261213a816120fe565b9050919050565b600081905092915050565b6000612157826117e9565b6121618185612141565b9350612171818560208601611805565b80840191505092915050565b6000612189828461214c565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006121ca601d8361153e565b91506121d582612194565b602082019050919050565b600060208201905081810360008301526121f9816121bd565b9050919050565b600081519050919050565b600061221682612200565b612220818561153e565b9350612230818560208601611805565b61223981610fb6565b840191505092915050565b6000602082019050818103600083015261225e818461220b565b90509291505056fea26469706673582212202c166dd6d02e48b7e45cdbcfee29b6192ca5f78b28b900aa19b1971a3d6fddf864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 89,
        "contract": "contracts/Zapper2.sol:Zapper2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}