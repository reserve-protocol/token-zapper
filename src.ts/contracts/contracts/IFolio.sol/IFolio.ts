/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFolioInterface extends utils.Interface {
  functions: {
    "distributeFees()": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "distributeFees"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "distributeFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;

  events: {
    "AuctionLengthSet(uint256)": EventFragment;
    "BasketTokenAdded(address)": EventFragment;
    "BasketTokenRemoved(address)": EventFragment;
    "Bid(uint256,uint256,uint256)": EventFragment;
    "FeeRecipientSet(address,uint96)": EventFragment;
    "FolioFeeSet(uint256,uint256)": EventFragment;
    "FolioKilled()": EventFragment;
    "MintingFeeSet(uint256)": EventFragment;
    "TradeApproved(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "TradeDelaySet(uint256)": EventFragment;
    "TradeKilled(uint256)": EventFragment;
    "TradeOpened(uint256,uint256,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionLengthSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasketTokenAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BasketTokenRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeRecipientSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FolioFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FolioKilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintingFeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeApproved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeDelaySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeKilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TradeOpened"): EventFragment;
}

export interface AuctionLengthSetEventObject {
  newAuctionLength: BigNumber;
}
export type AuctionLengthSetEvent = TypedEvent<
  [BigNumber],
  AuctionLengthSetEventObject
>;

export type AuctionLengthSetEventFilter =
  TypedEventFilter<AuctionLengthSetEvent>;

export interface BasketTokenAddedEventObject {
  token: string;
}
export type BasketTokenAddedEvent = TypedEvent<
  [string],
  BasketTokenAddedEventObject
>;

export type BasketTokenAddedEventFilter =
  TypedEventFilter<BasketTokenAddedEvent>;

export interface BasketTokenRemovedEventObject {
  token: string;
}
export type BasketTokenRemovedEvent = TypedEvent<
  [string],
  BasketTokenRemovedEventObject
>;

export type BasketTokenRemovedEventFilter =
  TypedEventFilter<BasketTokenRemovedEvent>;

export interface BidEventObject {
  tradeId: BigNumber;
  sellAmount: BigNumber;
  buyAmount: BigNumber;
}
export type BidEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  BidEventObject
>;

export type BidEventFilter = TypedEventFilter<BidEvent>;

export interface FeeRecipientSetEventObject {
  recipient: string;
  portion: BigNumber;
}
export type FeeRecipientSetEvent = TypedEvent<
  [string, BigNumber],
  FeeRecipientSetEventObject
>;

export type FeeRecipientSetEventFilter = TypedEventFilter<FeeRecipientSetEvent>;

export interface FolioFeeSetEventObject {
  newFee: BigNumber;
  feeAnnually: BigNumber;
}
export type FolioFeeSetEvent = TypedEvent<
  [BigNumber, BigNumber],
  FolioFeeSetEventObject
>;

export type FolioFeeSetEventFilter = TypedEventFilter<FolioFeeSetEvent>;

export interface FolioKilledEventObject {}
export type FolioKilledEvent = TypedEvent<[], FolioKilledEventObject>;

export type FolioKilledEventFilter = TypedEventFilter<FolioKilledEvent>;

export interface MintingFeeSetEventObject {
  newFee: BigNumber;
}
export type MintingFeeSetEvent = TypedEvent<
  [BigNumber],
  MintingFeeSetEventObject
>;

export type MintingFeeSetEventFilter = TypedEventFilter<MintingFeeSetEvent>;

export interface TradeApprovedEventObject {
  tradeId: BigNumber;
  from: string;
  to: string;
  startPrice: BigNumber;
  endPrice: BigNumber;
  sellLimitSpot: BigNumber;
  sellLimitLow: BigNumber;
  sellLimitHigh: BigNumber;
  buyLimitSpot: BigNumber;
  buyLimitLow: BigNumber;
  buyLimitHigh: BigNumber;
}
export type TradeApprovedEvent = TypedEvent<
  [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  TradeApprovedEventObject
>;

export type TradeApprovedEventFilter = TypedEventFilter<TradeApprovedEvent>;

export interface TradeDelaySetEventObject {
  newTradeDelay: BigNumber;
}
export type TradeDelaySetEvent = TypedEvent<
  [BigNumber],
  TradeDelaySetEventObject
>;

export type TradeDelaySetEventFilter = TypedEventFilter<TradeDelaySetEvent>;

export interface TradeKilledEventObject {
  tradeId: BigNumber;
}
export type TradeKilledEvent = TypedEvent<[BigNumber], TradeKilledEventObject>;

export type TradeKilledEventFilter = TypedEventFilter<TradeKilledEvent>;

export interface TradeOpenedEventObject {
  tradeId: BigNumber;
  startPrice: BigNumber;
  endPrice: BigNumber;
  sellLimit: BigNumber;
  buyLimit: BigNumber;
  start: BigNumber;
  end: BigNumber;
}
export type TradeOpenedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  TradeOpenedEventObject
>;

export type TradeOpenedEventFilter = TypedEventFilter<TradeOpenedEvent>;

export interface IFolio extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFolioInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    distributeFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  distributeFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    distributeFees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AuctionLengthSet(uint256)"(
      newAuctionLength?: null
    ): AuctionLengthSetEventFilter;
    AuctionLengthSet(newAuctionLength?: null): AuctionLengthSetEventFilter;

    "BasketTokenAdded(address)"(
      token?: PromiseOrValue<string> | null
    ): BasketTokenAddedEventFilter;
    BasketTokenAdded(
      token?: PromiseOrValue<string> | null
    ): BasketTokenAddedEventFilter;

    "BasketTokenRemoved(address)"(
      token?: PromiseOrValue<string> | null
    ): BasketTokenRemovedEventFilter;
    BasketTokenRemoved(
      token?: PromiseOrValue<string> | null
    ): BasketTokenRemovedEventFilter;

    "Bid(uint256,uint256,uint256)"(
      tradeId?: PromiseOrValue<BigNumberish> | null,
      sellAmount?: null,
      buyAmount?: null
    ): BidEventFilter;
    Bid(
      tradeId?: PromiseOrValue<BigNumberish> | null,
      sellAmount?: null,
      buyAmount?: null
    ): BidEventFilter;

    "FeeRecipientSet(address,uint96)"(
      recipient?: PromiseOrValue<string> | null,
      portion?: null
    ): FeeRecipientSetEventFilter;
    FeeRecipientSet(
      recipient?: PromiseOrValue<string> | null,
      portion?: null
    ): FeeRecipientSetEventFilter;

    "FolioFeeSet(uint256,uint256)"(
      newFee?: null,
      feeAnnually?: null
    ): FolioFeeSetEventFilter;
    FolioFeeSet(newFee?: null, feeAnnually?: null): FolioFeeSetEventFilter;

    "FolioKilled()"(): FolioKilledEventFilter;
    FolioKilled(): FolioKilledEventFilter;

    "MintingFeeSet(uint256)"(newFee?: null): MintingFeeSetEventFilter;
    MintingFeeSet(newFee?: null): MintingFeeSetEventFilter;

    "TradeApproved(uint256,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      tradeId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      startPrice?: null,
      endPrice?: null,
      sellLimitSpot?: null,
      sellLimitLow?: null,
      sellLimitHigh?: null,
      buyLimitSpot?: null,
      buyLimitLow?: null,
      buyLimitHigh?: null
    ): TradeApprovedEventFilter;
    TradeApproved(
      tradeId?: PromiseOrValue<BigNumberish> | null,
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      startPrice?: null,
      endPrice?: null,
      sellLimitSpot?: null,
      sellLimitLow?: null,
      sellLimitHigh?: null,
      buyLimitSpot?: null,
      buyLimitLow?: null,
      buyLimitHigh?: null
    ): TradeApprovedEventFilter;

    "TradeDelaySet(uint256)"(newTradeDelay?: null): TradeDelaySetEventFilter;
    TradeDelaySet(newTradeDelay?: null): TradeDelaySetEventFilter;

    "TradeKilled(uint256)"(
      tradeId?: PromiseOrValue<BigNumberish> | null
    ): TradeKilledEventFilter;
    TradeKilled(
      tradeId?: PromiseOrValue<BigNumberish> | null
    ): TradeKilledEventFilter;

    "TradeOpened(uint256,uint256,uint256,uint256,uint256,uint256,uint256)"(
      tradeId?: PromiseOrValue<BigNumberish> | null,
      startPrice?: null,
      endPrice?: null,
      sellLimit?: null,
      buyLimit?: null,
      start?: null,
      end?: null
    ): TradeOpenedEventFilter;
    TradeOpened(
      tradeId?: PromiseOrValue<BigNumberish> | null,
      startPrice?: null,
      endPrice?: null,
      sellLimit?: null,
      buyLimit?: null,
      start?: null,
      end?: null
    ): TradeOpenedEventFilter;
  };

  estimateGas: {
    distributeFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    distributeFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
